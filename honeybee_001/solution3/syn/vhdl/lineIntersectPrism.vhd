-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lineIntersectPrism is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    obs_x : IN STD_LOGIC_VECTOR (31 downto 0);
    obs_y : IN STD_LOGIC_VECTOR (31 downto 0);
    obs_z : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of lineIntersectPrism is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_86_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_92_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_643_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_643_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_643_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_643_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_98_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_104_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i3_reg_655 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i3_reg_655_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i3_reg_655_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i3_reg_655_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i3_reg_655_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i5_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i7_reg_667 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i7_reg_667_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i7_reg_667_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i7_reg_667_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i7_reg_667_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_122_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_4_reg_673 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_127_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_reg_678 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i6_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_2_reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_2_reg_688_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_5_reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_5_reg_696_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_3_reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_3_reg_704_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal max_fu_342_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_713_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_713_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_713_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_713_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_reg_719 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_reg_719_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_3_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_3_reg_727_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_157_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_1_reg_735 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_1_reg_735_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal min_7_fu_503_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_7_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln70_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_750 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_1_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_1_reg_755 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_2_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_2_reg_760 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_3_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_3_reg_765 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal bitcast_ln20_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln20_1_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_192_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln20_fu_202_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln20_1_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_209_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln20_1_fu_219_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln20_3_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_2_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_1_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln22_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_274_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_fu_284_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln22_1_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_1_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_1_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_1_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_4_fu_318_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_6_fu_336_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln40_fu_350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln40_1_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_353_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln40_fu_363_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln40_1_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_370_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln40_1_fu_380_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln40_3_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_2_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_1_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln42_fu_432_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_435_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln42_fu_445_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln42_1_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_1_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln45_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln45_1_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_2_fu_479_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_4_fu_497_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln70_fu_511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln70_1_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_514_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln70_fu_524_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_12_fu_531_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln70_1_fu_541_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln70_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln70_1_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln70_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal obs_x_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal obs_y_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal obs_z_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal edge_p1_x_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal edge_p1_y_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal edge_p1_z_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal edge_p2_x_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal edge_p2_y_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal edge_p2_z_int_reg : STD_LOGIC_VECTOR (31 downto 0);

    component honeybee_fsub_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fadd_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fdiv_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fcmp_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    honeybee_fsub_32nbkb_U1 : component honeybee_fsub_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => obs_x_int_reg,
        din1 => edge_p1_x_int_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_86_p2);

    honeybee_fsub_32nbkb_U2 : component honeybee_fsub_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => edge_p2_x_int_reg,
        din1 => edge_p1_x_int_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_92_p2);

    honeybee_fsub_32nbkb_U3 : component honeybee_fsub_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => obs_y_int_reg,
        din1 => edge_p1_y_int_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_98_p2);

    honeybee_fsub_32nbkb_U4 : component honeybee_fsub_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => edge_p2_y_int_reg,
        din1 => edge_p1_y_int_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_104_p2);

    honeybee_fsub_32nbkb_U5 : component honeybee_fsub_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => obs_z_int_reg,
        din1 => edge_p1_z_int_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_110_p2);

    honeybee_fsub_32nbkb_U6 : component honeybee_fsub_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => edge_p2_z_int_reg,
        din1 => edge_p1_z_int_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_116_p2);

    honeybee_fadd_32ncud_U7 : component honeybee_fadd_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_reg_637,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_122_p2);

    honeybee_fadd_32ncud_U8 : component honeybee_fadd_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i1_reg_649,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_127_p2);

    honeybee_fadd_32ncud_U9 : component honeybee_fadd_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i5_reg_661,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_132_p2);

    honeybee_fdiv_32ndEe_U10 : component honeybee_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_reg_637,
        din1 => tmp_1_i_reg_643,
        ce => ap_const_logic_1,
        dout => grp_fu_137_p2);

    honeybee_fdiv_32ndEe_U11 : component honeybee_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i1_reg_649,
        din1 => tmp_1_i3_reg_655,
        ce => ap_const_logic_1,
        dout => grp_fu_141_p2);

    honeybee_fdiv_32ndEe_U12 : component honeybee_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i5_reg_661,
        din1 => tmp_1_i7_reg_667,
        ce => ap_const_logic_1,
        dout => grp_fu_145_p2);

    honeybee_fdiv_32ndEe_U13 : component honeybee_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_4_reg_673,
        din1 => tmp_1_i_reg_643_pp0_iter7_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_149_p2);

    honeybee_fdiv_32ndEe_U14 : component honeybee_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i2_reg_678,
        din1 => tmp_1_i3_reg_655_pp0_iter7_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_153_p2);

    honeybee_fdiv_32ndEe_U15 : component honeybee_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i6_reg_683,
        din1 => tmp_1_i7_reg_667_pp0_iter7_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_157_p2);

    honeybee_fcmp_32neOg_U16 : component honeybee_fcmp_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => max_2_reg_688,
        din1 => max_5_reg_696,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_161_p2);

    honeybee_fcmp_32neOg_U17 : component honeybee_fcmp_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => max_3_reg_704,
        din1 => max_2_reg_688,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_165_p2);

    honeybee_fcmp_32neOg_U18 : component honeybee_fcmp_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => max_3_reg_704,
        din1 => max_5_reg_696,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_169_p2);

    honeybee_fcmp_32neOg_U19 : component honeybee_fcmp_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => min_reg_719,
        din1 => min_3_reg_727,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_173_p2);

    honeybee_fcmp_32neOg_U20 : component honeybee_fcmp_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => min_1_reg_735,
        din1 => min_reg_719,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_177_p2);

    honeybee_fcmp_32neOg_U21 : component honeybee_fcmp_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => min_1_reg_735,
        din1 => min_3_reg_727,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_181_p2);

    honeybee_fcmp_32neOg_U22 : component honeybee_fcmp_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => max_reg_713_pp0_iter19_reg,
        din1 => min_7_reg_744,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_185_p2);





    edge_p1_x_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            edge_p1_x_int_reg <= edge_p1_x;
        end if;
    end process;

    edge_p1_y_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            edge_p1_y_int_reg <= edge_p1_y;
        end if;
    end process;

    edge_p1_z_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            edge_p1_z_int_reg <= edge_p1_z;
        end if;
    end process;

    edge_p2_x_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            edge_p2_x_int_reg <= edge_p2_x;
        end if;
    end process;

    edge_p2_y_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            edge_p2_y_int_reg <= edge_p2_y;
        end if;
    end process;

    edge_p2_z_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            edge_p2_z_int_reg <= edge_p2_z;
        end if;
    end process;

    obs_x_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            obs_x_int_reg <= obs_x;
        end if;
    end process;

    obs_y_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            obs_y_int_reg <= obs_y;
        end if;
    end process;

    obs_z_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            obs_z_int_reg <= obs_z;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln70_1_reg_755 <= icmp_ln70_1_fu_551_p2;
                icmp_ln70_2_reg_760 <= icmp_ln70_2_fu_557_p2;
                icmp_ln70_3_reg_765 <= icmp_ln70_3_fu_563_p2;
                icmp_ln70_reg_750 <= icmp_ln70_fu_545_p2;
                max_2_reg_688 <= grp_fu_137_p2;
                max_2_reg_688_pp0_iter14_reg <= max_2_reg_688;
                max_3_reg_704 <= grp_fu_145_p2;
                max_3_reg_704_pp0_iter14_reg <= max_3_reg_704;
                max_5_reg_696 <= grp_fu_141_p2;
                max_5_reg_696_pp0_iter14_reg <= max_5_reg_696;
                max_reg_713 <= max_fu_342_p3;
                max_reg_713_pp0_iter16_reg <= max_reg_713;
                max_reg_713_pp0_iter17_reg <= max_reg_713_pp0_iter16_reg;
                max_reg_713_pp0_iter18_reg <= max_reg_713_pp0_iter17_reg;
                max_reg_713_pp0_iter19_reg <= max_reg_713_pp0_iter18_reg;
                min_1_reg_735 <= grp_fu_157_p2;
                min_1_reg_735_pp0_iter18_reg <= min_1_reg_735;
                min_3_reg_727 <= grp_fu_153_p2;
                min_3_reg_727_pp0_iter18_reg <= min_3_reg_727;
                min_7_reg_744 <= min_7_fu_503_p3;
                min_reg_719 <= grp_fu_149_p2;
                min_reg_719_pp0_iter18_reg <= min_reg_719;
                tmp_1_i3_reg_655 <= grp_fu_104_p2;
                tmp_1_i3_reg_655_pp0_iter4_reg <= tmp_1_i3_reg_655;
                tmp_1_i3_reg_655_pp0_iter5_reg <= tmp_1_i3_reg_655_pp0_iter4_reg;
                tmp_1_i3_reg_655_pp0_iter6_reg <= tmp_1_i3_reg_655_pp0_iter5_reg;
                tmp_1_i3_reg_655_pp0_iter7_reg <= tmp_1_i3_reg_655_pp0_iter6_reg;
                tmp_1_i7_reg_667 <= grp_fu_116_p2;
                tmp_1_i7_reg_667_pp0_iter4_reg <= tmp_1_i7_reg_667;
                tmp_1_i7_reg_667_pp0_iter5_reg <= tmp_1_i7_reg_667_pp0_iter4_reg;
                tmp_1_i7_reg_667_pp0_iter6_reg <= tmp_1_i7_reg_667_pp0_iter5_reg;
                tmp_1_i7_reg_667_pp0_iter7_reg <= tmp_1_i7_reg_667_pp0_iter6_reg;
                tmp_1_i_reg_643 <= grp_fu_92_p2;
                tmp_1_i_reg_643_pp0_iter4_reg <= tmp_1_i_reg_643;
                tmp_1_i_reg_643_pp0_iter5_reg <= tmp_1_i_reg_643_pp0_iter4_reg;
                tmp_1_i_reg_643_pp0_iter6_reg <= tmp_1_i_reg_643_pp0_iter5_reg;
                tmp_1_i_reg_643_pp0_iter7_reg <= tmp_1_i_reg_643_pp0_iter6_reg;
                tmp_i1_reg_649 <= grp_fu_98_p2;
                tmp_i2_reg_678 <= grp_fu_127_p2;
                tmp_i5_reg_661 <= grp_fu_110_p2;
                tmp_i6_reg_683 <= grp_fu_132_p2;
                tmp_i_4_reg_673 <= grp_fu_122_p2;
                tmp_i_reg_637 <= grp_fu_86_p2;
            end if;
        end if;
    end process;
    and_ln20_1_fu_265_p2 <= (grp_fu_161_p2 and and_ln20_fu_259_p2);
    and_ln20_fu_259_p2 <= (or_ln20_fu_235_p2 and or_ln20_1_fu_253_p2);
    and_ln22_1_fu_312_p2 <= (grp_fu_165_p2 and and_ln22_fu_306_p2);
    and_ln22_fu_306_p2 <= (or_ln22_fu_300_p2 and or_ln20_fu_235_p2);
    and_ln25_1_fu_330_p2 <= (grp_fu_169_p2 and and_ln25_fu_324_p2);
    and_ln25_fu_324_p2 <= (or_ln22_fu_300_p2 and or_ln20_1_fu_253_p2);
    and_ln40_1_fu_426_p2 <= (grp_fu_173_p2 and and_ln40_fu_420_p2);
    and_ln40_fu_420_p2 <= (or_ln40_fu_396_p2 and or_ln40_1_fu_414_p2);
    and_ln42_1_fu_473_p2 <= (grp_fu_177_p2 and and_ln42_fu_467_p2);
    and_ln42_fu_467_p2 <= (or_ln42_fu_461_p2 and or_ln40_fu_396_p2);
    and_ln45_1_fu_491_p2 <= (grp_fu_181_p2 and and_ln45_fu_485_p2);
    and_ln45_fu_485_p2 <= (or_ln42_fu_461_p2 and or_ln40_1_fu_414_p2);
    and_ln70_fu_577_p2 <= (or_ln70_fu_569_p2 and or_ln70_1_fu_573_p2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_return <= (grp_fu_185_p2 and and_ln70_fu_577_p2);
    bitcast_ln20_1_fu_206_p1 <= max_5_reg_696_pp0_iter14_reg;
    bitcast_ln20_fu_189_p1 <= max_2_reg_688_pp0_iter14_reg;
    bitcast_ln22_fu_271_p1 <= max_3_reg_704_pp0_iter14_reg;
    bitcast_ln40_1_fu_367_p1 <= min_3_reg_727_pp0_iter18_reg;
    bitcast_ln40_fu_350_p1 <= min_reg_719_pp0_iter18_reg;
    bitcast_ln42_fu_432_p1 <= min_1_reg_735_pp0_iter18_reg;
    bitcast_ln70_1_fu_528_p1 <= min_7_reg_744;
    bitcast_ln70_fu_511_p1 <= max_reg_713_pp0_iter19_reg;
    icmp_ln20_1_fu_229_p2 <= "1" when (trunc_ln20_fu_202_p1 = ap_const_lv23_0) else "0";
    icmp_ln20_2_fu_241_p2 <= "0" when (tmp_s_fu_209_p4 = ap_const_lv8_FF) else "1";
    icmp_ln20_3_fu_247_p2 <= "1" when (trunc_ln20_1_fu_219_p1 = ap_const_lv23_0) else "0";
    icmp_ln20_fu_223_p2 <= "0" when (tmp_9_fu_192_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_1_fu_294_p2 <= "1" when (trunc_ln22_fu_284_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_fu_288_p2 <= "0" when (tmp_6_fu_274_p4 = ap_const_lv8_FF) else "1";
    icmp_ln40_1_fu_390_p2 <= "1" when (trunc_ln40_fu_363_p1 = ap_const_lv23_0) else "0";
    icmp_ln40_2_fu_402_p2 <= "0" when (tmp_1_fu_370_p4 = ap_const_lv8_FF) else "1";
    icmp_ln40_3_fu_408_p2 <= "1" when (trunc_ln40_1_fu_380_p1 = ap_const_lv23_0) else "0";
    icmp_ln40_fu_384_p2 <= "0" when (tmp_fu_353_p4 = ap_const_lv8_FF) else "1";
    icmp_ln42_1_fu_455_p2 <= "1" when (trunc_ln42_fu_445_p1 = ap_const_lv23_0) else "0";
    icmp_ln42_fu_449_p2 <= "0" when (tmp_3_fu_435_p4 = ap_const_lv8_FF) else "1";
    icmp_ln70_1_fu_551_p2 <= "1" when (trunc_ln70_fu_524_p1 = ap_const_lv23_0) else "0";
    icmp_ln70_2_fu_557_p2 <= "0" when (tmp_12_fu_531_p4 = ap_const_lv8_FF) else "1";
    icmp_ln70_3_fu_563_p2 <= "1" when (trunc_ln70_1_fu_541_p1 = ap_const_lv23_0) else "0";
    icmp_ln70_fu_545_p2 <= "0" when (tmp_11_fu_514_p4 = ap_const_lv8_FF) else "1";
    max_4_fu_318_p3 <= 
        max_3_reg_704_pp0_iter14_reg when (and_ln22_1_fu_312_p2(0) = '1') else 
        max_2_reg_688_pp0_iter14_reg;
    max_6_fu_336_p3 <= 
        max_3_reg_704_pp0_iter14_reg when (and_ln25_1_fu_330_p2(0) = '1') else 
        max_5_reg_696_pp0_iter14_reg;
    max_fu_342_p3 <= 
        max_4_fu_318_p3 when (and_ln20_1_fu_265_p2(0) = '1') else 
        max_6_fu_336_p3;
    min_2_fu_479_p3 <= 
        min_1_reg_735_pp0_iter18_reg when (and_ln42_1_fu_473_p2(0) = '1') else 
        min_reg_719_pp0_iter18_reg;
    min_4_fu_497_p3 <= 
        min_1_reg_735_pp0_iter18_reg when (and_ln45_1_fu_491_p2(0) = '1') else 
        min_3_reg_727_pp0_iter18_reg;
    min_7_fu_503_p3 <= 
        min_2_fu_479_p3 when (and_ln40_1_fu_426_p2(0) = '1') else 
        min_4_fu_497_p3;
    or_ln20_1_fu_253_p2 <= (icmp_ln20_3_fu_247_p2 or icmp_ln20_2_fu_241_p2);
    or_ln20_fu_235_p2 <= (icmp_ln20_fu_223_p2 or icmp_ln20_1_fu_229_p2);
    or_ln22_fu_300_p2 <= (icmp_ln22_fu_288_p2 or icmp_ln22_1_fu_294_p2);
    or_ln40_1_fu_414_p2 <= (icmp_ln40_3_fu_408_p2 or icmp_ln40_2_fu_402_p2);
    or_ln40_fu_396_p2 <= (icmp_ln40_fu_384_p2 or icmp_ln40_1_fu_390_p2);
    or_ln42_fu_461_p2 <= (icmp_ln42_fu_449_p2 or icmp_ln42_1_fu_455_p2);
    or_ln70_1_fu_573_p2 <= (icmp_ln70_3_reg_765 or icmp_ln70_2_reg_760);
    or_ln70_fu_569_p2 <= (icmp_ln70_reg_750 or icmp_ln70_1_reg_755);
    tmp_11_fu_514_p4 <= bitcast_ln70_fu_511_p1(30 downto 23);
    tmp_12_fu_531_p4 <= bitcast_ln70_1_fu_528_p1(30 downto 23);
    tmp_1_fu_370_p4 <= bitcast_ln40_1_fu_367_p1(30 downto 23);
    tmp_3_fu_435_p4 <= bitcast_ln42_fu_432_p1(30 downto 23);
    tmp_6_fu_274_p4 <= bitcast_ln22_fu_271_p1(30 downto 23);
    tmp_9_fu_192_p4 <= bitcast_ln20_fu_189_p1(30 downto 23);
    tmp_fu_353_p4 <= bitcast_ln40_fu_350_p1(30 downto 23);
    tmp_s_fu_209_p4 <= bitcast_ln20_1_fu_206_p1(30 downto 23);
    trunc_ln20_1_fu_219_p1 <= bitcast_ln20_1_fu_206_p1(23 - 1 downto 0);
    trunc_ln20_fu_202_p1 <= bitcast_ln20_fu_189_p1(23 - 1 downto 0);
    trunc_ln22_fu_284_p1 <= bitcast_ln22_fu_271_p1(23 - 1 downto 0);
    trunc_ln40_1_fu_380_p1 <= bitcast_ln40_1_fu_367_p1(23 - 1 downto 0);
    trunc_ln40_fu_363_p1 <= bitcast_ln40_fu_350_p1(23 - 1 downto 0);
    trunc_ln42_fu_445_p1 <= bitcast_ln42_fu_432_p1(23 - 1 downto 0);
    trunc_ln70_1_fu_541_p1 <= bitcast_ln70_1_fu_528_p1(23 - 1 downto 0);
    trunc_ln70_fu_524_p1 <= bitcast_ln70_fu_511_p1(23 - 1 downto 0);
end behav;
