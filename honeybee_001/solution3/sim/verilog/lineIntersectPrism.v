// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lineIntersectPrism (
        ap_clk,
        ap_rst,
        obs_x,
        obs_y,
        obs_z,
        edge_p1_x,
        edge_p1_y,
        edge_p1_z,
        edge_p2_x,
        edge_p2_y,
        edge_p2_z,
        ap_return
);


input   ap_clk;
input   ap_rst;
input  [31:0] obs_x;
input  [31:0] obs_y;
input  [31:0] obs_z;
input  [31:0] edge_p1_x;
input  [31:0] edge_p1_y;
input  [31:0] edge_p1_z;
input  [31:0] edge_p2_x;
input  [31:0] edge_p2_y;
input  [31:0] edge_p2_z;
output  [0:0] ap_return;

wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] grp_fu_86_p2;
reg   [31:0] tmp_i_reg_637;
wire   [31:0] grp_fu_92_p2;
reg   [31:0] tmp_1_i_reg_643;
reg   [31:0] tmp_1_i_reg_643_pp0_iter4_reg;
reg   [31:0] tmp_1_i_reg_643_pp0_iter5_reg;
reg   [31:0] tmp_1_i_reg_643_pp0_iter6_reg;
reg   [31:0] tmp_1_i_reg_643_pp0_iter7_reg;
wire   [31:0] grp_fu_98_p2;
reg   [31:0] tmp_i1_reg_649;
wire   [31:0] grp_fu_104_p2;
reg   [31:0] tmp_1_i3_reg_655;
reg   [31:0] tmp_1_i3_reg_655_pp0_iter4_reg;
reg   [31:0] tmp_1_i3_reg_655_pp0_iter5_reg;
reg   [31:0] tmp_1_i3_reg_655_pp0_iter6_reg;
reg   [31:0] tmp_1_i3_reg_655_pp0_iter7_reg;
wire   [31:0] grp_fu_110_p2;
reg   [31:0] tmp_i5_reg_661;
wire   [31:0] grp_fu_116_p2;
reg   [31:0] tmp_1_i7_reg_667;
reg   [31:0] tmp_1_i7_reg_667_pp0_iter4_reg;
reg   [31:0] tmp_1_i7_reg_667_pp0_iter5_reg;
reg   [31:0] tmp_1_i7_reg_667_pp0_iter6_reg;
reg   [31:0] tmp_1_i7_reg_667_pp0_iter7_reg;
wire   [31:0] grp_fu_122_p2;
reg   [31:0] tmp_i_4_reg_673;
wire   [31:0] grp_fu_127_p2;
reg   [31:0] tmp_i2_reg_678;
wire   [31:0] grp_fu_132_p2;
reg   [31:0] tmp_i6_reg_683;
wire   [31:0] grp_fu_137_p2;
reg   [31:0] max_2_reg_688;
reg   [31:0] max_2_reg_688_pp0_iter14_reg;
wire   [31:0] grp_fu_141_p2;
reg   [31:0] max_5_reg_696;
reg   [31:0] max_5_reg_696_pp0_iter14_reg;
wire   [31:0] grp_fu_145_p2;
reg   [31:0] max_3_reg_704;
reg   [31:0] max_3_reg_704_pp0_iter14_reg;
wire   [31:0] max_fu_342_p3;
reg   [31:0] max_reg_713;
reg   [31:0] max_reg_713_pp0_iter16_reg;
reg   [31:0] max_reg_713_pp0_iter17_reg;
reg   [31:0] max_reg_713_pp0_iter18_reg;
reg   [31:0] max_reg_713_pp0_iter19_reg;
wire   [31:0] grp_fu_149_p2;
reg   [31:0] min_reg_719;
reg   [31:0] min_reg_719_pp0_iter18_reg;
wire   [31:0] grp_fu_153_p2;
reg   [31:0] min_3_reg_727;
reg   [31:0] min_3_reg_727_pp0_iter18_reg;
wire   [31:0] grp_fu_157_p2;
reg   [31:0] min_1_reg_735;
reg   [31:0] min_1_reg_735_pp0_iter18_reg;
wire   [31:0] min_7_fu_503_p3;
reg   [31:0] min_7_reg_744;
wire   [0:0] icmp_ln70_fu_545_p2;
reg   [0:0] icmp_ln70_reg_750;
wire   [0:0] icmp_ln70_1_fu_551_p2;
reg   [0:0] icmp_ln70_1_reg_755;
wire   [0:0] icmp_ln70_2_fu_557_p2;
reg   [0:0] icmp_ln70_2_reg_760;
wire   [0:0] icmp_ln70_3_fu_563_p2;
reg   [0:0] icmp_ln70_3_reg_765;
wire    ap_block_pp0_stage0;
wire   [31:0] bitcast_ln20_fu_189_p1;
wire   [31:0] bitcast_ln20_1_fu_206_p1;
wire   [7:0] tmp_9_fu_192_p4;
wire   [22:0] trunc_ln20_fu_202_p1;
wire   [0:0] icmp_ln20_1_fu_229_p2;
wire   [0:0] icmp_ln20_fu_223_p2;
wire   [7:0] tmp_s_fu_209_p4;
wire   [22:0] trunc_ln20_1_fu_219_p1;
wire   [0:0] icmp_ln20_3_fu_247_p2;
wire   [0:0] icmp_ln20_2_fu_241_p2;
wire   [0:0] or_ln20_fu_235_p2;
wire   [0:0] or_ln20_1_fu_253_p2;
wire   [0:0] and_ln20_fu_259_p2;
wire   [0:0] grp_fu_161_p2;
wire   [31:0] bitcast_ln22_fu_271_p1;
wire   [7:0] tmp_6_fu_274_p4;
wire   [22:0] trunc_ln22_fu_284_p1;
wire   [0:0] icmp_ln22_1_fu_294_p2;
wire   [0:0] icmp_ln22_fu_288_p2;
wire   [0:0] or_ln22_fu_300_p2;
wire   [0:0] and_ln22_fu_306_p2;
wire   [0:0] grp_fu_165_p2;
wire   [0:0] and_ln22_1_fu_312_p2;
wire   [0:0] and_ln25_fu_324_p2;
wire   [0:0] grp_fu_169_p2;
wire   [0:0] and_ln25_1_fu_330_p2;
wire   [0:0] and_ln20_1_fu_265_p2;
wire   [31:0] max_4_fu_318_p3;
wire   [31:0] max_6_fu_336_p3;
wire   [31:0] bitcast_ln40_fu_350_p1;
wire   [31:0] bitcast_ln40_1_fu_367_p1;
wire   [7:0] tmp_fu_353_p4;
wire   [22:0] trunc_ln40_fu_363_p1;
wire   [0:0] icmp_ln40_1_fu_390_p2;
wire   [0:0] icmp_ln40_fu_384_p2;
wire   [7:0] tmp_1_fu_370_p4;
wire   [22:0] trunc_ln40_1_fu_380_p1;
wire   [0:0] icmp_ln40_3_fu_408_p2;
wire   [0:0] icmp_ln40_2_fu_402_p2;
wire   [0:0] or_ln40_fu_396_p2;
wire   [0:0] or_ln40_1_fu_414_p2;
wire   [0:0] and_ln40_fu_420_p2;
wire   [0:0] grp_fu_173_p2;
wire   [31:0] bitcast_ln42_fu_432_p1;
wire   [7:0] tmp_3_fu_435_p4;
wire   [22:0] trunc_ln42_fu_445_p1;
wire   [0:0] icmp_ln42_1_fu_455_p2;
wire   [0:0] icmp_ln42_fu_449_p2;
wire   [0:0] or_ln42_fu_461_p2;
wire   [0:0] and_ln42_fu_467_p2;
wire   [0:0] grp_fu_177_p2;
wire   [0:0] and_ln42_1_fu_473_p2;
wire   [0:0] and_ln45_fu_485_p2;
wire   [0:0] grp_fu_181_p2;
wire   [0:0] and_ln45_1_fu_491_p2;
wire   [0:0] and_ln40_1_fu_426_p2;
wire   [31:0] min_2_fu_479_p3;
wire   [31:0] min_4_fu_497_p3;
wire   [31:0] bitcast_ln70_fu_511_p1;
wire   [31:0] bitcast_ln70_1_fu_528_p1;
wire   [7:0] tmp_11_fu_514_p4;
wire   [22:0] trunc_ln70_fu_524_p1;
wire   [7:0] tmp_12_fu_531_p4;
wire   [22:0] trunc_ln70_1_fu_541_p1;
wire   [0:0] or_ln70_fu_569_p2;
wire   [0:0] or_ln70_1_fu_573_p2;
wire   [0:0] and_ln70_fu_577_p2;
wire   [0:0] grp_fu_185_p2;
wire    ap_block_pp0_stage0_00001;
reg   [31:0] obs_x_int_reg;
reg   [31:0] obs_y_int_reg;
reg   [31:0] obs_z_int_reg;
reg   [31:0] edge_p1_x_int_reg;
reg   [31:0] edge_p1_y_int_reg;
reg   [31:0] edge_p1_z_int_reg;
reg   [31:0] edge_p2_x_int_reg;
reg   [31:0] edge_p2_y_int_reg;
reg   [31:0] edge_p2_z_int_reg;

honeybee_fsub_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(obs_x_int_reg),
    .din1(edge_p1_x_int_reg),
    .ce(1'b1),
    .dout(grp_fu_86_p2)
);

honeybee_fsub_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32nbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(edge_p2_x_int_reg),
    .din1(edge_p1_x_int_reg),
    .ce(1'b1),
    .dout(grp_fu_92_p2)
);

honeybee_fsub_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32nbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(obs_y_int_reg),
    .din1(edge_p1_y_int_reg),
    .ce(1'b1),
    .dout(grp_fu_98_p2)
);

honeybee_fsub_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32nbkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(edge_p2_y_int_reg),
    .din1(edge_p1_y_int_reg),
    .ce(1'b1),
    .dout(grp_fu_104_p2)
);

honeybee_fsub_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32nbkb_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(obs_z_int_reg),
    .din1(edge_p1_z_int_reg),
    .ce(1'b1),
    .dout(grp_fu_110_p2)
);

honeybee_fsub_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32nbkb_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(edge_p2_z_int_reg),
    .din1(edge_p1_z_int_reg),
    .ce(1'b1),
    .dout(grp_fu_116_p2)
);

honeybee_fadd_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fadd_32ncud_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_reg_637),
    .din1(32'd1065353216),
    .ce(1'b1),
    .dout(grp_fu_122_p2)
);

honeybee_fadd_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fadd_32ncud_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i1_reg_649),
    .din1(32'd1065353216),
    .ce(1'b1),
    .dout(grp_fu_127_p2)
);

honeybee_fadd_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fadd_32ncud_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i5_reg_661),
    .din1(32'd1065353216),
    .ce(1'b1),
    .dout(grp_fu_132_p2)
);

honeybee_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32ndEe_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_reg_637),
    .din1(tmp_1_i_reg_643),
    .ce(1'b1),
    .dout(grp_fu_137_p2)
);

honeybee_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32ndEe_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i1_reg_649),
    .din1(tmp_1_i3_reg_655),
    .ce(1'b1),
    .dout(grp_fu_141_p2)
);

honeybee_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32ndEe_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i5_reg_661),
    .din1(tmp_1_i7_reg_667),
    .ce(1'b1),
    .dout(grp_fu_145_p2)
);

honeybee_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32ndEe_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_4_reg_673),
    .din1(tmp_1_i_reg_643_pp0_iter7_reg),
    .ce(1'b1),
    .dout(grp_fu_149_p2)
);

honeybee_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32ndEe_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i2_reg_678),
    .din1(tmp_1_i3_reg_655_pp0_iter7_reg),
    .ce(1'b1),
    .dout(grp_fu_153_p2)
);

honeybee_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32ndEe_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i6_reg_683),
    .din1(tmp_1_i7_reg_667_pp0_iter7_reg),
    .ce(1'b1),
    .dout(grp_fu_157_p2)
);

honeybee_fcmp_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32neOg_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(max_2_reg_688),
    .din1(max_5_reg_696),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_161_p2)
);

honeybee_fcmp_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32neOg_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(max_3_reg_704),
    .din1(max_2_reg_688),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_165_p2)
);

honeybee_fcmp_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32neOg_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(max_3_reg_704),
    .din1(max_5_reg_696),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_169_p2)
);

honeybee_fcmp_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32neOg_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(min_reg_719),
    .din1(min_3_reg_727),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_173_p2)
);

honeybee_fcmp_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32neOg_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(min_1_reg_735),
    .din1(min_reg_719),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_177_p2)
);

honeybee_fcmp_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32neOg_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(min_1_reg_735),
    .din1(min_3_reg_727),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_181_p2)
);

honeybee_fcmp_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32neOg_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(max_reg_713_pp0_iter19_reg),
    .din1(min_7_reg_744),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_185_p2)
);

always @ (posedge ap_clk) begin
    edge_p1_x_int_reg <= edge_p1_x;
end

always @ (posedge ap_clk) begin
    edge_p1_y_int_reg <= edge_p1_y;
end

always @ (posedge ap_clk) begin
    edge_p1_z_int_reg <= edge_p1_z;
end

always @ (posedge ap_clk) begin
    edge_p2_x_int_reg <= edge_p2_x;
end

always @ (posedge ap_clk) begin
    edge_p2_y_int_reg <= edge_p2_y;
end

always @ (posedge ap_clk) begin
    edge_p2_z_int_reg <= edge_p2_z;
end

always @ (posedge ap_clk) begin
    obs_x_int_reg <= obs_x;
end

always @ (posedge ap_clk) begin
    obs_y_int_reg <= obs_y;
end

always @ (posedge ap_clk) begin
    obs_z_int_reg <= obs_z;
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln70_1_reg_755 <= icmp_ln70_1_fu_551_p2;
        icmp_ln70_2_reg_760 <= icmp_ln70_2_fu_557_p2;
        icmp_ln70_3_reg_765 <= icmp_ln70_3_fu_563_p2;
        icmp_ln70_reg_750 <= icmp_ln70_fu_545_p2;
        max_2_reg_688 <= grp_fu_137_p2;
        max_2_reg_688_pp0_iter14_reg <= max_2_reg_688;
        max_3_reg_704 <= grp_fu_145_p2;
        max_3_reg_704_pp0_iter14_reg <= max_3_reg_704;
        max_5_reg_696 <= grp_fu_141_p2;
        max_5_reg_696_pp0_iter14_reg <= max_5_reg_696;
        max_reg_713 <= max_fu_342_p3;
        max_reg_713_pp0_iter16_reg <= max_reg_713;
        max_reg_713_pp0_iter17_reg <= max_reg_713_pp0_iter16_reg;
        max_reg_713_pp0_iter18_reg <= max_reg_713_pp0_iter17_reg;
        max_reg_713_pp0_iter19_reg <= max_reg_713_pp0_iter18_reg;
        min_1_reg_735 <= grp_fu_157_p2;
        min_1_reg_735_pp0_iter18_reg <= min_1_reg_735;
        min_3_reg_727 <= grp_fu_153_p2;
        min_3_reg_727_pp0_iter18_reg <= min_3_reg_727;
        min_7_reg_744 <= min_7_fu_503_p3;
        min_reg_719 <= grp_fu_149_p2;
        min_reg_719_pp0_iter18_reg <= min_reg_719;
        tmp_1_i3_reg_655 <= grp_fu_104_p2;
        tmp_1_i3_reg_655_pp0_iter4_reg <= tmp_1_i3_reg_655;
        tmp_1_i3_reg_655_pp0_iter5_reg <= tmp_1_i3_reg_655_pp0_iter4_reg;
        tmp_1_i3_reg_655_pp0_iter6_reg <= tmp_1_i3_reg_655_pp0_iter5_reg;
        tmp_1_i3_reg_655_pp0_iter7_reg <= tmp_1_i3_reg_655_pp0_iter6_reg;
        tmp_1_i7_reg_667 <= grp_fu_116_p2;
        tmp_1_i7_reg_667_pp0_iter4_reg <= tmp_1_i7_reg_667;
        tmp_1_i7_reg_667_pp0_iter5_reg <= tmp_1_i7_reg_667_pp0_iter4_reg;
        tmp_1_i7_reg_667_pp0_iter6_reg <= tmp_1_i7_reg_667_pp0_iter5_reg;
        tmp_1_i7_reg_667_pp0_iter7_reg <= tmp_1_i7_reg_667_pp0_iter6_reg;
        tmp_1_i_reg_643 <= grp_fu_92_p2;
        tmp_1_i_reg_643_pp0_iter4_reg <= tmp_1_i_reg_643;
        tmp_1_i_reg_643_pp0_iter5_reg <= tmp_1_i_reg_643_pp0_iter4_reg;
        tmp_1_i_reg_643_pp0_iter6_reg <= tmp_1_i_reg_643_pp0_iter5_reg;
        tmp_1_i_reg_643_pp0_iter7_reg <= tmp_1_i_reg_643_pp0_iter6_reg;
        tmp_i1_reg_649 <= grp_fu_98_p2;
        tmp_i2_reg_678 <= grp_fu_127_p2;
        tmp_i5_reg_661 <= grp_fu_110_p2;
        tmp_i6_reg_683 <= grp_fu_132_p2;
        tmp_i_4_reg_673 <= grp_fu_122_p2;
        tmp_i_reg_637 <= grp_fu_86_p2;
    end
end

assign and_ln20_1_fu_265_p2 = (grp_fu_161_p2 & and_ln20_fu_259_p2);

assign and_ln20_fu_259_p2 = (or_ln20_fu_235_p2 & or_ln20_1_fu_253_p2);

assign and_ln22_1_fu_312_p2 = (grp_fu_165_p2 & and_ln22_fu_306_p2);

assign and_ln22_fu_306_p2 = (or_ln22_fu_300_p2 & or_ln20_fu_235_p2);

assign and_ln25_1_fu_330_p2 = (grp_fu_169_p2 & and_ln25_fu_324_p2);

assign and_ln25_fu_324_p2 = (or_ln22_fu_300_p2 & or_ln20_1_fu_253_p2);

assign and_ln40_1_fu_426_p2 = (grp_fu_173_p2 & and_ln40_fu_420_p2);

assign and_ln40_fu_420_p2 = (or_ln40_fu_396_p2 & or_ln40_1_fu_414_p2);

assign and_ln42_1_fu_473_p2 = (grp_fu_177_p2 & and_ln42_fu_467_p2);

assign and_ln42_fu_467_p2 = (or_ln42_fu_461_p2 & or_ln40_fu_396_p2);

assign and_ln45_1_fu_491_p2 = (grp_fu_181_p2 & and_ln45_fu_485_p2);

assign and_ln45_fu_485_p2 = (or_ln42_fu_461_p2 & or_ln40_1_fu_414_p2);

assign and_ln70_fu_577_p2 = (or_ln70_fu_569_p2 & or_ln70_1_fu_573_p2);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_return = (grp_fu_185_p2 & and_ln70_fu_577_p2);

assign bitcast_ln20_1_fu_206_p1 = max_5_reg_696_pp0_iter14_reg;

assign bitcast_ln20_fu_189_p1 = max_2_reg_688_pp0_iter14_reg;

assign bitcast_ln22_fu_271_p1 = max_3_reg_704_pp0_iter14_reg;

assign bitcast_ln40_1_fu_367_p1 = min_3_reg_727_pp0_iter18_reg;

assign bitcast_ln40_fu_350_p1 = min_reg_719_pp0_iter18_reg;

assign bitcast_ln42_fu_432_p1 = min_1_reg_735_pp0_iter18_reg;

assign bitcast_ln70_1_fu_528_p1 = min_7_reg_744;

assign bitcast_ln70_fu_511_p1 = max_reg_713_pp0_iter19_reg;

assign icmp_ln20_1_fu_229_p2 = ((trunc_ln20_fu_202_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_2_fu_241_p2 = ((tmp_s_fu_209_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln20_3_fu_247_p2 = ((trunc_ln20_1_fu_219_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_223_p2 = ((tmp_9_fu_192_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_1_fu_294_p2 = ((trunc_ln22_fu_284_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_288_p2 = ((tmp_6_fu_274_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln40_1_fu_390_p2 = ((trunc_ln40_fu_363_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_2_fu_402_p2 = ((tmp_1_fu_370_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln40_3_fu_408_p2 = ((trunc_ln40_1_fu_380_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_384_p2 = ((tmp_fu_353_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln42_1_fu_455_p2 = ((trunc_ln42_fu_445_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_449_p2 = ((tmp_3_fu_435_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln70_1_fu_551_p2 = ((trunc_ln70_fu_524_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln70_2_fu_557_p2 = ((tmp_12_fu_531_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln70_3_fu_563_p2 = ((trunc_ln70_1_fu_541_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_545_p2 = ((tmp_11_fu_514_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_4_fu_318_p3 = ((and_ln22_1_fu_312_p2[0:0] === 1'b1) ? max_3_reg_704_pp0_iter14_reg : max_2_reg_688_pp0_iter14_reg);

assign max_6_fu_336_p3 = ((and_ln25_1_fu_330_p2[0:0] === 1'b1) ? max_3_reg_704_pp0_iter14_reg : max_5_reg_696_pp0_iter14_reg);

assign max_fu_342_p3 = ((and_ln20_1_fu_265_p2[0:0] === 1'b1) ? max_4_fu_318_p3 : max_6_fu_336_p3);

assign min_2_fu_479_p3 = ((and_ln42_1_fu_473_p2[0:0] === 1'b1) ? min_1_reg_735_pp0_iter18_reg : min_reg_719_pp0_iter18_reg);

assign min_4_fu_497_p3 = ((and_ln45_1_fu_491_p2[0:0] === 1'b1) ? min_1_reg_735_pp0_iter18_reg : min_3_reg_727_pp0_iter18_reg);

assign min_7_fu_503_p3 = ((and_ln40_1_fu_426_p2[0:0] === 1'b1) ? min_2_fu_479_p3 : min_4_fu_497_p3);

assign or_ln20_1_fu_253_p2 = (icmp_ln20_3_fu_247_p2 | icmp_ln20_2_fu_241_p2);

assign or_ln20_fu_235_p2 = (icmp_ln20_fu_223_p2 | icmp_ln20_1_fu_229_p2);

assign or_ln22_fu_300_p2 = (icmp_ln22_fu_288_p2 | icmp_ln22_1_fu_294_p2);

assign or_ln40_1_fu_414_p2 = (icmp_ln40_3_fu_408_p2 | icmp_ln40_2_fu_402_p2);

assign or_ln40_fu_396_p2 = (icmp_ln40_fu_384_p2 | icmp_ln40_1_fu_390_p2);

assign or_ln42_fu_461_p2 = (icmp_ln42_fu_449_p2 | icmp_ln42_1_fu_455_p2);

assign or_ln70_1_fu_573_p2 = (icmp_ln70_3_reg_765 | icmp_ln70_2_reg_760);

assign or_ln70_fu_569_p2 = (icmp_ln70_reg_750 | icmp_ln70_1_reg_755);

assign tmp_11_fu_514_p4 = {{bitcast_ln70_fu_511_p1[30:23]}};

assign tmp_12_fu_531_p4 = {{bitcast_ln70_1_fu_528_p1[30:23]}};

assign tmp_1_fu_370_p4 = {{bitcast_ln40_1_fu_367_p1[30:23]}};

assign tmp_3_fu_435_p4 = {{bitcast_ln42_fu_432_p1[30:23]}};

assign tmp_6_fu_274_p4 = {{bitcast_ln22_fu_271_p1[30:23]}};

assign tmp_9_fu_192_p4 = {{bitcast_ln20_fu_189_p1[30:23]}};

assign tmp_fu_353_p4 = {{bitcast_ln40_fu_350_p1[30:23]}};

assign tmp_s_fu_209_p4 = {{bitcast_ln20_1_fu_206_p1[30:23]}};

assign trunc_ln20_1_fu_219_p1 = bitcast_ln20_1_fu_206_p1[22:0];

assign trunc_ln20_fu_202_p1 = bitcast_ln20_fu_189_p1[22:0];

assign trunc_ln22_fu_284_p1 = bitcast_ln22_fu_271_p1[22:0];

assign trunc_ln40_1_fu_380_p1 = bitcast_ln40_1_fu_367_p1[22:0];

assign trunc_ln40_fu_363_p1 = bitcast_ln40_fu_350_p1[22:0];

assign trunc_ln42_fu_445_p1 = bitcast_ln42_fu_432_p1[22:0];

assign trunc_ln70_1_fu_541_p1 = bitcast_ln70_1_fu_528_p1[22:0];

assign trunc_ln70_fu_524_p1 = bitcast_ln70_fu_511_p1[22:0];

endmodule //lineIntersectPrism
