// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="honeybee,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.218000,HLS_SYN_LAT=21,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=3393,HLS_SYN_LUT=4717,HLS_VERSION=2019_2}" *)

module honeybee (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        obs_x,
        obs_y,
        obs_z,
        edge_p1_x,
        edge_p1_y,
        edge_p1_z,
        edge_p2_x,
        edge_p2_y,
        edge_p2_z,
        ap_return
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_state7 = 22'd64;
parameter    ap_ST_fsm_state8 = 22'd128;
parameter    ap_ST_fsm_state9 = 22'd256;
parameter    ap_ST_fsm_state10 = 22'd512;
parameter    ap_ST_fsm_state11 = 22'd1024;
parameter    ap_ST_fsm_state12 = 22'd2048;
parameter    ap_ST_fsm_state13 = 22'd4096;
parameter    ap_ST_fsm_state14 = 22'd8192;
parameter    ap_ST_fsm_state15 = 22'd16384;
parameter    ap_ST_fsm_state16 = 22'd32768;
parameter    ap_ST_fsm_state17 = 22'd65536;
parameter    ap_ST_fsm_state18 = 22'd131072;
parameter    ap_ST_fsm_state19 = 22'd262144;
parameter    ap_ST_fsm_state20 = 22'd524288;
parameter    ap_ST_fsm_state21 = 22'd1048576;
parameter    ap_ST_fsm_state22 = 22'd2097152;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] obs_x;
input  [31:0] obs_y;
input  [31:0] obs_z;
input  [31:0] edge_p1_x;
input  [31:0] edge_p1_y;
input  [31:0] edge_p1_z;
input  [31:0] edge_p2_x;
input  [31:0] edge_p2_y;
input  [31:0] edge_p2_z;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_133_p2;
reg   [31:0] reg_157;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_137_p2;
reg   [31:0] reg_163;
wire   [31:0] grp_fu_141_p2;
reg   [31:0] reg_169;
wire   [31:0] grp_fu_94_p2;
reg   [31:0] tmp_i_reg_637;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_100_p2;
reg   [31:0] tmp_6_i_reg_643;
wire   [31:0] grp_fu_106_p2;
reg   [31:0] tmp_i1_reg_648;
wire   [31:0] grp_fu_112_p2;
reg   [31:0] tmp_6_i3_reg_654;
wire   [31:0] grp_fu_118_p2;
reg   [31:0] tmp_i5_reg_659;
wire   [31:0] grp_fu_124_p2;
reg   [31:0] tmp_6_i7_reg_665;
reg   [31:0] tmp_5_i_reg_670;
wire    ap_CS_fsm_state8;
reg   [31:0] tmp_5_i2_reg_675;
reg   [31:0] tmp_5_i6_reg_680;
wire   [31:0] max_fu_335_p3;
reg   [31:0] max_reg_685;
wire    ap_CS_fsm_state16;
wire   [31:0] min_7_fu_503_p3;
reg   [31:0] min_7_reg_691;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln70_fu_545_p2;
reg   [0:0] icmp_ln70_reg_697;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln70_1_fu_551_p2;
reg   [0:0] icmp_ln70_1_reg_702;
wire   [0:0] icmp_ln70_2_fu_557_p2;
reg   [0:0] icmp_ln70_2_reg_707;
wire   [0:0] icmp_ln70_3_fu_563_p2;
reg   [0:0] icmp_ln70_3_reg_712;
reg   [31:0] grp_fu_94_p0;
reg   [31:0] grp_fu_94_p1;
wire    ap_CS_fsm_state5;
reg   [31:0] grp_fu_100_p0;
reg   [31:0] grp_fu_100_p1;
reg   [31:0] grp_fu_106_p0;
reg   [31:0] grp_fu_106_p1;
reg   [31:0] grp_fu_133_p0;
wire    ap_CS_fsm_state9;
reg   [31:0] grp_fu_137_p0;
reg   [31:0] grp_fu_141_p0;
reg   [31:0] grp_fu_145_p0;
reg   [31:0] grp_fu_145_p1;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state19;
wire   [31:0] bitcast_ln20_fu_175_p1;
wire   [31:0] bitcast_ln20_1_fu_193_p1;
wire   [7:0] tmp_9_fu_179_p4;
wire   [22:0] trunc_ln20_fu_189_p1;
wire   [0:0] icmp_ln20_1_fu_217_p2;
wire   [0:0] icmp_ln20_fu_211_p2;
wire   [7:0] tmp_s_fu_197_p4;
wire   [22:0] trunc_ln20_1_fu_207_p1;
wire   [0:0] icmp_ln20_3_fu_235_p2;
wire   [0:0] icmp_ln20_2_fu_229_p2;
wire   [0:0] or_ln20_fu_223_p2;
wire   [0:0] or_ln20_1_fu_241_p2;
wire   [0:0] and_ln20_fu_247_p2;
wire   [0:0] grp_fu_145_p2;
wire   [31:0] bitcast_ln22_fu_259_p1;
wire   [7:0] tmp_6_fu_263_p4;
wire   [22:0] trunc_ln22_fu_273_p1;
wire   [0:0] icmp_ln22_1_fu_283_p2;
wire   [0:0] icmp_ln22_fu_277_p2;
wire   [0:0] or_ln22_fu_289_p2;
wire   [0:0] and_ln22_fu_295_p2;
wire   [0:0] grp_fu_149_p2;
wire   [0:0] and_ln22_1_fu_301_p2;
wire   [0:0] and_ln25_fu_315_p2;
wire   [0:0] grp_fu_153_p2;
wire   [0:0] and_ln25_1_fu_321_p2;
wire   [0:0] and_ln20_1_fu_253_p2;
wire   [31:0] max_4_fu_307_p3;
wire   [31:0] max_6_fu_327_p3;
wire   [31:0] bitcast_ln40_fu_343_p1;
wire   [31:0] bitcast_ln40_1_fu_361_p1;
wire   [7:0] tmp_fu_347_p4;
wire   [22:0] trunc_ln40_fu_357_p1;
wire   [0:0] icmp_ln40_1_fu_385_p2;
wire   [0:0] icmp_ln40_fu_379_p2;
wire   [7:0] tmp_1_fu_365_p4;
wire   [22:0] trunc_ln40_1_fu_375_p1;
wire   [0:0] icmp_ln40_3_fu_403_p2;
wire   [0:0] icmp_ln40_2_fu_397_p2;
wire   [0:0] or_ln40_fu_391_p2;
wire   [0:0] or_ln40_1_fu_409_p2;
wire   [0:0] and_ln40_fu_415_p2;
wire   [31:0] bitcast_ln42_fu_427_p1;
wire   [7:0] tmp_3_fu_431_p4;
wire   [22:0] trunc_ln42_fu_441_p1;
wire   [0:0] icmp_ln42_1_fu_451_p2;
wire   [0:0] icmp_ln42_fu_445_p2;
wire   [0:0] or_ln42_fu_457_p2;
wire   [0:0] and_ln42_fu_463_p2;
wire   [0:0] and_ln42_1_fu_469_p2;
wire   [0:0] and_ln45_fu_483_p2;
wire   [0:0] and_ln45_1_fu_489_p2;
wire   [0:0] and_ln40_1_fu_421_p2;
wire   [31:0] min_2_fu_475_p3;
wire   [31:0] min_4_fu_495_p3;
wire   [31:0] bitcast_ln70_fu_511_p1;
wire   [31:0] bitcast_ln70_1_fu_528_p1;
wire   [7:0] tmp_11_fu_514_p4;
wire   [22:0] trunc_ln70_fu_524_p1;
wire   [7:0] tmp_12_fu_531_p4;
wire   [22:0] trunc_ln70_1_fu_541_p1;
wire    ap_CS_fsm_state22;
wire   [0:0] or_ln70_fu_569_p2;
wire   [0:0] or_ln70_1_fu_573_p2;
wire   [0:0] and_ln70_fu_577_p2;
reg   [1:0] grp_fu_94_opcode;
reg   [1:0] grp_fu_100_opcode;
reg   [1:0] grp_fu_106_opcode;
reg   [4:0] grp_fu_145_opcode;
reg   [4:0] grp_fu_149_opcode;
reg   [4:0] grp_fu_153_opcode;
reg   [21:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
end

honeybee_faddfsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_faddfsubbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_94_p0),
    .din1(grp_fu_94_p1),
    .opcode(grp_fu_94_opcode),
    .ce(1'b1),
    .dout(grp_fu_94_p2)
);

honeybee_faddfsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_faddfsubbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_100_p0),
    .din1(grp_fu_100_p1),
    .opcode(grp_fu_100_opcode),
    .ce(1'b1),
    .dout(grp_fu_100_p2)
);

honeybee_faddfsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_faddfsubbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_106_p0),
    .din1(grp_fu_106_p1),
    .opcode(grp_fu_106_opcode),
    .ce(1'b1),
    .dout(grp_fu_106_p2)
);

honeybee_fsub_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32ncud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(edge_p2_y),
    .din1(edge_p1_y),
    .ce(1'b1),
    .dout(grp_fu_112_p2)
);

honeybee_fsub_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32ncud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(obs_z),
    .din1(edge_p1_z),
    .ce(1'b1),
    .dout(grp_fu_118_p2)
);

honeybee_fsub_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32ncud_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(edge_p2_z),
    .din1(edge_p1_z),
    .ce(1'b1),
    .dout(grp_fu_124_p2)
);

honeybee_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32ndEe_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_133_p0),
    .din1(tmp_6_i_reg_643),
    .ce(1'b1),
    .dout(grp_fu_133_p2)
);

honeybee_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32ndEe_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_137_p0),
    .din1(tmp_6_i3_reg_654),
    .ce(1'b1),
    .dout(grp_fu_137_p2)
);

honeybee_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32ndEe_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_141_p0),
    .din1(tmp_6_i7_reg_665),
    .ce(1'b1),
    .dout(grp_fu_141_p2)
);

honeybee_fcmp_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32neOg_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_145_p0),
    .din1(grp_fu_145_p1),
    .ce(1'b1),
    .opcode(grp_fu_145_opcode),
    .dout(grp_fu_145_p2)
);

honeybee_fcmp_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32neOg_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_169),
    .din1(reg_157),
    .ce(1'b1),
    .opcode(grp_fu_149_opcode),
    .dout(grp_fu_149_p2)
);

honeybee_fcmp_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32neOg_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_169),
    .din1(reg_163),
    .ce(1'b1),
    .opcode(grp_fu_153_opcode),
    .dout(grp_fu_153_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        icmp_ln70_1_reg_702 <= icmp_ln70_1_fu_551_p2;
        icmp_ln70_2_reg_707 <= icmp_ln70_2_fu_557_p2;
        icmp_ln70_3_reg_712 <= icmp_ln70_3_fu_563_p2;
        icmp_ln70_reg_697 <= icmp_ln70_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        max_reg_685 <= max_fu_335_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        min_7_reg_691 <= min_7_fu_503_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_157 <= grp_fu_133_p2;
        reg_163 <= grp_fu_137_p2;
        reg_169 <= grp_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_5_i2_reg_675 <= grp_fu_100_p2;
        tmp_5_i6_reg_680 <= grp_fu_106_p2;
        tmp_5_i_reg_670 <= grp_fu_94_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_6_i3_reg_654 <= grp_fu_112_p2;
        tmp_6_i7_reg_665 <= grp_fu_124_p2;
        tmp_6_i_reg_643 <= grp_fu_100_p2;
        tmp_i1_reg_648 <= grp_fu_106_p2;
        tmp_i5_reg_659 <= grp_fu_118_p2;
        tmp_i_reg_637 <= grp_fu_94_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_100_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_100_opcode = 2'd0;
    end else begin
        grp_fu_100_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_100_p0 = tmp_i1_reg_648;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_100_p0 = edge_p2_x;
    end else begin
        grp_fu_100_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_100_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_100_p1 = edge_p1_x;
    end else begin
        grp_fu_100_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_106_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_106_opcode = 2'd0;
    end else begin
        grp_fu_106_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_106_p0 = tmp_i5_reg_659;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_106_p0 = obs_y;
    end else begin
        grp_fu_106_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_106_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_106_p1 = edge_p1_y;
    end else begin
        grp_fu_106_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_133_p0 = tmp_5_i_reg_670;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_133_p0 = tmp_i_reg_637;
    end else begin
        grp_fu_133_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_137_p0 = tmp_5_i2_reg_675;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_137_p0 = tmp_i1_reg_648;
    end else begin
        grp_fu_137_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_141_p0 = tmp_5_i6_reg_680;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_141_p0 = tmp_i5_reg_659;
    end else begin
        grp_fu_141_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_145_opcode = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_145_opcode = 5'd2;
    end else begin
        grp_fu_145_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_145_p0 = max_reg_685;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_145_p0 = reg_157;
    end else begin
        grp_fu_145_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_145_p1 = min_7_reg_691;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_145_p1 = reg_163;
    end else begin
        grp_fu_145_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_149_opcode = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_149_opcode = 5'd2;
    end else begin
        grp_fu_149_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_153_opcode = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_153_opcode = 5'd2;
    end else begin
        grp_fu_153_opcode = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_94_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_94_opcode = 2'd0;
    end else begin
        grp_fu_94_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_94_p0 = tmp_i_reg_637;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_94_p0 = obs_x;
    end else begin
        grp_fu_94_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_94_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_94_p1 = edge_p1_x;
    end else begin
        grp_fu_94_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln20_1_fu_253_p2 = (grp_fu_145_p2 & and_ln20_fu_247_p2);

assign and_ln20_fu_247_p2 = (or_ln20_fu_223_p2 & or_ln20_1_fu_241_p2);

assign and_ln22_1_fu_301_p2 = (grp_fu_149_p2 & and_ln22_fu_295_p2);

assign and_ln22_fu_295_p2 = (or_ln22_fu_289_p2 & or_ln20_fu_223_p2);

assign and_ln25_1_fu_321_p2 = (grp_fu_153_p2 & and_ln25_fu_315_p2);

assign and_ln25_fu_315_p2 = (or_ln22_fu_289_p2 & or_ln20_1_fu_241_p2);

assign and_ln40_1_fu_421_p2 = (grp_fu_145_p2 & and_ln40_fu_415_p2);

assign and_ln40_fu_415_p2 = (or_ln40_fu_391_p2 & or_ln40_1_fu_409_p2);

assign and_ln42_1_fu_469_p2 = (grp_fu_149_p2 & and_ln42_fu_463_p2);

assign and_ln42_fu_463_p2 = (or_ln42_fu_457_p2 & or_ln40_fu_391_p2);

assign and_ln45_1_fu_489_p2 = (grp_fu_153_p2 & and_ln45_fu_483_p2);

assign and_ln45_fu_483_p2 = (or_ln42_fu_457_p2 & or_ln40_1_fu_409_p2);

assign and_ln70_fu_577_p2 = (or_ln70_fu_569_p2 & or_ln70_1_fu_573_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = (grp_fu_145_p2 & and_ln70_fu_577_p2);

assign bitcast_ln20_1_fu_193_p1 = reg_163;

assign bitcast_ln20_fu_175_p1 = reg_157;

assign bitcast_ln22_fu_259_p1 = reg_169;

assign bitcast_ln40_1_fu_361_p1 = reg_163;

assign bitcast_ln40_fu_343_p1 = reg_157;

assign bitcast_ln42_fu_427_p1 = reg_169;

assign bitcast_ln70_1_fu_528_p1 = min_7_reg_691;

assign bitcast_ln70_fu_511_p1 = max_reg_685;

assign icmp_ln20_1_fu_217_p2 = ((trunc_ln20_fu_189_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_2_fu_229_p2 = ((tmp_s_fu_197_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln20_3_fu_235_p2 = ((trunc_ln20_1_fu_207_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_211_p2 = ((tmp_9_fu_179_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_1_fu_283_p2 = ((trunc_ln22_fu_273_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_277_p2 = ((tmp_6_fu_263_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln40_1_fu_385_p2 = ((trunc_ln40_fu_357_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_2_fu_397_p2 = ((tmp_1_fu_365_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln40_3_fu_403_p2 = ((trunc_ln40_1_fu_375_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_379_p2 = ((tmp_fu_347_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln42_1_fu_451_p2 = ((trunc_ln42_fu_441_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_445_p2 = ((tmp_3_fu_431_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln70_1_fu_551_p2 = ((trunc_ln70_fu_524_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln70_2_fu_557_p2 = ((tmp_12_fu_531_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln70_3_fu_563_p2 = ((trunc_ln70_1_fu_541_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_545_p2 = ((tmp_11_fu_514_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_4_fu_307_p3 = ((and_ln22_1_fu_301_p2[0:0] === 1'b1) ? reg_169 : reg_157);

assign max_6_fu_327_p3 = ((and_ln25_1_fu_321_p2[0:0] === 1'b1) ? reg_169 : reg_163);

assign max_fu_335_p3 = ((and_ln20_1_fu_253_p2[0:0] === 1'b1) ? max_4_fu_307_p3 : max_6_fu_327_p3);

assign min_2_fu_475_p3 = ((and_ln42_1_fu_469_p2[0:0] === 1'b1) ? reg_169 : reg_157);

assign min_4_fu_495_p3 = ((and_ln45_1_fu_489_p2[0:0] === 1'b1) ? reg_169 : reg_163);

assign min_7_fu_503_p3 = ((and_ln40_1_fu_421_p2[0:0] === 1'b1) ? min_2_fu_475_p3 : min_4_fu_495_p3);

assign or_ln20_1_fu_241_p2 = (icmp_ln20_3_fu_235_p2 | icmp_ln20_2_fu_229_p2);

assign or_ln20_fu_223_p2 = (icmp_ln20_fu_211_p2 | icmp_ln20_1_fu_217_p2);

assign or_ln22_fu_289_p2 = (icmp_ln22_fu_277_p2 | icmp_ln22_1_fu_283_p2);

assign or_ln40_1_fu_409_p2 = (icmp_ln40_3_fu_403_p2 | icmp_ln40_2_fu_397_p2);

assign or_ln40_fu_391_p2 = (icmp_ln40_fu_379_p2 | icmp_ln40_1_fu_385_p2);

assign or_ln42_fu_457_p2 = (icmp_ln42_fu_445_p2 | icmp_ln42_1_fu_451_p2);

assign or_ln70_1_fu_573_p2 = (icmp_ln70_3_reg_712 | icmp_ln70_2_reg_707);

assign or_ln70_fu_569_p2 = (icmp_ln70_reg_697 | icmp_ln70_1_reg_702);

assign tmp_11_fu_514_p4 = {{bitcast_ln70_fu_511_p1[30:23]}};

assign tmp_12_fu_531_p4 = {{bitcast_ln70_1_fu_528_p1[30:23]}};

assign tmp_1_fu_365_p4 = {{bitcast_ln40_1_fu_361_p1[30:23]}};

assign tmp_3_fu_431_p4 = {{bitcast_ln42_fu_427_p1[30:23]}};

assign tmp_6_fu_263_p4 = {{bitcast_ln22_fu_259_p1[30:23]}};

assign tmp_9_fu_179_p4 = {{bitcast_ln20_fu_175_p1[30:23]}};

assign tmp_fu_347_p4 = {{bitcast_ln40_fu_343_p1[30:23]}};

assign tmp_s_fu_197_p4 = {{bitcast_ln20_1_fu_193_p1[30:23]}};

assign trunc_ln20_1_fu_207_p1 = bitcast_ln20_1_fu_193_p1[22:0];

assign trunc_ln20_fu_189_p1 = bitcast_ln20_fu_175_p1[22:0];

assign trunc_ln22_fu_273_p1 = bitcast_ln22_fu_259_p1[22:0];

assign trunc_ln40_1_fu_375_p1 = bitcast_ln40_1_fu_361_p1[22:0];

assign trunc_ln40_fu_357_p1 = bitcast_ln40_fu_343_p1[22:0];

assign trunc_ln42_fu_441_p1 = bitcast_ln42_fu_427_p1[22:0];

assign trunc_ln70_1_fu_541_p1 = bitcast_ln70_1_fu_528_p1[22:0];

assign trunc_ln70_fu_524_p1 = bitcast_ln70_fu_511_p1[22:0];

endmodule //honeybee
