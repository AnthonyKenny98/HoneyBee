-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity honeybee is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of honeybee is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "honeybee,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.080920,HLS_SYN_LAT=15100,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=2511,HLS_SYN_LUT=3907,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (75 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (75 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (75 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (75 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (75 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (75 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (75 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (75 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (75 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (75 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_158_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal grp_fu_150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal tmp_1_i_i_reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i3_i_reg_710 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i7_i_reg_716 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln76_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_fu_210_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_729 : STD_LOGIC_VECTOR (3 downto 0);
    signal min_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_2_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln40_fu_216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln40_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln40_1_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_1_reg_753 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln20_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln20_reg_758 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln20_1_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_1_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln77_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal j_fu_255_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_776 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln40_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_reg_781 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_reg_787 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_3_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal max_5_reg_800 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln40_1_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_1_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal and_ln40_1_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_reg_813 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_1_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_1_reg_818 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_1_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_1_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln78_fu_393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal k_fu_404_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_836 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_fu_482_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_841 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal min_7_fu_561_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_7_reg_847 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal icmp_ln70_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_853 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal icmp_ln70_1_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_1_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_2_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_2_reg_863 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_3_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_3_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_98 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_109 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln78_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_0_reg_120 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal collisionCount_0_fu_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln80_fu_652_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln76_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_131_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_fu_150_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal grp_fu_154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_158_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_161_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_161_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal trunc_ln40_fu_220_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln20_fu_234_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_2_fu_261_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln40_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_281_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln20_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln40_1_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_304_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln40_1_fu_314_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln40_3_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_2_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln20_1_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_350_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln20_1_fu_360_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln20_3_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_2_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln22_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_414_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_fu_424_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln22_1_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_1_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_1_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_4_fu_457_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_6_fu_475_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln42_fu_489_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_493_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln42_fu_503_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln42_1_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_1_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln45_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln45_1_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_2_fu_536_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_4_fu_554_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln70_fu_568_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln70_1_fu_585_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_571_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln70_fu_581_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_14_fu_588_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln70_1_fu_598_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln70_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln70_1_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln70_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln70_1_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal collisionCount_fu_646_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_131_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_161_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (75 downto 0);

    component honeybee_faddfsubbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fsub_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fdiv_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_sitofp_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fcmp_32nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    honeybee_faddfsubbkb_U1 : component honeybee_faddfsubbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_131_p0,
        din1 => grp_fu_131_p1,
        opcode => grp_fu_131_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_131_p2);

    honeybee_fsub_32ncud_U2 : component honeybee_fsub_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => edge_p2_y,
        din1 => edge_p1_y,
        ce => ap_const_logic_1,
        dout => grp_fu_137_p2);

    honeybee_fsub_32ncud_U3 : component honeybee_fsub_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => edge_p2_z,
        din1 => edge_p1_z,
        ce => ap_const_logic_1,
        dout => grp_fu_143_p2);

    honeybee_fdiv_32ndEe_U4 : component honeybee_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_150_p0,
        din1 => grp_fu_150_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_150_p2);

    honeybee_fdiv_32ndEe_U5 : component honeybee_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_177,
        din1 => grp_fu_154_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_154_p2);

    honeybee_sitofp_3eOg_U6 : component honeybee_sitofp_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_158_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_158_p1);

    honeybee_fcmp_32nfYi_U7 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_161_p0,
        din1 => grp_fu_161_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_161_opcode,
        dout => grp_fu_161_p2);

    honeybee_fcmp_32nfYi_U8 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => max_2_reg_741,
        din1 => max_5_reg_800,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_165_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    collisionCount_0_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                collisionCount_0_fu_58 <= select_ln80_fu_652_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                collisionCount_0_fu_58 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                i_0_reg_98 <= i_reg_729;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_98 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_398_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                j_0_reg_109 <= j_reg_776;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                j_0_reg_109 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                k_0_reg_120 <= k_reg_836;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                k_0_reg_120 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                and_ln20_1_reg_823 <= and_ln20_1_fu_387_p2;
                and_ln40_1_reg_813 <= and_ln40_1_fu_341_p2;
                or_ln20_1_reg_818 <= or_ln20_1_fu_376_p2;
                or_ln40_1_reg_808 <= or_ln40_1_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                bitcast_ln20_reg_758 <= bitcast_ln20_fu_230_p1;
                bitcast_ln40_reg_748 <= bitcast_ln40_fu_216_p1;
                icmp_ln20_1_reg_763 <= icmp_ln20_1_fu_238_p2;
                icmp_ln40_1_reg_753 <= icmp_ln40_1_fu_224_p2;
                max_2_reg_741 <= grp_fu_154_p2;
                min_reg_734 <= grp_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_reg_729 <= i_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                icmp_ln70_1_reg_858 <= icmp_ln70_1_fu_608_p2;
                icmp_ln70_2_reg_863 <= icmp_ln70_2_fu_614_p2;
                icmp_ln70_3_reg_868 <= icmp_ln70_3_fu_620_p2;
                icmp_ln70_reg_853 <= icmp_ln70_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                j_reg_776 <= j_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                k_reg_836 <= k_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                max_5_reg_800 <= grp_fu_154_p2;
                min_3_reg_793 <= grp_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                max_reg_841 <= max_fu_482_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                min_7_reg_847 <= min_7_fu_561_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                or_ln20_reg_787 <= or_ln20_fu_296_p2;
                or_ln40_reg_781 <= or_ln40_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_172 <= grp_fu_158_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_177 <= grp_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_184 <= grp_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state68))) then
                reg_189 <= grp_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_1_i3_i_reg_710 <= grp_fu_137_p2;
                tmp_1_i7_i_reg_716 <= grp_fu_143_p2;
                tmp_1_i_i_reg_704 <= grp_fu_131_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state27, icmp_ln77_fu_249_p2, ap_CS_fsm_state51, icmp_ln78_fu_398_p2, icmp_ln76_fu_204_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln76_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((icmp_ln77_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((icmp_ln78_fu_398_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln20_1_fu_387_p2 <= (grp_fu_165_p2 and and_ln20_fu_382_p2);
    and_ln20_fu_382_p2 <= (or_ln20_reg_787 and or_ln20_1_fu_376_p2);
    and_ln22_1_fu_451_p2 <= (grp_fu_161_p2 and and_ln22_fu_446_p2);
    and_ln22_fu_446_p2 <= (or_ln22_fu_440_p2 and or_ln20_reg_787);
    and_ln25_1_fu_469_p2 <= (grp_fu_161_p2 and and_ln25_fu_464_p2);
    and_ln25_fu_464_p2 <= (or_ln22_fu_440_p2 and or_ln20_1_reg_818);
    and_ln40_1_fu_341_p2 <= (grp_fu_161_p2 and and_ln40_fu_336_p2);
    and_ln40_fu_336_p2 <= (or_ln40_reg_781 and or_ln40_1_fu_330_p2);
    and_ln42_1_fu_530_p2 <= (grp_fu_161_p2 and and_ln42_fu_525_p2);
    and_ln42_fu_525_p2 <= (or_ln42_fu_519_p2 and or_ln40_reg_781);
    and_ln45_1_fu_548_p2 <= (grp_fu_161_p2 and and_ln45_fu_543_p2);
    and_ln45_fu_543_p2 <= (or_ln42_fu_519_p2 and or_ln40_1_reg_808);
    and_ln70_1_fu_640_p2 <= (grp_fu_161_p2 and and_ln70_fu_634_p2);
    and_ln70_fu_634_p2 <= (or_ln70_fu_626_p2 and or_ln70_1_fu_630_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state5, icmp_ln76_fu_204_p2)
    begin
        if (((icmp_ln76_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln76_fu_204_p2)
    begin
        if (((icmp_ln76_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= collisionCount_0_fu_58;
    bitcast_ln20_1_fu_347_p1 <= max_5_reg_800;
    bitcast_ln20_fu_230_p1 <= grp_fu_154_p2;
    bitcast_ln22_fu_410_p1 <= reg_189;
    bitcast_ln40_1_fu_301_p1 <= min_3_reg_793;
    bitcast_ln40_fu_216_p1 <= grp_fu_150_p2;
    bitcast_ln42_fu_489_p1 <= reg_189;
    bitcast_ln70_1_fu_585_p1 <= min_7_reg_847;
    bitcast_ln70_fu_568_p1 <= max_reg_841;
    collisionCount_fu_646_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(collisionCount_0_fu_58));

    grp_fu_131_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state55, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_131_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_131_opcode <= ap_const_lv2_0;
        else 
            grp_fu_131_opcode <= "XX";
        end if; 
    end process;


    grp_fu_131_p0_assign_proc : process(ap_CS_fsm_state1, edge_p2_x, reg_172, reg_177, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state55, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_131_p0 <= reg_177;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_131_p0 <= reg_172;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_131_p0 <= edge_p2_x;
        else 
            grp_fu_131_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_131_p1_assign_proc : process(ap_CS_fsm_state1, edge_p1_x, edge_p1_y, edge_p1_z, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state55, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_131_p1 <= edge_p1_z;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_131_p1 <= edge_p1_y;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_131_p1 <= ap_const_lv32_3F800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_131_p1 <= edge_p1_x;
        else 
            grp_fu_131_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_150_p0_assign_proc : process(reg_177, reg_184, ap_CS_fsm_state59, ap_CS_fsm_state17, ap_CS_fsm_state39, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_150_p0 <= reg_177;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_150_p0 <= reg_184;
        else 
            grp_fu_150_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_150_p1_assign_proc : process(tmp_1_i_i_reg_704, tmp_1_i3_i_reg_710, tmp_1_i7_i_reg_716, ap_CS_fsm_state59, ap_CS_fsm_state17, ap_CS_fsm_state39, ap_CS_fsm_state63)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            grp_fu_150_p1 <= tmp_1_i7_i_reg_716;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_150_p1 <= tmp_1_i3_i_reg_710;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_150_p1 <= tmp_1_i_i_reg_704;
        else 
            grp_fu_150_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_154_p1_assign_proc : process(tmp_1_i_i_reg_704, tmp_1_i3_i_reg_710, ap_CS_fsm_state17, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_154_p1 <= tmp_1_i3_i_reg_710;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_154_p1 <= tmp_1_i_i_reg_704;
        else 
            grp_fu_154_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_158_p0_assign_proc : process(zext_ln76_fu_199_p1, ap_CS_fsm_state5, zext_ln77_fu_244_p1, ap_CS_fsm_state27, zext_ln78_fu_393_p1, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_158_p0 <= zext_ln78_fu_393_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_158_p0 <= zext_ln77_fu_244_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_158_p0 <= zext_ln76_fu_199_p1;
        else 
            grp_fu_158_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_161_opcode_assign_proc : process(and_ln40_1_reg_813, and_ln20_1_reg_823, ap_CS_fsm_state75, ap_CS_fsm_state49, ap_CS_fsm_state69, ap_CS_fsm_state73)
    begin
        if ((((ap_const_lv1_0 = and_ln20_1_reg_823) and (ap_const_logic_1 = ap_CS_fsm_state69)) or ((ap_const_lv1_1 = and_ln20_1_reg_823) and (ap_const_logic_1 = ap_CS_fsm_state69)))) then 
            grp_fu_161_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state75) or ((ap_const_lv1_0 = and_ln40_1_reg_813) and (ap_const_logic_1 = ap_CS_fsm_state73)) or ((ap_const_lv1_1 = and_ln40_1_reg_813) and (ap_const_logic_1 = ap_CS_fsm_state73)))) then 
            grp_fu_161_opcode <= ap_const_lv5_4;
        else 
            grp_fu_161_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_161_p0_assign_proc : process(reg_189, min_reg_734, and_ln40_1_reg_813, and_ln20_1_reg_823, max_reg_841, ap_CS_fsm_state75, ap_CS_fsm_state49, ap_CS_fsm_state69, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_161_p0 <= max_reg_841;
        elsif ((((ap_const_lv1_0 = and_ln40_1_reg_813) and (ap_const_logic_1 = ap_CS_fsm_state73)) or ((ap_const_lv1_1 = and_ln40_1_reg_813) and (ap_const_logic_1 = ap_CS_fsm_state73)) or ((ap_const_lv1_0 = and_ln20_1_reg_823) and (ap_const_logic_1 = ap_CS_fsm_state69)) or ((ap_const_lv1_1 = and_ln20_1_reg_823) and (ap_const_logic_1 = ap_CS_fsm_state69)))) then 
            grp_fu_161_p0 <= reg_189;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_161_p0 <= min_reg_734;
        else 
            grp_fu_161_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_161_p1_assign_proc : process(min_reg_734, max_2_reg_741, min_3_reg_793, max_5_reg_800, and_ln40_1_reg_813, and_ln20_1_reg_823, min_7_reg_847, ap_CS_fsm_state75, ap_CS_fsm_state49, ap_CS_fsm_state69, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_161_p1 <= min_7_reg_847;
        elsif (((ap_const_lv1_1 = and_ln40_1_reg_813) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            grp_fu_161_p1 <= min_reg_734;
        elsif (((ap_const_lv1_0 = and_ln20_1_reg_823) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            grp_fu_161_p1 <= max_5_reg_800;
        elsif (((ap_const_lv1_1 = and_ln20_1_reg_823) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            grp_fu_161_p1 <= max_2_reg_741;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or ((ap_const_lv1_0 = and_ln40_1_reg_813) and (ap_const_logic_1 = ap_CS_fsm_state73)))) then 
            grp_fu_161_p1 <= min_3_reg_793;
        else 
            grp_fu_161_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_210_p2 <= std_logic_vector(unsigned(i_0_reg_98) + unsigned(ap_const_lv4_1));
    icmp_ln20_1_fu_238_p2 <= "1" when (trunc_ln20_fu_234_p1 = ap_const_lv23_0) else "0";
    icmp_ln20_2_fu_364_p2 <= "0" when (tmp_6_fu_350_p4 = ap_const_lv8_FF) else "1";
    icmp_ln20_3_fu_370_p2 <= "1" when (trunc_ln20_1_fu_360_p1 = ap_const_lv23_0) else "0";
    icmp_ln20_fu_290_p2 <= "0" when (tmp_5_fu_281_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_1_fu_434_p2 <= "1" when (trunc_ln22_fu_424_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_fu_428_p2 <= "0" when (tmp_10_fu_414_p4 = ap_const_lv8_FF) else "1";
    icmp_ln40_1_fu_224_p2 <= "1" when (trunc_ln40_fu_220_p1 = ap_const_lv23_0) else "0";
    icmp_ln40_2_fu_318_p2 <= "0" when (tmp_3_fu_304_p4 = ap_const_lv8_FF) else "1";
    icmp_ln40_3_fu_324_p2 <= "1" when (trunc_ln40_1_fu_314_p1 = ap_const_lv23_0) else "0";
    icmp_ln40_fu_270_p2 <= "0" when (tmp_2_fu_261_p4 = ap_const_lv8_FF) else "1";
    icmp_ln42_1_fu_513_p2 <= "1" when (trunc_ln42_fu_503_p1 = ap_const_lv23_0) else "0";
    icmp_ln42_fu_507_p2 <= "0" when (tmp_8_fu_493_p4 = ap_const_lv8_FF) else "1";
    icmp_ln70_1_fu_608_p2 <= "1" when (trunc_ln70_fu_581_p1 = ap_const_lv23_0) else "0";
    icmp_ln70_2_fu_614_p2 <= "0" when (tmp_14_fu_588_p4 = ap_const_lv8_FF) else "1";
    icmp_ln70_3_fu_620_p2 <= "1" when (trunc_ln70_1_fu_598_p1 = ap_const_lv23_0) else "0";
    icmp_ln70_fu_602_p2 <= "0" when (tmp_13_fu_571_p4 = ap_const_lv8_FF) else "1";
    icmp_ln76_fu_204_p2 <= "1" when (i_0_reg_98 = ap_const_lv4_8) else "0";
    icmp_ln77_fu_249_p2 <= "1" when (j_0_reg_109 = ap_const_lv4_8) else "0";
    icmp_ln78_fu_398_p2 <= "1" when (k_0_reg_120 = ap_const_lv4_8) else "0";
    j_fu_255_p2 <= std_logic_vector(unsigned(j_0_reg_109) + unsigned(ap_const_lv4_1));
    k_fu_404_p2 <= std_logic_vector(unsigned(k_0_reg_120) + unsigned(ap_const_lv4_1));
    max_4_fu_457_p3 <= 
        reg_189 when (and_ln22_1_fu_451_p2(0) = '1') else 
        max_2_reg_741;
    max_6_fu_475_p3 <= 
        reg_189 when (and_ln25_1_fu_469_p2(0) = '1') else 
        max_5_reg_800;
    max_fu_482_p3 <= 
        max_4_fu_457_p3 when (and_ln20_1_reg_823(0) = '1') else 
        max_6_fu_475_p3;
    min_2_fu_536_p3 <= 
        reg_189 when (and_ln42_1_fu_530_p2(0) = '1') else 
        min_reg_734;
    min_4_fu_554_p3 <= 
        reg_189 when (and_ln45_1_fu_548_p2(0) = '1') else 
        min_3_reg_793;
    min_7_fu_561_p3 <= 
        min_2_fu_536_p3 when (and_ln40_1_reg_813(0) = '1') else 
        min_4_fu_554_p3;
    or_ln20_1_fu_376_p2 <= (icmp_ln20_3_fu_370_p2 or icmp_ln20_2_fu_364_p2);
    or_ln20_fu_296_p2 <= (icmp_ln20_fu_290_p2 or icmp_ln20_1_reg_763);
    or_ln22_fu_440_p2 <= (icmp_ln22_fu_428_p2 or icmp_ln22_1_fu_434_p2);
    or_ln40_1_fu_330_p2 <= (icmp_ln40_3_fu_324_p2 or icmp_ln40_2_fu_318_p2);
    or_ln40_fu_276_p2 <= (icmp_ln40_fu_270_p2 or icmp_ln40_1_reg_753);
    or_ln42_fu_519_p2 <= (icmp_ln42_fu_507_p2 or icmp_ln42_1_fu_513_p2);
    or_ln70_1_fu_630_p2 <= (icmp_ln70_3_reg_868 or icmp_ln70_2_reg_863);
    or_ln70_fu_626_p2 <= (icmp_ln70_reg_853 or icmp_ln70_1_reg_858);
    select_ln80_fu_652_p3 <= 
        collisionCount_fu_646_p2 when (and_ln70_1_fu_640_p2(0) = '1') else 
        collisionCount_0_fu_58;
    tmp_10_fu_414_p4 <= bitcast_ln22_fu_410_p1(30 downto 23);
    tmp_13_fu_571_p4 <= bitcast_ln70_fu_568_p1(30 downto 23);
    tmp_14_fu_588_p4 <= bitcast_ln70_1_fu_585_p1(30 downto 23);
    tmp_2_fu_261_p4 <= bitcast_ln40_reg_748(30 downto 23);
    tmp_3_fu_304_p4 <= bitcast_ln40_1_fu_301_p1(30 downto 23);
    tmp_5_fu_281_p4 <= bitcast_ln20_reg_758(30 downto 23);
    tmp_6_fu_350_p4 <= bitcast_ln20_1_fu_347_p1(30 downto 23);
    tmp_8_fu_493_p4 <= bitcast_ln42_fu_489_p1(30 downto 23);
    trunc_ln20_1_fu_360_p1 <= bitcast_ln20_1_fu_347_p1(23 - 1 downto 0);
    trunc_ln20_fu_234_p1 <= bitcast_ln20_fu_230_p1(23 - 1 downto 0);
    trunc_ln22_fu_424_p1 <= bitcast_ln22_fu_410_p1(23 - 1 downto 0);
    trunc_ln40_1_fu_314_p1 <= bitcast_ln40_1_fu_301_p1(23 - 1 downto 0);
    trunc_ln40_fu_220_p1 <= bitcast_ln40_fu_216_p1(23 - 1 downto 0);
    trunc_ln42_fu_503_p1 <= bitcast_ln42_fu_489_p1(23 - 1 downto 0);
    trunc_ln70_1_fu_598_p1 <= bitcast_ln70_1_fu_585_p1(23 - 1 downto 0);
    trunc_ln70_fu_581_p1 <= bitcast_ln70_fu_568_p1(23 - 1 downto 0);
    zext_ln76_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_98),32));
    zext_ln77_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_109),32));
    zext_ln78_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_120),32));
end behav;
