-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity honeybee is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of honeybee is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "honeybee,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.724875,HLS_SYN_LAT=553,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=20,HLS_SYN_FF=10361,HLS_SYN_LUT=14265,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten85_reg_116 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_127 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_138 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_reg_149 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_0_reg_160 : STD_LOGIC_VECTOR (3 downto 0);
    signal collisionCount_2_reg_171 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal xor_ln14_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln14_reg_1322 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bitcast_ln14_1_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln14_1_reg_1332 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i3_i_reg_1338 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_1_i_i_reg_1369 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_assign_mid_reg_1377 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln40_2_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln40_2_reg_1383 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln40_4_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_4_reg_1388 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_assign_1_mid_reg_1394 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln20_2_fu_356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln20_2_reg_1400 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln20_4_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_4_reg_1405 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state16_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln76_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1421_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln76_fu_386_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln77_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1430_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln76_1_fu_406_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln76_1_reg_1448 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln76_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_1453_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_11_fu_430_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_438_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_1470 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln77_fu_450_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln77_reg_1475 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln77_7_fu_458_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_fu_466_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln77_10_fu_478_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal obs_x_reg_1510 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal obs_y_reg_1515 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal obs_x_mid1_reg_1520 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal obs_y_mid1_reg_1525 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal obs_z_reg_1530 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_1535 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal tmp_i1_i_reg_1541 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_mid1_reg_1547 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_i_mid1_reg_1553 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i5_i_reg_1559 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i5_i_reg_1559_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i5_i_reg_1559_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_4_reg_1565 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_i_reg_1570 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_mid1_5_reg_1575 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_i_mid1_reg_1580 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i6_i_reg_1585 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_2_reg_1590 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal max_2_reg_1590_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal max_5_reg_1597 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_5_reg_1597_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_1_mid1_reg_1604 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_assign_1_mid1_reg_1611 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln20_1_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_1_reg_1618 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_2_fu_580_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_2_reg_1623 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_2_reg_1623_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_2_reg_1623_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln20_5_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_5_reg_1630 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_6_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_6_reg_1635 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_7_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_7_reg_1640 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_4_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_4_reg_1645 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_4_reg_1645_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_4_reg_1645_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln77_4_fu_667_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln77_4_reg_1651 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln77_4_reg_1651_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln77_4_reg_1651_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln20_9_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_9_reg_1657 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_10_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_10_reg_1662 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln25_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln25_reg_1667 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln25_reg_1667_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln25_reg_1667_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln77_6_fu_776_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln77_6_reg_1672 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln77_6_reg_1672_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_3_reg_1677 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_3_reg_1677_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_reg_1685 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_reg_1685_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_3_reg_1692 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_3_reg_1692_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_mid1_reg_1699 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_assign_mid1_reg_1706 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_1_reg_1713 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_1_reg_1713_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal max_fu_852_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_1722 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_1722_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_1722_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln40_1_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_reg_1728 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_1_fu_941_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_1_reg_1733 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln40_5_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_5_reg_1740 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_6_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_6_reg_1745 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_7_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_7_reg_1750 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_4_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_4_reg_1755 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln77_1_fu_1029_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln77_1_reg_1761 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln40_9_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_9_reg_1767 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_10_fu_1059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_10_reg_1772 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_reg_1777 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_7_fu_1215_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_7_reg_1782 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln70_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1788 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_1_fu_1263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_1_reg_1793 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_2_fu_1269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_2_reg_1798 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_3_fu_1275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_3_reg_1803 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln80_fu_1307_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter23_state39 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal grp_fu_183_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_188_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_234_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_238_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_277_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_280_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_286_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_305_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln14_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln40_fu_346_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln20_fu_360_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln78_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_fu_398_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln77_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln77_fu_472_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln20_fu_498_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln20_1_fu_501_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln20_1_fu_521_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_511_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln20_1_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_524_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln20_2_fu_534_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln20_3_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_2_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_1_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln20_3_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln20_3_fu_589_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_6_mid_fu_611_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_mid_fu_621_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln76_13_fu_648_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln76_4_fu_599_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_8_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_8_fu_606_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln20_4_fu_673_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_mid1_fu_676_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln20_4_fu_686_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln76_9_fu_642_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_15_fu_709_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln77_9_fu_716_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln77_5_fu_702_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_2_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_3_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_2_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_3_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_5_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_4_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_5_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_10_fu_755_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln22_fu_783_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_786_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_fu_796_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln22_1_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_1_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_1_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_4_fu_829_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_6_fu_846_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln40_fu_859_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln40_1_fu_862_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln40_1_fu_882_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_872_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln40_1_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_885_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln40_2_fu_895_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln40_3_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_2_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_1_fu_923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln40_3_fu_948_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln40_3_fu_951_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_3_mid_fu_973_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_mid_fu_983_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln76_12_fu_1010_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln76_3_fu_961_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_8_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_5_fu_968_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln40_4_fu_1036_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_mid1_fu_1039_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln40_4_fu_1049_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln76_6_fu_1004_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_14_fu_1072_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln77_8_fu_1079_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln77_2_fu_1065_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_1086_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_2_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_3_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_2_fu_1106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_3_fu_1112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_5_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_4_fu_1128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_5_fu_1133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_7_fu_1118_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln42_fu_1146_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1149_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln42_fu_1159_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln42_1_fu_1169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_fu_1163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_fu_1175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_fu_1181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_1_fu_1186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln45_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln45_1_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln77_3_fu_1139_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_2_fu_1192_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_4_fu_1209_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln70_fu_1223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln70_1_fu_1240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_1226_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln70_fu_1236_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_14_fu_1243_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln70_1_fu_1253_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln70_fu_1281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln70_1_fu_1285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln70_fu_1289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln70_1_fu_1295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal collisionCount_fu_1301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_188_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1688 : BOOLEAN;
    signal ap_condition_1692 : BOOLEAN;
    signal ap_condition_1696 : BOOLEAN;

    component honeybee_fsub_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_faddfsubcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fadd_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fdiv_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_sitofp_3fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fcmp_32ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    honeybee_fsub_32nbkb_U1 : component honeybee_fsub_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_183_p0,
        din1 => grp_fu_183_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_183_p2);

    honeybee_faddfsubcud_U2 : component honeybee_faddfsubcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_188_p0,
        din1 => grp_fu_188_p1,
        opcode => grp_fu_188_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_188_p2);

    honeybee_fsub_32nbkb_U3 : component honeybee_fsub_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => obs_x_mid1_reg_1520,
        din1 => edge_p1_x,
        ce => ap_const_logic_1,
        dout => grp_fu_197_p2);

    honeybee_fsub_32nbkb_U4 : component honeybee_fsub_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => obs_y_mid1_reg_1525,
        din1 => edge_p1_y,
        ce => ap_const_logic_1,
        dout => grp_fu_201_p2);

    honeybee_fsub_32nbkb_U5 : component honeybee_fsub_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => obs_z_reg_1530,
        din1 => edge_p1_z,
        ce => ap_const_logic_1,
        dout => grp_fu_205_p2);

    honeybee_fadd_32ndEe_U6 : component honeybee_fadd_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_reg_1535,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_209_p2);

    honeybee_fadd_32ndEe_U7 : component honeybee_fadd_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i1_i_reg_1541,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_214_p2);

    honeybee_fadd_32ndEe_U8 : component honeybee_fadd_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_mid1_reg_1547,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_219_p2);

    honeybee_fadd_32ndEe_U9 : component honeybee_fadd_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i1_i_mid1_reg_1553,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_224_p2);

    honeybee_fadd_32ndEe_U10 : component honeybee_fadd_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i5_i_reg_1559,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_229_p2);

    honeybee_fdiv_32neOg_U11 : component honeybee_fdiv_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_234_p0,
        din1 => grp_fu_234_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_234_p2);

    honeybee_fdiv_32neOg_U12 : component honeybee_fdiv_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_238_p0,
        din1 => tmp_1_i3_i_reg_1338,
        ce => ap_const_logic_1,
        dout => grp_fu_238_p2);

    honeybee_fdiv_32neOg_U13 : component honeybee_fdiv_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_mid1_reg_1547,
        din1 => tmp_1_i_i_reg_1369,
        ce => ap_const_logic_1,
        dout => grp_fu_242_p2);

    honeybee_fdiv_32neOg_U14 : component honeybee_fdiv_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i1_i_mid1_reg_1553,
        din1 => tmp_1_i3_i_reg_1338,
        ce => ap_const_logic_1,
        dout => grp_fu_246_p2);

    honeybee_fdiv_32neOg_U15 : component honeybee_fdiv_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i5_i_reg_1559_pp0_iter10_reg,
        din1 => reg_321,
        ce => ap_const_logic_1,
        dout => grp_fu_250_p2);

    honeybee_fdiv_32neOg_U16 : component honeybee_fdiv_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_4_reg_1565,
        din1 => tmp_1_i_i_reg_1369,
        ce => ap_const_logic_1,
        dout => grp_fu_254_p2);

    honeybee_fdiv_32neOg_U17 : component honeybee_fdiv_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i2_i_reg_1570,
        din1 => tmp_1_i3_i_reg_1338,
        ce => ap_const_logic_1,
        dout => grp_fu_258_p2);

    honeybee_fdiv_32neOg_U18 : component honeybee_fdiv_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_mid1_5_reg_1575,
        din1 => tmp_1_i_i_reg_1369,
        ce => ap_const_logic_1,
        dout => grp_fu_262_p2);

    honeybee_fdiv_32neOg_U19 : component honeybee_fdiv_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i2_i_mid1_reg_1580,
        din1 => tmp_1_i3_i_reg_1338,
        ce => ap_const_logic_1,
        dout => grp_fu_266_p2);

    honeybee_fdiv_32neOg_U20 : component honeybee_fdiv_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i6_i_reg_1585,
        din1 => reg_321,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p2);

    honeybee_sitofp_3fYi_U21 : component honeybee_sitofp_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_274_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_274_p1);

    honeybee_sitofp_3fYi_U22 : component honeybee_sitofp_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_277_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_277_p1);

    honeybee_sitofp_3fYi_U23 : component honeybee_sitofp_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_280_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_280_p1);

    honeybee_sitofp_3fYi_U24 : component honeybee_sitofp_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_283_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_283_p1);

    honeybee_sitofp_3fYi_U25 : component honeybee_sitofp_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_286_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_286_p1);

    honeybee_fcmp_32ng8j_U26 : component honeybee_fcmp_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => max_2_reg_1590,
        din1 => max_5_reg_1597,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_289_p2);

    honeybee_fcmp_32ng8j_U27 : component honeybee_fcmp_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_293_p0,
        din1 => grp_fu_293_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_293_p2);

    honeybee_fcmp_32ng8j_U28 : component honeybee_fcmp_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => max_3_reg_1677,
        din1 => grp_fu_297_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_297_p2);

    honeybee_fcmp_32ng8j_U29 : component honeybee_fcmp_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => min_reg_1685,
        din1 => min_3_reg_1692,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_301_p2);

    honeybee_fcmp_32ng8j_U30 : component honeybee_fcmp_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_305_p0,
        din1 => grp_fu_305_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_305_p2);

    honeybee_fcmp_32ng8j_U31 : component honeybee_fcmp_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => min_1_reg_1713,
        din1 => grp_fu_309_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_309_p2);

    honeybee_fcmp_32ng8j_U32 : component honeybee_fcmp_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => min_1_reg_1713,
        din1 => grp_fu_313_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_313_p2);

    honeybee_fcmp_32ng8j_U33 : component honeybee_fcmp_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => max_reg_1722_pp0_iter24_reg,
        din1 => min_7_reg_1782,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_317_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_fu_380_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter23_state39)) then 
                        ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter22;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    collisionCount_2_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (icmp_ln76_reg_1421_pp0_iter25_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                collisionCount_2_reg_171 <= select_ln80_fu_1307_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                collisionCount_2_reg_171 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_fu_380_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_127 <= select_ln76_11_fu_430_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_0_reg_127 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten85_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_fu_380_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten85_reg_116 <= add_ln76_fu_386_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                indvar_flatten85_reg_116 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_fu_380_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_138 <= select_ln77_10_fu_478_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                indvar_flatten_reg_138 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_0_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_fu_380_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_reg_149 <= select_ln77_7_fu_458_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_0_reg_149 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_fu_380_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                k_0_reg_160 <= k_fu_466_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                k_0_reg_160 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_fu_380_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln76_1_reg_1448 <= add_ln76_1_fu_406_p2;
                and_ln76_reg_1453 <= and_ln76_fu_424_p2;
                icmp_ln77_reg_1430 <= icmp_ln77_fu_392_p2;
                j_reg_1470 <= j_fu_438_p2;
                select_ln77_reg_1475 <= select_ln77_fu_450_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln76_reg_1453_pp0_iter18_reg) and (icmp_ln77_reg_1430_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln20_1_reg_1618 <= and_ln20_1_fu_574_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln76_reg_1453_pp0_iter22_reg) and (icmp_ln77_reg_1430_pp0_iter22_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln40_1_reg_1728 <= and_ln40_1_fu_935_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln76_reg_1453_pp0_iter10_reg <= and_ln76_reg_1453_pp0_iter9_reg;
                and_ln76_reg_1453_pp0_iter11_reg <= and_ln76_reg_1453_pp0_iter10_reg;
                and_ln76_reg_1453_pp0_iter12_reg <= and_ln76_reg_1453_pp0_iter11_reg;
                and_ln76_reg_1453_pp0_iter13_reg <= and_ln76_reg_1453_pp0_iter12_reg;
                and_ln76_reg_1453_pp0_iter14_reg <= and_ln76_reg_1453_pp0_iter13_reg;
                and_ln76_reg_1453_pp0_iter15_reg <= and_ln76_reg_1453_pp0_iter14_reg;
                and_ln76_reg_1453_pp0_iter16_reg <= and_ln76_reg_1453_pp0_iter15_reg;
                and_ln76_reg_1453_pp0_iter17_reg <= and_ln76_reg_1453_pp0_iter16_reg;
                and_ln76_reg_1453_pp0_iter18_reg <= and_ln76_reg_1453_pp0_iter17_reg;
                and_ln76_reg_1453_pp0_iter19_reg <= and_ln76_reg_1453_pp0_iter18_reg;
                and_ln76_reg_1453_pp0_iter20_reg <= and_ln76_reg_1453_pp0_iter19_reg;
                and_ln76_reg_1453_pp0_iter21_reg <= and_ln76_reg_1453_pp0_iter20_reg;
                and_ln76_reg_1453_pp0_iter22_reg <= and_ln76_reg_1453_pp0_iter21_reg;
                and_ln76_reg_1453_pp0_iter23_reg <= and_ln76_reg_1453_pp0_iter22_reg;
                and_ln76_reg_1453_pp0_iter2_reg <= and_ln76_reg_1453_pp0_iter1_reg;
                and_ln76_reg_1453_pp0_iter3_reg <= and_ln76_reg_1453_pp0_iter2_reg;
                and_ln76_reg_1453_pp0_iter4_reg <= and_ln76_reg_1453_pp0_iter3_reg;
                and_ln76_reg_1453_pp0_iter5_reg <= and_ln76_reg_1453_pp0_iter4_reg;
                and_ln76_reg_1453_pp0_iter6_reg <= and_ln76_reg_1453_pp0_iter5_reg;
                and_ln76_reg_1453_pp0_iter7_reg <= and_ln76_reg_1453_pp0_iter6_reg;
                and_ln76_reg_1453_pp0_iter8_reg <= and_ln76_reg_1453_pp0_iter7_reg;
                and_ln76_reg_1453_pp0_iter9_reg <= and_ln76_reg_1453_pp0_iter8_reg;
                icmp_ln76_reg_1421_pp0_iter10_reg <= icmp_ln76_reg_1421_pp0_iter9_reg;
                icmp_ln76_reg_1421_pp0_iter11_reg <= icmp_ln76_reg_1421_pp0_iter10_reg;
                icmp_ln76_reg_1421_pp0_iter12_reg <= icmp_ln76_reg_1421_pp0_iter11_reg;
                icmp_ln76_reg_1421_pp0_iter13_reg <= icmp_ln76_reg_1421_pp0_iter12_reg;
                icmp_ln76_reg_1421_pp0_iter14_reg <= icmp_ln76_reg_1421_pp0_iter13_reg;
                icmp_ln76_reg_1421_pp0_iter15_reg <= icmp_ln76_reg_1421_pp0_iter14_reg;
                icmp_ln76_reg_1421_pp0_iter16_reg <= icmp_ln76_reg_1421_pp0_iter15_reg;
                icmp_ln76_reg_1421_pp0_iter17_reg <= icmp_ln76_reg_1421_pp0_iter16_reg;
                icmp_ln76_reg_1421_pp0_iter18_reg <= icmp_ln76_reg_1421_pp0_iter17_reg;
                icmp_ln76_reg_1421_pp0_iter19_reg <= icmp_ln76_reg_1421_pp0_iter18_reg;
                icmp_ln76_reg_1421_pp0_iter20_reg <= icmp_ln76_reg_1421_pp0_iter19_reg;
                icmp_ln76_reg_1421_pp0_iter21_reg <= icmp_ln76_reg_1421_pp0_iter20_reg;
                icmp_ln76_reg_1421_pp0_iter22_reg <= icmp_ln76_reg_1421_pp0_iter21_reg;
                icmp_ln76_reg_1421_pp0_iter23_reg <= icmp_ln76_reg_1421_pp0_iter22_reg;
                icmp_ln76_reg_1421_pp0_iter24_reg <= icmp_ln76_reg_1421_pp0_iter23_reg;
                icmp_ln76_reg_1421_pp0_iter25_reg <= icmp_ln76_reg_1421_pp0_iter24_reg;
                icmp_ln76_reg_1421_pp0_iter2_reg <= icmp_ln76_reg_1421_pp0_iter1_reg;
                icmp_ln76_reg_1421_pp0_iter3_reg <= icmp_ln76_reg_1421_pp0_iter2_reg;
                icmp_ln76_reg_1421_pp0_iter4_reg <= icmp_ln76_reg_1421_pp0_iter3_reg;
                icmp_ln76_reg_1421_pp0_iter5_reg <= icmp_ln76_reg_1421_pp0_iter4_reg;
                icmp_ln76_reg_1421_pp0_iter6_reg <= icmp_ln76_reg_1421_pp0_iter5_reg;
                icmp_ln76_reg_1421_pp0_iter7_reg <= icmp_ln76_reg_1421_pp0_iter6_reg;
                icmp_ln76_reg_1421_pp0_iter8_reg <= icmp_ln76_reg_1421_pp0_iter7_reg;
                icmp_ln76_reg_1421_pp0_iter9_reg <= icmp_ln76_reg_1421_pp0_iter8_reg;
                icmp_ln77_reg_1430_pp0_iter10_reg <= icmp_ln77_reg_1430_pp0_iter9_reg;
                icmp_ln77_reg_1430_pp0_iter11_reg <= icmp_ln77_reg_1430_pp0_iter10_reg;
                icmp_ln77_reg_1430_pp0_iter12_reg <= icmp_ln77_reg_1430_pp0_iter11_reg;
                icmp_ln77_reg_1430_pp0_iter13_reg <= icmp_ln77_reg_1430_pp0_iter12_reg;
                icmp_ln77_reg_1430_pp0_iter14_reg <= icmp_ln77_reg_1430_pp0_iter13_reg;
                icmp_ln77_reg_1430_pp0_iter15_reg <= icmp_ln77_reg_1430_pp0_iter14_reg;
                icmp_ln77_reg_1430_pp0_iter16_reg <= icmp_ln77_reg_1430_pp0_iter15_reg;
                icmp_ln77_reg_1430_pp0_iter17_reg <= icmp_ln77_reg_1430_pp0_iter16_reg;
                icmp_ln77_reg_1430_pp0_iter18_reg <= icmp_ln77_reg_1430_pp0_iter17_reg;
                icmp_ln77_reg_1430_pp0_iter19_reg <= icmp_ln77_reg_1430_pp0_iter18_reg;
                icmp_ln77_reg_1430_pp0_iter20_reg <= icmp_ln77_reg_1430_pp0_iter19_reg;
                icmp_ln77_reg_1430_pp0_iter21_reg <= icmp_ln77_reg_1430_pp0_iter20_reg;
                icmp_ln77_reg_1430_pp0_iter22_reg <= icmp_ln77_reg_1430_pp0_iter21_reg;
                icmp_ln77_reg_1430_pp0_iter23_reg <= icmp_ln77_reg_1430_pp0_iter22_reg;
                icmp_ln77_reg_1430_pp0_iter2_reg <= icmp_ln77_reg_1430_pp0_iter1_reg;
                icmp_ln77_reg_1430_pp0_iter3_reg <= icmp_ln77_reg_1430_pp0_iter2_reg;
                icmp_ln77_reg_1430_pp0_iter4_reg <= icmp_ln77_reg_1430_pp0_iter3_reg;
                icmp_ln77_reg_1430_pp0_iter5_reg <= icmp_ln77_reg_1430_pp0_iter4_reg;
                icmp_ln77_reg_1430_pp0_iter6_reg <= icmp_ln77_reg_1430_pp0_iter5_reg;
                icmp_ln77_reg_1430_pp0_iter7_reg <= icmp_ln77_reg_1430_pp0_iter6_reg;
                icmp_ln77_reg_1430_pp0_iter8_reg <= icmp_ln77_reg_1430_pp0_iter7_reg;
                icmp_ln77_reg_1430_pp0_iter9_reg <= icmp_ln77_reg_1430_pp0_iter8_reg;
                max_2_reg_1590_pp0_iter18_reg <= max_2_reg_1590;
                max_3_reg_1677_pp0_iter21_reg <= max_3_reg_1677;
                max_5_reg_1597_pp0_iter18_reg <= max_5_reg_1597;
                max_reg_1722_pp0_iter23_reg <= max_reg_1722;
                max_reg_1722_pp0_iter24_reg <= max_reg_1722_pp0_iter23_reg;
                min_1_reg_1713_pp0_iter23_reg <= min_1_reg_1713;
                min_3_reg_1692 <= grp_fu_258_p2;
                min_3_reg_1692_pp0_iter22_reg <= min_3_reg_1692;
                min_reg_1685 <= grp_fu_254_p2;
                min_reg_1685_pp0_iter22_reg <= min_reg_1685;
                obs_x_reg_1510 <= grp_fu_274_p1;
                obs_y_reg_1515 <= grp_fu_277_p1;
                or_ln20_4_reg_1645_pp0_iter20_reg <= or_ln20_4_reg_1645;
                or_ln20_4_reg_1645_pp0_iter21_reg <= or_ln20_4_reg_1645_pp0_iter20_reg;
                or_ln25_reg_1667_pp0_iter20_reg <= or_ln25_reg_1667;
                or_ln25_reg_1667_pp0_iter21_reg <= or_ln25_reg_1667_pp0_iter20_reg;
                select_ln76_2_reg_1623_pp0_iter20_reg <= select_ln76_2_reg_1623;
                select_ln76_2_reg_1623_pp0_iter21_reg <= select_ln76_2_reg_1623_pp0_iter20_reg;
                select_ln77_4_reg_1651_pp0_iter20_reg <= select_ln77_4_reg_1651;
                select_ln77_4_reg_1651_pp0_iter21_reg <= select_ln77_4_reg_1651_pp0_iter20_reg;
                select_ln77_6_reg_1672_pp0_iter21_reg <= select_ln77_6_reg_1672;
                tmp_i2_i_reg_1570 <= grp_fu_214_p2;
                tmp_i5_i_reg_1559_pp0_iter10_reg <= tmp_i5_i_reg_1559_pp0_iter9_reg;
                tmp_i5_i_reg_1559_pp0_iter9_reg <= tmp_i5_i_reg_1559;
                tmp_i_i_4_reg_1565 <= grp_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln76_reg_1453_pp0_iter1_reg <= and_ln76_reg_1453;
                icmp_ln76_reg_1421 <= icmp_ln76_fu_380_p2;
                icmp_ln76_reg_1421_pp0_iter1_reg <= icmp_ln76_reg_1421;
                icmp_ln77_reg_1430_pp0_iter1_reg <= icmp_ln77_reg_1430;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bitcast_ln14_1_reg_1332 <= bitcast_ln14_1_fu_338_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                bitcast_ln20_2_reg_1400 <= bitcast_ln20_2_fu_356_p1;
                bitcast_ln40_2_reg_1383 <= bitcast_ln40_2_fu_342_p1;
                icmp_ln20_4_reg_1405 <= icmp_ln20_4_fu_364_p2;
                icmp_ln40_4_reg_1388 <= icmp_ln40_4_fu_350_p2;
                tmp_1_i_i_reg_1369 <= grp_fu_183_p2;
                y_assign_1_mid_reg_1394 <= grp_fu_238_p2;
                y_assign_mid_reg_1377 <= grp_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_1421_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln20_10_reg_1662 <= icmp_ln20_10_fu_696_p2;
                icmp_ln20_5_reg_1630 <= icmp_ln20_5_fu_593_p2;
                or_ln20_4_reg_1645 <= or_ln20_4_fu_661_p2;
                or_ln25_reg_1667 <= or_ln25_fu_729_p2;
                select_ln76_2_reg_1623 <= select_ln76_2_fu_580_p3;
                select_ln77_4_reg_1651 <= select_ln77_4_fu_667_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_reg_1430_pp0_iter18_reg = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln76_reg_1453_pp0_iter18_reg) and (icmp_ln76_reg_1421_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln20_6_reg_1635 <= icmp_ln20_6_fu_630_p2;
                icmp_ln20_7_reg_1640 <= icmp_ln20_7_fu_636_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln76_reg_1453_pp0_iter18_reg) and (icmp_ln76_reg_1421_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln20_9_reg_1657 <= icmp_ln20_9_fu_690_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_1421_pp0_iter22_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln40_10_reg_1772 <= icmp_ln40_10_fu_1059_p2;
                icmp_ln40_5_reg_1740 <= icmp_ln40_5_fu_955_p2;
                or_ln40_4_reg_1755 <= or_ln40_4_fu_1023_p2;
                or_ln45_reg_1777 <= or_ln45_fu_1092_p2;
                select_ln76_1_reg_1733 <= select_ln76_1_fu_941_p3;
                select_ln77_1_reg_1761 <= select_ln77_1_fu_1029_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_reg_1430_pp0_iter22_reg = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln76_reg_1453_pp0_iter22_reg) and (icmp_ln76_reg_1421_pp0_iter22_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln40_6_reg_1745 <= icmp_ln40_6_fu_992_p2;
                icmp_ln40_7_reg_1750 <= icmp_ln40_7_fu_998_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln76_reg_1453_pp0_iter22_reg) and (icmp_ln76_reg_1421_pp0_iter22_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln40_9_reg_1767 <= icmp_ln40_9_fu_1053_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_1421_pp0_iter24_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln70_1_reg_1793 <= icmp_ln70_1_fu_1263_p2;
                icmp_ln70_2_reg_1798 <= icmp_ln70_2_fu_1269_p2;
                icmp_ln70_3_reg_1803 <= icmp_ln70_3_fu_1275_p2;
                icmp_ln70_reg_1788 <= icmp_ln70_fu_1257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                max_2_reg_1590 <= grp_fu_234_p2;
                max_5_reg_1597 <= grp_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_1421_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                max_3_reg_1677 <= grp_fu_250_p2;
                select_ln77_6_reg_1672 <= select_ln77_6_fu_776_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_1421_pp0_iter21_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                max_reg_1722 <= max_fu_852_p3;
                min_1_reg_1713 <= grp_fu_270_p2;
                x_assign_mid1_reg_1699 <= grp_fu_262_p2;
                y_assign_mid1_reg_1706 <= grp_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_1421_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                min_7_reg_1782 <= min_7_fu_1215_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_1421_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                obs_x_mid1_reg_1520 <= grp_fu_280_p1;
                obs_y_mid1_reg_1525 <= grp_fu_283_p1;
                obs_z_reg_1530 <= grp_fu_286_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_321 <= grp_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_1_i3_i_reg_1338 <= grp_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_1421_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i1_i_mid1_reg_1553 <= grp_fu_201_p2;
                tmp_i5_i_reg_1559 <= grp_fu_205_p2;
                tmp_i_i_mid1_reg_1547 <= grp_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i1_i_reg_1541 <= grp_fu_188_p2;
                tmp_i_i_reg_1535 <= grp_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_1421_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i2_i_mid1_reg_1580 <= grp_fu_224_p2;
                tmp_i6_i_reg_1585 <= grp_fu_229_p2;
                tmp_i_i_mid1_5_reg_1575 <= grp_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_1421_pp0_iter17_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_assign_1_mid1_reg_1604 <= grp_fu_242_p2;
                y_assign_1_mid1_reg_1611 <= grp_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                xor_ln14_reg_1322 <= xor_ln14_fu_332_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter26, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln76_1_fu_406_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_0_reg_127));
    add_ln76_fu_386_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(indvar_flatten85_reg_116));
    add_ln77_fu_472_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(indvar_flatten_reg_138));
    and_ln20_1_fu_574_p2 <= (grp_fu_289_p2 and and_ln20_fu_568_p2);
    and_ln20_2_fu_743_p2 <= (or_ln20_3_fu_739_p2 and or_ln20_2_fu_735_p2);
    and_ln20_3_fu_749_p2 <= (grp_fu_293_p2 and and_ln20_2_fu_743_p2);
    and_ln20_4_fu_765_p2 <= (or_ln20_5_fu_761_p2 and or_ln20_4_reg_1645);
    and_ln20_5_fu_770_p2 <= (grp_fu_293_p2 and and_ln20_4_fu_765_p2);
    and_ln20_fu_568_p2 <= (or_ln20_fu_544_p2 and or_ln20_1_fu_562_p2);
    and_ln22_1_fu_823_p2 <= (grp_fu_297_p2 and and_ln22_fu_818_p2);
    and_ln22_fu_818_p2 <= (or_ln22_fu_812_p2 and or_ln20_4_reg_1645_pp0_iter21_reg);
    and_ln25_1_fu_840_p2 <= (grp_fu_297_p2 and and_ln25_fu_835_p2);
    and_ln25_fu_835_p2 <= (or_ln25_reg_1667_pp0_iter21_reg and or_ln22_fu_812_p2);
    and_ln40_1_fu_935_p2 <= (grp_fu_301_p2 and and_ln40_fu_929_p2);
    and_ln40_2_fu_1106_p2 <= (or_ln40_3_fu_1102_p2 and or_ln40_2_fu_1098_p2);
    and_ln40_3_fu_1112_p2 <= (grp_fu_305_p2 and and_ln40_2_fu_1106_p2);
    and_ln40_4_fu_1128_p2 <= (or_ln40_5_fu_1124_p2 and or_ln40_4_reg_1755);
    and_ln40_5_fu_1133_p2 <= (grp_fu_305_p2 and and_ln40_4_fu_1128_p2);
    and_ln40_fu_929_p2 <= (or_ln40_fu_905_p2 and or_ln40_1_fu_923_p2);
    and_ln42_1_fu_1186_p2 <= (grp_fu_309_p2 and and_ln42_fu_1181_p2);
    and_ln42_fu_1181_p2 <= (or_ln42_fu_1175_p2 and or_ln40_4_reg_1755);
    and_ln45_1_fu_1203_p2 <= (grp_fu_313_p2 and and_ln45_fu_1198_p2);
    and_ln45_fu_1198_p2 <= (or_ln45_reg_1777 and or_ln42_fu_1175_p2);
    and_ln70_1_fu_1295_p2 <= (grp_fu_317_p2 and and_ln70_fu_1289_p2);
    and_ln70_fu_1289_p2 <= (or_ln70_fu_1281_p2 and or_ln70_1_fu_1285_p2);
    and_ln76_fu_424_p2 <= (xor_ln76_fu_412_p2 and icmp_ln78_fu_418_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state43 <= ap_CS_fsm(16);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1688_assign_proc : process(icmp_ln76_reg_1421_pp0_iter18_reg, ap_enable_reg_pp0_iter19, ap_block_pp0_stage0)
    begin
                ap_condition_1688 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (icmp_ln76_reg_1421_pp0_iter18_reg = ap_const_lv1_0));
    end process;


    ap_condition_1692_assign_proc : process(icmp_ln76_reg_1421_pp0_iter20_reg, ap_enable_reg_pp0_iter21, ap_block_pp0_stage0)
    begin
                ap_condition_1692 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (icmp_ln76_reg_1421_pp0_iter20_reg = ap_const_lv1_0));
    end process;


    ap_condition_1696_assign_proc : process(icmp_ln76_reg_1421_pp0_iter22_reg, ap_enable_reg_pp0_iter23, ap_block_pp0_stage0)
    begin
                ap_condition_1696 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (icmp_ln76_reg_1421_pp0_iter22_reg = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter23_state39_assign_proc : process(ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter23_state39 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter23_state39 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= collisionCount_2_reg_171;
    bitcast_ln14_1_fu_338_p1 <= xor_ln14_reg_1322;
    bitcast_ln14_fu_328_p1 <= edge_p1_y;
    bitcast_ln20_1_fu_521_p1 <= max_5_reg_1597_pp0_iter18_reg;
    bitcast_ln20_2_fu_356_p1 <= grp_fu_238_p2;
    bitcast_ln20_3_fu_586_p1 <= x_assign_1_mid1_reg_1604;
    bitcast_ln20_4_fu_673_p1 <= y_assign_1_mid1_reg_1611;
    bitcast_ln20_fu_498_p1 <= max_2_reg_1590_pp0_iter18_reg;
    bitcast_ln22_fu_783_p1 <= max_3_reg_1677_pp0_iter21_reg;
    bitcast_ln40_1_fu_882_p1 <= min_3_reg_1692_pp0_iter22_reg;
    bitcast_ln40_2_fu_342_p1 <= grp_fu_234_p2;
    bitcast_ln40_3_fu_948_p1 <= x_assign_mid1_reg_1699;
    bitcast_ln40_4_fu_1036_p1 <= y_assign_mid1_reg_1706;
    bitcast_ln40_fu_859_p1 <= min_reg_1685_pp0_iter22_reg;
    bitcast_ln42_fu_1146_p1 <= min_1_reg_1713_pp0_iter23_reg;
    bitcast_ln70_1_fu_1240_p1 <= min_7_reg_1782;
    bitcast_ln70_fu_1223_p1 <= max_reg_1722_pp0_iter24_reg;
    collisionCount_fu_1301_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(collisionCount_2_reg_171));

    grp_fu_183_p0_assign_proc : process(edge_p2_x, edge_p2_y, ap_CS_fsm_state2, ap_CS_fsm_state12, obs_x_reg_1510, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            grp_fu_183_p0 <= obs_x_reg_1510;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_183_p0 <= edge_p2_x;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_183_p0 <= edge_p2_y;
        else 
            grp_fu_183_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_183_p1_assign_proc : process(edge_p1_x, edge_p1_y, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            grp_fu_183_p1 <= edge_p1_x;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_183_p1 <= edge_p1_y;
        else 
            grp_fu_183_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_188_opcode_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001)))) then 
            grp_fu_188_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_188_opcode <= ap_const_lv2_0;
        else 
            grp_fu_188_opcode <= "XX";
        end if; 
    end process;


    grp_fu_188_p0_assign_proc : process(edge_p2_z, ap_CS_fsm_state2, bitcast_ln14_1_fu_338_p1, ap_CS_fsm_state12, obs_y_reg_1515, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            grp_fu_188_p0 <= obs_y_reg_1515;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_188_p0 <= edge_p2_z;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_188_p0 <= bitcast_ln14_1_fu_338_p1;
        else 
            grp_fu_188_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_188_p1_assign_proc : process(edge_p1_y, edge_p1_z, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            grp_fu_188_p1 <= edge_p1_y;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_188_p1 <= edge_p1_z;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_188_p1 <= ap_const_lv32_3F800000;
        else 
            grp_fu_188_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_234_p0_assign_proc : process(reg_321, tmp_i_i_reg_1535, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0, ap_CS_fsm_state6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            grp_fu_234_p0 <= tmp_i_i_reg_1535;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_234_p0 <= reg_321;
        else 
            grp_fu_234_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_234_p1_assign_proc : process(tmp_1_i3_i_reg_1338, tmp_1_i_i_reg_1369, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0, ap_CS_fsm_state6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            grp_fu_234_p1 <= tmp_1_i_i_reg_1369;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_234_p1 <= tmp_1_i3_i_reg_1338;
        else 
            grp_fu_234_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_238_p0_assign_proc : process(bitcast_ln14_1_reg_1332, tmp_i1_i_reg_1541, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0, ap_CS_fsm_state6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            grp_fu_238_p0 <= tmp_i1_i_reg_1541;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_238_p0 <= bitcast_ln14_1_reg_1332;
        else 
            grp_fu_238_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_274_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_127),32));
    grp_fu_277_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_149),32));
    grp_fu_280_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_1_reg_1448),32));
    grp_fu_283_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_1470),32));
    grp_fu_286_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln77_reg_1475),32));

    grp_fu_293_p0_assign_proc : process(icmp_ln77_reg_1430_pp0_iter18_reg, and_ln76_reg_1453_pp0_iter18_reg, x_assign_1_mid1_reg_1604, select_ln76_2_fu_580_p3, ap_condition_1688)
    begin
        if ((ap_const_boolean_1 = ap_condition_1688)) then
            if ((ap_const_lv1_1 = and_ln76_reg_1453_pp0_iter18_reg)) then 
                grp_fu_293_p0 <= select_ln76_2_fu_580_p3;
            elsif (((icmp_ln77_reg_1430_pp0_iter18_reg = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln76_reg_1453_pp0_iter18_reg))) then 
                grp_fu_293_p0 <= x_assign_1_mid1_reg_1604;
            else 
                grp_fu_293_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_293_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_293_p1_assign_proc : process(y_assign_1_mid_reg_1394, icmp_ln77_reg_1430_pp0_iter18_reg, and_ln76_reg_1453_pp0_iter18_reg, y_assign_1_mid1_reg_1611, ap_condition_1688)
    begin
        if ((ap_const_boolean_1 = ap_condition_1688)) then
            if ((ap_const_lv1_1 = and_ln76_reg_1453_pp0_iter18_reg)) then 
                grp_fu_293_p1 <= y_assign_1_mid1_reg_1611;
            elsif (((icmp_ln77_reg_1430_pp0_iter18_reg = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln76_reg_1453_pp0_iter18_reg))) then 
                grp_fu_293_p1 <= y_assign_1_mid_reg_1394;
            else 
                grp_fu_293_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_293_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_297_p1_assign_proc : process(select_ln76_2_reg_1623_pp0_iter20_reg, select_ln77_4_reg_1651_pp0_iter20_reg, select_ln77_6_reg_1672, ap_condition_1692)
    begin
        if ((ap_const_boolean_1 = ap_condition_1692)) then
            if ((select_ln77_6_reg_1672 = ap_const_lv1_0)) then 
                grp_fu_297_p1 <= select_ln77_4_reg_1651_pp0_iter20_reg;
            elsif ((select_ln77_6_reg_1672 = ap_const_lv1_1)) then 
                grp_fu_297_p1 <= select_ln76_2_reg_1623_pp0_iter20_reg;
            else 
                grp_fu_297_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_297_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_305_p0_assign_proc : process(icmp_ln77_reg_1430_pp0_iter22_reg, and_ln76_reg_1453_pp0_iter22_reg, x_assign_mid1_reg_1699, select_ln76_1_fu_941_p3, ap_condition_1696)
    begin
        if ((ap_const_boolean_1 = ap_condition_1696)) then
            if ((ap_const_lv1_1 = and_ln76_reg_1453_pp0_iter22_reg)) then 
                grp_fu_305_p0 <= select_ln76_1_fu_941_p3;
            elsif (((icmp_ln77_reg_1430_pp0_iter22_reg = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln76_reg_1453_pp0_iter22_reg))) then 
                grp_fu_305_p0 <= x_assign_mid1_reg_1699;
            else 
                grp_fu_305_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_305_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_305_p1_assign_proc : process(y_assign_mid_reg_1377, icmp_ln77_reg_1430_pp0_iter22_reg, and_ln76_reg_1453_pp0_iter22_reg, y_assign_mid1_reg_1706, ap_condition_1696)
    begin
        if ((ap_const_boolean_1 = ap_condition_1696)) then
            if ((ap_const_lv1_1 = and_ln76_reg_1453_pp0_iter22_reg)) then 
                grp_fu_305_p1 <= y_assign_mid1_reg_1706;
            elsif (((icmp_ln77_reg_1430_pp0_iter22_reg = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln76_reg_1453_pp0_iter22_reg))) then 
                grp_fu_305_p1 <= y_assign_mid_reg_1377;
            else 
                grp_fu_305_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_305_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_309_p1 <= 
        x_assign_mid1_reg_1699 when (icmp_ln77_reg_1430_pp0_iter22_reg(0) = '1') else 
        min_reg_1685_pp0_iter22_reg;
    grp_fu_313_p1 <= 
        y_assign_mid1_reg_1706 when (and_ln76_reg_1453_pp0_iter22_reg(0) = '1') else 
        select_ln76_5_fu_968_p3;
    icmp_ln20_10_fu_696_p2 <= "1" when (trunc_ln20_4_fu_686_p1 = ap_const_lv23_0) else "0";
    icmp_ln20_1_fu_505_p2 <= "1" when (trunc_ln20_1_fu_501_p1 = ap_const_lv23_0) else "0";
    icmp_ln20_2_fu_550_p2 <= "0" when (tmp_7_fu_524_p4 = ap_const_lv8_FF) else "1";
    icmp_ln20_3_fu_556_p2 <= "1" when (trunc_ln20_2_fu_534_p1 = ap_const_lv23_0) else "0";
    icmp_ln20_4_fu_364_p2 <= "1" when (trunc_ln20_fu_360_p1 = ap_const_lv23_0) else "0";
    icmp_ln20_5_fu_593_p2 <= "1" when (trunc_ln20_3_fu_589_p1 = ap_const_lv23_0) else "0";
    icmp_ln20_6_fu_630_p2 <= "0" when (tmp_6_mid_fu_611_p4 = ap_const_lv8_FF) else "1";
    icmp_ln20_7_fu_636_p2 <= "0" when (tmp_7_mid_fu_621_p4 = ap_const_lv8_FF) else "1";
    icmp_ln20_8_fu_655_p2 <= "0" when (select_ln76_13_fu_648_p3 = ap_const_lv8_FF) else "1";
    icmp_ln20_9_fu_690_p2 <= "0" when (tmp_7_mid1_fu_676_p4 = ap_const_lv8_FF) else "1";
    icmp_ln20_fu_538_p2 <= "0" when (tmp_6_fu_511_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_1_fu_806_p2 <= "1" when (trunc_ln22_fu_796_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_fu_800_p2 <= "0" when (tmp_10_fu_786_p4 = ap_const_lv8_FF) else "1";
    icmp_ln25_fu_723_p2 <= "0" when (select_ln77_9_fu_716_p3 = ap_const_lv8_FF) else "1";
    icmp_ln40_10_fu_1059_p2 <= "1" when (trunc_ln40_4_fu_1049_p1 = ap_const_lv23_0) else "0";
    icmp_ln40_1_fu_866_p2 <= "1" when (trunc_ln40_1_fu_862_p1 = ap_const_lv23_0) else "0";
    icmp_ln40_2_fu_911_p2 <= "0" when (tmp_4_fu_885_p4 = ap_const_lv8_FF) else "1";
    icmp_ln40_3_fu_917_p2 <= "1" when (trunc_ln40_2_fu_895_p1 = ap_const_lv23_0) else "0";
    icmp_ln40_4_fu_350_p2 <= "1" when (trunc_ln40_fu_346_p1 = ap_const_lv23_0) else "0";
    icmp_ln40_5_fu_955_p2 <= "1" when (trunc_ln40_3_fu_951_p1 = ap_const_lv23_0) else "0";
    icmp_ln40_6_fu_992_p2 <= "0" when (tmp_3_mid_fu_973_p4 = ap_const_lv8_FF) else "1";
    icmp_ln40_7_fu_998_p2 <= "0" when (tmp_4_mid_fu_983_p4 = ap_const_lv8_FF) else "1";
    icmp_ln40_8_fu_1017_p2 <= "0" when (select_ln76_12_fu_1010_p3 = ap_const_lv8_FF) else "1";
    icmp_ln40_9_fu_1053_p2 <= "0" when (tmp_4_mid1_fu_1039_p4 = ap_const_lv8_FF) else "1";
    icmp_ln40_fu_899_p2 <= "0" when (tmp_3_fu_872_p4 = ap_const_lv8_FF) else "1";
    icmp_ln42_1_fu_1169_p2 <= "1" when (trunc_ln42_fu_1159_p1 = ap_const_lv23_0) else "0";
    icmp_ln42_fu_1163_p2 <= "0" when (tmp_9_fu_1149_p4 = ap_const_lv8_FF) else "1";
    icmp_ln45_fu_1086_p2 <= "0" when (select_ln77_8_fu_1079_p3 = ap_const_lv8_FF) else "1";
    icmp_ln70_1_fu_1263_p2 <= "1" when (trunc_ln70_fu_1236_p1 = ap_const_lv23_0) else "0";
    icmp_ln70_2_fu_1269_p2 <= "0" when (tmp_14_fu_1243_p4 = ap_const_lv8_FF) else "1";
    icmp_ln70_3_fu_1275_p2 <= "1" when (trunc_ln70_1_fu_1253_p1 = ap_const_lv23_0) else "0";
    icmp_ln70_fu_1257_p2 <= "0" when (tmp_13_fu_1226_p4 = ap_const_lv8_FF) else "1";
    icmp_ln76_fu_380_p2 <= "1" when (indvar_flatten85_reg_116 = ap_const_lv10_200) else "0";
    icmp_ln77_fu_392_p2 <= "1" when (indvar_flatten_reg_138 = ap_const_lv8_40) else "0";
    icmp_ln78_fu_418_p2 <= "1" when (k_0_reg_160 = ap_const_lv4_8) else "0";
    j_fu_438_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln76_fu_398_p3));
    k_fu_466_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln77_fu_450_p3));
    max_4_fu_829_p3 <= 
        max_3_reg_1677_pp0_iter21_reg when (and_ln22_1_fu_823_p2(0) = '1') else 
        select_ln76_2_reg_1623_pp0_iter21_reg;
    max_6_fu_846_p3 <= 
        max_3_reg_1677_pp0_iter21_reg when (and_ln25_1_fu_840_p2(0) = '1') else 
        select_ln77_4_reg_1651_pp0_iter21_reg;
    max_fu_852_p3 <= 
        max_4_fu_829_p3 when (select_ln77_6_reg_1672_pp0_iter21_reg(0) = '1') else 
        max_6_fu_846_p3;
    min_2_fu_1192_p3 <= 
        min_1_reg_1713_pp0_iter23_reg when (and_ln42_1_fu_1186_p2(0) = '1') else 
        select_ln76_1_reg_1733;
    min_4_fu_1209_p3 <= 
        min_1_reg_1713_pp0_iter23_reg when (and_ln45_1_fu_1203_p2(0) = '1') else 
        select_ln77_1_reg_1761;
    min_7_fu_1215_p3 <= 
        min_2_fu_1192_p3 when (select_ln77_3_fu_1139_p3(0) = '1') else 
        min_4_fu_1209_p3;
    or_ln20_1_fu_562_p2 <= (icmp_ln20_3_fu_556_p2 or icmp_ln20_2_fu_550_p2);
    or_ln20_2_fu_735_p2 <= (icmp_ln20_6_reg_1635 or icmp_ln20_5_reg_1630);
    or_ln20_3_fu_739_p2 <= (icmp_ln20_7_reg_1640 or icmp_ln20_4_reg_1405);
    or_ln20_4_fu_661_p2 <= (select_ln76_4_fu_599_p3 or icmp_ln20_8_fu_655_p2);
    or_ln20_5_fu_761_p2 <= (icmp_ln20_9_reg_1657 or icmp_ln20_10_reg_1662);
    or_ln20_fu_544_p2 <= (icmp_ln20_fu_538_p2 or icmp_ln20_1_fu_505_p2);
    or_ln22_fu_812_p2 <= (icmp_ln22_fu_800_p2 or icmp_ln22_1_fu_806_p2);
    or_ln25_fu_729_p2 <= (select_ln77_5_fu_702_p3 or icmp_ln25_fu_723_p2);
    or_ln40_1_fu_923_p2 <= (icmp_ln40_3_fu_917_p2 or icmp_ln40_2_fu_911_p2);
    or_ln40_2_fu_1098_p2 <= (icmp_ln40_6_reg_1745 or icmp_ln40_5_reg_1740);
    or_ln40_3_fu_1102_p2 <= (icmp_ln40_7_reg_1750 or icmp_ln40_4_reg_1388);
    or_ln40_4_fu_1023_p2 <= (select_ln76_3_fu_961_p3 or icmp_ln40_8_fu_1017_p2);
    or_ln40_5_fu_1124_p2 <= (icmp_ln40_9_reg_1767 or icmp_ln40_10_reg_1772);
    or_ln40_fu_905_p2 <= (icmp_ln40_fu_899_p2 or icmp_ln40_1_fu_866_p2);
    or_ln42_fu_1175_p2 <= (icmp_ln42_fu_1163_p2 or icmp_ln42_1_fu_1169_p2);
    or_ln45_fu_1092_p2 <= (select_ln77_2_fu_1065_p3 or icmp_ln45_fu_1086_p2);
    or_ln70_1_fu_1285_p2 <= (icmp_ln70_3_reg_1803 or icmp_ln70_2_reg_1798);
    or_ln70_fu_1281_p2 <= (icmp_ln70_reg_1788 or icmp_ln70_1_reg_1793);
    or_ln77_fu_444_p2 <= (icmp_ln77_fu_392_p2 or and_ln76_fu_424_p2);
    select_ln76_10_fu_755_p3 <= 
        and_ln20_3_fu_749_p2 when (icmp_ln77_reg_1430_pp0_iter19_reg(0) = '1') else 
        and_ln20_1_reg_1618;
    select_ln76_11_fu_430_p3 <= 
        add_ln76_1_fu_406_p2 when (icmp_ln77_fu_392_p2(0) = '1') else 
        i_0_reg_127;
    select_ln76_12_fu_1010_p3 <= 
        tmp_3_mid_fu_973_p4 when (icmp_ln77_reg_1430_pp0_iter22_reg(0) = '1') else 
        tmp_3_fu_872_p4;
    select_ln76_13_fu_648_p3 <= 
        tmp_6_mid_fu_611_p4 when (icmp_ln77_reg_1430_pp0_iter18_reg(0) = '1') else 
        tmp_6_fu_511_p4;
    select_ln76_14_fu_1072_p3 <= 
        tmp_4_mid_fu_983_p4 when (icmp_ln77_reg_1430_pp0_iter22_reg(0) = '1') else 
        tmp_4_fu_885_p4;
    select_ln76_15_fu_709_p3 <= 
        tmp_7_mid_fu_621_p4 when (icmp_ln77_reg_1430_pp0_iter18_reg(0) = '1') else 
        tmp_7_fu_524_p4;
    select_ln76_1_fu_941_p3 <= 
        x_assign_mid1_reg_1699 when (icmp_ln77_reg_1430_pp0_iter22_reg(0) = '1') else 
        min_reg_1685_pp0_iter22_reg;
    select_ln76_2_fu_580_p3 <= 
        x_assign_1_mid1_reg_1604 when (icmp_ln77_reg_1430_pp0_iter18_reg(0) = '1') else 
        max_2_reg_1590_pp0_iter18_reg;
    select_ln76_3_fu_961_p3 <= 
        icmp_ln40_5_fu_955_p2 when (icmp_ln77_reg_1430_pp0_iter22_reg(0) = '1') else 
        icmp_ln40_1_fu_866_p2;
    select_ln76_4_fu_599_p3 <= 
        icmp_ln20_5_fu_593_p2 when (icmp_ln77_reg_1430_pp0_iter18_reg(0) = '1') else 
        icmp_ln20_1_fu_505_p2;
    select_ln76_5_fu_968_p3 <= 
        y_assign_mid_reg_1377 when (icmp_ln77_reg_1430_pp0_iter22_reg(0) = '1') else 
        min_3_reg_1692_pp0_iter22_reg;
    select_ln76_6_fu_1004_p3 <= 
        icmp_ln40_4_reg_1388 when (icmp_ln77_reg_1430_pp0_iter22_reg(0) = '1') else 
        icmp_ln40_3_fu_917_p2;
    select_ln76_7_fu_1118_p3 <= 
        and_ln40_3_fu_1112_p2 when (icmp_ln77_reg_1430_pp0_iter23_reg(0) = '1') else 
        and_ln40_1_reg_1728;
    select_ln76_8_fu_606_p3 <= 
        y_assign_1_mid_reg_1394 when (icmp_ln77_reg_1430_pp0_iter18_reg(0) = '1') else 
        max_5_reg_1597_pp0_iter18_reg;
    select_ln76_9_fu_642_p3 <= 
        icmp_ln20_4_reg_1405 when (icmp_ln77_reg_1430_pp0_iter18_reg(0) = '1') else 
        icmp_ln20_3_fu_556_p2;
    select_ln76_fu_398_p3 <= 
        ap_const_lv4_0 when (icmp_ln77_fu_392_p2(0) = '1') else 
        j_0_reg_149;
    select_ln77_10_fu_478_p3 <= 
        ap_const_lv8_1 when (icmp_ln77_fu_392_p2(0) = '1') else 
        add_ln77_fu_472_p2;
    select_ln77_1_fu_1029_p3 <= 
        y_assign_mid1_reg_1706 when (and_ln76_reg_1453_pp0_iter22_reg(0) = '1') else 
        select_ln76_5_fu_968_p3;
    select_ln77_2_fu_1065_p3 <= 
        icmp_ln40_10_fu_1059_p2 when (and_ln76_reg_1453_pp0_iter22_reg(0) = '1') else 
        select_ln76_6_fu_1004_p3;
    select_ln77_3_fu_1139_p3 <= 
        and_ln40_5_fu_1133_p2 when (and_ln76_reg_1453_pp0_iter23_reg(0) = '1') else 
        select_ln76_7_fu_1118_p3;
    select_ln77_4_fu_667_p3 <= 
        y_assign_1_mid1_reg_1611 when (and_ln76_reg_1453_pp0_iter18_reg(0) = '1') else 
        select_ln76_8_fu_606_p3;
    select_ln77_5_fu_702_p3 <= 
        icmp_ln20_10_fu_696_p2 when (and_ln76_reg_1453_pp0_iter18_reg(0) = '1') else 
        select_ln76_9_fu_642_p3;
    select_ln77_6_fu_776_p3 <= 
        and_ln20_5_fu_770_p2 when (and_ln76_reg_1453_pp0_iter19_reg(0) = '1') else 
        select_ln76_10_fu_755_p3;
    select_ln77_7_fu_458_p3 <= 
        j_fu_438_p2 when (and_ln76_fu_424_p2(0) = '1') else 
        select_ln76_fu_398_p3;
    select_ln77_8_fu_1079_p3 <= 
        tmp_4_mid1_fu_1039_p4 when (and_ln76_reg_1453_pp0_iter22_reg(0) = '1') else 
        select_ln76_14_fu_1072_p3;
    select_ln77_9_fu_716_p3 <= 
        tmp_7_mid1_fu_676_p4 when (and_ln76_reg_1453_pp0_iter18_reg(0) = '1') else 
        select_ln76_15_fu_709_p3;
    select_ln77_fu_450_p3 <= 
        ap_const_lv4_0 when (or_ln77_fu_444_p2(0) = '1') else 
        k_0_reg_160;
    select_ln80_fu_1307_p3 <= 
        collisionCount_fu_1301_p2 when (and_ln70_1_fu_1295_p2(0) = '1') else 
        collisionCount_2_reg_171;
    tmp_10_fu_786_p4 <= bitcast_ln22_fu_783_p1(30 downto 23);
    tmp_13_fu_1226_p4 <= bitcast_ln70_fu_1223_p1(30 downto 23);
    tmp_14_fu_1243_p4 <= bitcast_ln70_1_fu_1240_p1(30 downto 23);
    tmp_3_fu_872_p4 <= bitcast_ln40_fu_859_p1(30 downto 23);
    tmp_3_mid_fu_973_p4 <= bitcast_ln40_3_fu_948_p1(30 downto 23);
    tmp_4_fu_885_p4 <= bitcast_ln40_1_fu_882_p1(30 downto 23);
    tmp_4_mid1_fu_1039_p4 <= bitcast_ln40_4_fu_1036_p1(30 downto 23);
    tmp_4_mid_fu_983_p4 <= bitcast_ln40_2_reg_1383(30 downto 23);
    tmp_6_fu_511_p4 <= bitcast_ln20_fu_498_p1(30 downto 23);
    tmp_6_mid_fu_611_p4 <= bitcast_ln20_3_fu_586_p1(30 downto 23);
    tmp_7_fu_524_p4 <= bitcast_ln20_1_fu_521_p1(30 downto 23);
    tmp_7_mid1_fu_676_p4 <= bitcast_ln20_4_fu_673_p1(30 downto 23);
    tmp_7_mid_fu_621_p4 <= bitcast_ln20_2_reg_1400(30 downto 23);
    tmp_9_fu_1149_p4 <= bitcast_ln42_fu_1146_p1(30 downto 23);
    trunc_ln20_1_fu_501_p1 <= bitcast_ln20_fu_498_p1(23 - 1 downto 0);
    trunc_ln20_2_fu_534_p1 <= bitcast_ln20_1_fu_521_p1(23 - 1 downto 0);
    trunc_ln20_3_fu_589_p1 <= bitcast_ln20_3_fu_586_p1(23 - 1 downto 0);
    trunc_ln20_4_fu_686_p1 <= bitcast_ln20_4_fu_673_p1(23 - 1 downto 0);
    trunc_ln20_fu_360_p1 <= bitcast_ln20_2_fu_356_p1(23 - 1 downto 0);
    trunc_ln22_fu_796_p1 <= bitcast_ln22_fu_783_p1(23 - 1 downto 0);
    trunc_ln40_1_fu_862_p1 <= bitcast_ln40_fu_859_p1(23 - 1 downto 0);
    trunc_ln40_2_fu_895_p1 <= bitcast_ln40_1_fu_882_p1(23 - 1 downto 0);
    trunc_ln40_3_fu_951_p1 <= bitcast_ln40_3_fu_948_p1(23 - 1 downto 0);
    trunc_ln40_4_fu_1049_p1 <= bitcast_ln40_4_fu_1036_p1(23 - 1 downto 0);
    trunc_ln40_fu_346_p1 <= bitcast_ln40_2_fu_342_p1(23 - 1 downto 0);
    trunc_ln42_fu_1159_p1 <= bitcast_ln42_fu_1146_p1(23 - 1 downto 0);
    trunc_ln70_1_fu_1253_p1 <= bitcast_ln70_1_fu_1240_p1(23 - 1 downto 0);
    trunc_ln70_fu_1236_p1 <= bitcast_ln70_fu_1223_p1(23 - 1 downto 0);
    xor_ln14_fu_332_p2 <= (bitcast_ln14_fu_328_p1 xor ap_const_lv32_80000000);
    xor_ln76_fu_412_p2 <= (icmp_ln77_fu_392_p2 xor ap_const_lv1_1);
end behav;
