// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="honeybee,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.724875,HLS_SYN_LAT=105,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=20,HLS_SYN_FF=10350,HLS_SYN_LUT=14250,HLS_VERSION=2019_2}" *)

module honeybee (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        edge_p1_x,
        edge_p1_y,
        edge_p1_z,
        edge_p2_x,
        edge_p2_y,
        edge_p2_z,
        ap_return
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_pp0_stage0 = 17'd32768;
parameter    ap_ST_fsm_state43 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] edge_p1_x;
input  [31:0] edge_p1_y;
input  [31:0] edge_p1_z;
input  [31:0] edge_p2_x;
input  [31:0] edge_p2_y;
input  [31:0] edge_p2_z;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] indvar_flatten85_reg_116;
reg   [2:0] i_0_reg_127;
reg   [5:0] indvar_flatten_reg_138;
reg   [2:0] j_0_reg_149;
reg   [2:0] k_0_reg_160;
reg   [31:0] collisionCount_2_reg_171;
wire   [31:0] grp_fu_188_p2;
reg   [31:0] reg_321;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state15;
wire   [31:0] xor_ln14_fu_332_p2;
reg   [31:0] xor_ln14_reg_1322;
wire    ap_CS_fsm_state2;
wire   [31:0] bitcast_ln14_1_fu_338_p1;
reg   [31:0] bitcast_ln14_1_reg_1332;
wire   [31:0] grp_fu_183_p2;
reg   [31:0] tmp_1_i3_i_reg_1338;
wire    ap_CS_fsm_state12;
reg   [31:0] tmp_1_i_i_reg_1369;
wire   [31:0] grp_fu_234_p2;
reg   [31:0] y_assign_mid_reg_1377;
wire   [31:0] bitcast_ln40_2_fu_342_p1;
reg   [31:0] bitcast_ln40_2_reg_1383;
wire   [0:0] icmp_ln40_4_fu_350_p2;
reg   [0:0] icmp_ln40_4_reg_1388;
wire   [31:0] grp_fu_238_p2;
reg   [31:0] y_assign_1_mid_reg_1394;
wire   [31:0] bitcast_ln20_2_fu_356_p1;
reg   [31:0] bitcast_ln20_2_reg_1400;
wire   [0:0] icmp_ln20_4_fu_364_p2;
reg   [0:0] icmp_ln20_4_reg_1405;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state16_pp0_stage0_iter0;
wire    ap_block_state17_pp0_stage0_iter1;
wire    ap_block_state18_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
wire    ap_block_state20_pp0_stage0_iter4;
wire    ap_block_state21_pp0_stage0_iter5;
wire    ap_block_state22_pp0_stage0_iter6;
wire    ap_block_state23_pp0_stage0_iter7;
wire    ap_block_state24_pp0_stage0_iter8;
wire    ap_block_state25_pp0_stage0_iter9;
wire    ap_block_state26_pp0_stage0_iter10;
wire    ap_block_state27_pp0_stage0_iter11;
wire    ap_block_state28_pp0_stage0_iter12;
wire    ap_block_state29_pp0_stage0_iter13;
wire    ap_block_state30_pp0_stage0_iter14;
wire    ap_block_state31_pp0_stage0_iter15;
wire    ap_block_state32_pp0_stage0_iter16;
wire    ap_block_state33_pp0_stage0_iter17;
wire    ap_block_state34_pp0_stage0_iter18;
wire    ap_block_state35_pp0_stage0_iter19;
wire    ap_block_state36_pp0_stage0_iter20;
wire    ap_block_state37_pp0_stage0_iter21;
wire    ap_block_state38_pp0_stage0_iter22;
wire    ap_block_state39_pp0_stage0_iter23;
wire    ap_block_state40_pp0_stage0_iter24;
wire    ap_block_state41_pp0_stage0_iter25;
wire    ap_block_state42_pp0_stage0_iter26;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln76_fu_380_p2;
reg   [0:0] icmp_ln76_reg_1421;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter1_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter2_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter3_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter4_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter5_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter6_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter7_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter8_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter9_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter10_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter11_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter12_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter13_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter14_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter15_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter16_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter17_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter18_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter19_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter20_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter21_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter22_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter23_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter24_reg;
reg   [0:0] icmp_ln76_reg_1421_pp0_iter25_reg;
wire   [6:0] add_ln76_fu_386_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln77_fu_392_p2;
reg   [0:0] icmp_ln77_reg_1430;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter1_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter2_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter3_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter4_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter5_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter6_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter7_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter8_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter9_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter10_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter11_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter12_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter13_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter14_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter15_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter16_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter17_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter18_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter19_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter20_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter21_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter22_reg;
reg   [0:0] icmp_ln77_reg_1430_pp0_iter23_reg;
wire   [2:0] add_ln76_1_fu_406_p2;
reg   [2:0] add_ln76_1_reg_1448;
wire   [0:0] and_ln76_fu_424_p2;
reg   [0:0] and_ln76_reg_1453;
reg   [0:0] and_ln76_reg_1453_pp0_iter1_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter2_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter3_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter4_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter5_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter6_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter7_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter8_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter9_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter10_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter11_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter12_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter13_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter14_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter15_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter16_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter17_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter18_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter19_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter20_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter21_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter22_reg;
reg   [0:0] and_ln76_reg_1453_pp0_iter23_reg;
wire   [2:0] select_ln76_11_fu_430_p3;
wire   [2:0] j_fu_438_p2;
reg   [2:0] j_reg_1470;
wire   [2:0] select_ln77_fu_450_p3;
reg   [2:0] select_ln77_reg_1475;
wire   [2:0] select_ln77_7_fu_458_p3;
wire   [2:0] k_fu_466_p2;
wire   [5:0] select_ln77_10_fu_478_p3;
wire   [31:0] grp_fu_274_p1;
reg   [31:0] obs_x_reg_1510;
wire   [31:0] grp_fu_277_p1;
reg   [31:0] obs_y_reg_1515;
wire   [31:0] grp_fu_280_p1;
reg   [31:0] obs_x_mid1_reg_1520;
wire   [31:0] grp_fu_283_p1;
reg   [31:0] obs_y_mid1_reg_1525;
wire   [31:0] grp_fu_286_p1;
reg   [31:0] obs_z_reg_1530;
reg   [31:0] tmp_i_i_reg_1535;
reg    ap_enable_reg_pp0_iter7;
reg   [31:0] tmp_i1_i_reg_1541;
wire   [31:0] grp_fu_197_p2;
reg   [31:0] tmp_i_i_mid1_reg_1547;
wire   [31:0] grp_fu_201_p2;
reg   [31:0] tmp_i1_i_mid1_reg_1553;
wire   [31:0] grp_fu_205_p2;
reg   [31:0] tmp_i5_i_reg_1559;
reg   [31:0] tmp_i5_i_reg_1559_pp0_iter9_reg;
reg   [31:0] tmp_i5_i_reg_1559_pp0_iter10_reg;
wire   [31:0] grp_fu_209_p2;
reg   [31:0] tmp_i_i_4_reg_1565;
wire   [31:0] grp_fu_214_p2;
reg   [31:0] tmp_i2_i_reg_1570;
wire   [31:0] grp_fu_219_p2;
reg   [31:0] tmp_i_i_mid1_5_reg_1575;
wire   [31:0] grp_fu_224_p2;
reg   [31:0] tmp_i2_i_mid1_reg_1580;
wire   [31:0] grp_fu_229_p2;
reg   [31:0] tmp_i6_i_reg_1585;
reg   [31:0] max_2_reg_1590;
reg    ap_enable_reg_pp0_iter17;
reg   [31:0] max_2_reg_1590_pp0_iter18_reg;
reg   [31:0] max_5_reg_1597;
reg   [31:0] max_5_reg_1597_pp0_iter18_reg;
wire   [31:0] grp_fu_242_p2;
reg   [31:0] x_assign_1_mid1_reg_1604;
wire   [31:0] grp_fu_246_p2;
reg   [31:0] y_assign_1_mid1_reg_1611;
wire   [0:0] and_ln20_1_fu_574_p2;
reg   [0:0] and_ln20_1_reg_1618;
wire   [31:0] select_ln76_2_fu_580_p3;
reg   [31:0] select_ln76_2_reg_1623;
reg   [31:0] select_ln76_2_reg_1623_pp0_iter20_reg;
reg   [31:0] select_ln76_2_reg_1623_pp0_iter21_reg;
wire   [0:0] icmp_ln20_5_fu_593_p2;
reg   [0:0] icmp_ln20_5_reg_1630;
wire   [0:0] icmp_ln20_6_fu_630_p2;
reg   [0:0] icmp_ln20_6_reg_1635;
wire   [0:0] icmp_ln20_7_fu_636_p2;
reg   [0:0] icmp_ln20_7_reg_1640;
wire   [0:0] or_ln20_4_fu_661_p2;
reg   [0:0] or_ln20_4_reg_1645;
reg   [0:0] or_ln20_4_reg_1645_pp0_iter20_reg;
reg   [0:0] or_ln20_4_reg_1645_pp0_iter21_reg;
wire   [31:0] select_ln77_4_fu_667_p3;
reg   [31:0] select_ln77_4_reg_1651;
reg   [31:0] select_ln77_4_reg_1651_pp0_iter20_reg;
reg   [31:0] select_ln77_4_reg_1651_pp0_iter21_reg;
wire   [0:0] icmp_ln20_9_fu_690_p2;
reg   [0:0] icmp_ln20_9_reg_1657;
wire   [0:0] icmp_ln20_10_fu_696_p2;
reg   [0:0] icmp_ln20_10_reg_1662;
wire   [0:0] or_ln25_fu_729_p2;
reg   [0:0] or_ln25_reg_1667;
reg   [0:0] or_ln25_reg_1667_pp0_iter20_reg;
reg   [0:0] or_ln25_reg_1667_pp0_iter21_reg;
wire   [0:0] select_ln77_6_fu_776_p3;
reg   [0:0] select_ln77_6_reg_1672;
reg   [0:0] select_ln77_6_reg_1672_pp0_iter21_reg;
wire   [31:0] grp_fu_250_p2;
reg   [31:0] max_3_reg_1677;
reg   [31:0] max_3_reg_1677_pp0_iter21_reg;
wire   [31:0] grp_fu_254_p2;
reg   [31:0] min_reg_1685;
reg   [31:0] min_reg_1685_pp0_iter22_reg;
wire   [31:0] grp_fu_258_p2;
reg   [31:0] min_3_reg_1692;
reg   [31:0] min_3_reg_1692_pp0_iter22_reg;
wire   [31:0] grp_fu_262_p2;
reg   [31:0] x_assign_mid1_reg_1699;
wire   [31:0] grp_fu_266_p2;
reg   [31:0] y_assign_mid1_reg_1706;
wire   [31:0] grp_fu_270_p2;
reg   [31:0] min_1_reg_1713;
reg   [31:0] min_1_reg_1713_pp0_iter23_reg;
wire   [31:0] max_fu_852_p3;
reg   [31:0] max_reg_1722;
reg   [31:0] max_reg_1722_pp0_iter23_reg;
reg   [31:0] max_reg_1722_pp0_iter24_reg;
wire   [0:0] and_ln40_1_fu_935_p2;
reg   [0:0] and_ln40_1_reg_1728;
wire   [31:0] select_ln76_1_fu_941_p3;
reg   [31:0] select_ln76_1_reg_1733;
wire   [0:0] icmp_ln40_5_fu_955_p2;
reg   [0:0] icmp_ln40_5_reg_1740;
wire   [0:0] icmp_ln40_6_fu_992_p2;
reg   [0:0] icmp_ln40_6_reg_1745;
wire   [0:0] icmp_ln40_7_fu_998_p2;
reg   [0:0] icmp_ln40_7_reg_1750;
wire   [0:0] or_ln40_4_fu_1023_p2;
reg   [0:0] or_ln40_4_reg_1755;
wire   [31:0] select_ln77_1_fu_1029_p3;
reg   [31:0] select_ln77_1_reg_1761;
wire   [0:0] icmp_ln40_9_fu_1053_p2;
reg   [0:0] icmp_ln40_9_reg_1767;
wire   [0:0] icmp_ln40_10_fu_1059_p2;
reg   [0:0] icmp_ln40_10_reg_1772;
wire   [0:0] or_ln45_fu_1092_p2;
reg   [0:0] or_ln45_reg_1777;
wire   [31:0] min_7_fu_1215_p3;
reg   [31:0] min_7_reg_1782;
wire   [0:0] icmp_ln70_fu_1257_p2;
reg   [0:0] icmp_ln70_reg_1788;
wire   [0:0] icmp_ln70_1_fu_1263_p2;
reg   [0:0] icmp_ln70_1_reg_1793;
wire   [0:0] icmp_ln70_2_fu_1269_p2;
reg   [0:0] icmp_ln70_2_reg_1798;
wire   [0:0] icmp_ln70_3_fu_1275_p2;
reg   [0:0] icmp_ln70_3_reg_1803;
wire   [31:0] select_ln80_fu_1307_p3;
reg    ap_enable_reg_pp0_iter26;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_condition_pp0_exit_iter23_state39;
reg    ap_enable_reg_pp0_iter25;
reg   [31:0] grp_fu_183_p0;
reg   [31:0] grp_fu_183_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] grp_fu_188_p0;
reg   [31:0] grp_fu_188_p1;
reg   [31:0] grp_fu_234_p0;
reg   [31:0] grp_fu_234_p1;
wire    ap_CS_fsm_state6;
reg   [31:0] grp_fu_238_p0;
wire   [31:0] grp_fu_274_p0;
wire   [31:0] grp_fu_277_p0;
wire   [31:0] grp_fu_280_p0;
wire   [31:0] grp_fu_283_p0;
wire   [31:0] grp_fu_286_p0;
reg   [31:0] grp_fu_293_p0;
reg   [31:0] grp_fu_293_p1;
reg   [31:0] grp_fu_297_p1;
reg   [31:0] grp_fu_305_p0;
reg   [31:0] grp_fu_305_p1;
wire   [31:0] grp_fu_309_p1;
wire   [31:0] grp_fu_313_p1;
wire   [31:0] bitcast_ln14_fu_328_p1;
wire   [22:0] trunc_ln40_fu_346_p1;
wire   [22:0] trunc_ln20_fu_360_p1;
wire   [0:0] icmp_ln78_fu_418_p2;
wire   [0:0] xor_ln76_fu_412_p2;
wire   [2:0] select_ln76_fu_398_p3;
wire   [0:0] or_ln77_fu_444_p2;
wire   [5:0] add_ln77_fu_472_p2;
wire   [31:0] bitcast_ln20_fu_498_p1;
wire   [22:0] trunc_ln20_1_fu_501_p1;
wire   [31:0] bitcast_ln20_1_fu_521_p1;
wire   [7:0] tmp_6_fu_511_p4;
wire   [0:0] icmp_ln20_1_fu_505_p2;
wire   [0:0] icmp_ln20_fu_538_p2;
wire   [7:0] tmp_7_fu_524_p4;
wire   [22:0] trunc_ln20_2_fu_534_p1;
wire   [0:0] icmp_ln20_3_fu_556_p2;
wire   [0:0] icmp_ln20_2_fu_550_p2;
wire   [0:0] or_ln20_fu_544_p2;
wire   [0:0] or_ln20_1_fu_562_p2;
wire   [0:0] and_ln20_fu_568_p2;
wire   [0:0] grp_fu_289_p2;
wire   [31:0] bitcast_ln20_3_fu_586_p1;
wire   [22:0] trunc_ln20_3_fu_589_p1;
wire   [7:0] tmp_6_mid_fu_611_p4;
wire   [7:0] tmp_7_mid_fu_621_p4;
wire   [7:0] select_ln76_13_fu_648_p3;
wire   [0:0] select_ln76_4_fu_599_p3;
wire   [0:0] icmp_ln20_8_fu_655_p2;
wire   [31:0] select_ln76_8_fu_606_p3;
wire   [31:0] bitcast_ln20_4_fu_673_p1;
wire   [7:0] tmp_7_mid1_fu_676_p4;
wire   [22:0] trunc_ln20_4_fu_686_p1;
wire   [0:0] select_ln76_9_fu_642_p3;
wire   [7:0] select_ln76_15_fu_709_p3;
wire   [7:0] select_ln77_9_fu_716_p3;
wire   [0:0] select_ln77_5_fu_702_p3;
wire   [0:0] icmp_ln25_fu_723_p2;
wire   [0:0] or_ln20_2_fu_735_p2;
wire   [0:0] or_ln20_3_fu_739_p2;
wire   [0:0] and_ln20_2_fu_743_p2;
wire   [0:0] grp_fu_293_p2;
wire   [0:0] and_ln20_3_fu_749_p2;
wire   [0:0] or_ln20_5_fu_761_p2;
wire   [0:0] and_ln20_4_fu_765_p2;
wire   [0:0] and_ln20_5_fu_770_p2;
wire   [0:0] select_ln76_10_fu_755_p3;
wire   [31:0] bitcast_ln22_fu_783_p1;
wire   [7:0] tmp_10_fu_786_p4;
wire   [22:0] trunc_ln22_fu_796_p1;
wire   [0:0] icmp_ln22_1_fu_806_p2;
wire   [0:0] icmp_ln22_fu_800_p2;
wire   [0:0] or_ln22_fu_812_p2;
wire   [0:0] and_ln22_fu_818_p2;
wire   [0:0] grp_fu_297_p2;
wire   [0:0] and_ln22_1_fu_823_p2;
wire   [0:0] and_ln25_fu_835_p2;
wire   [0:0] and_ln25_1_fu_840_p2;
wire   [31:0] max_4_fu_829_p3;
wire   [31:0] max_6_fu_846_p3;
wire   [31:0] bitcast_ln40_fu_859_p1;
wire   [22:0] trunc_ln40_1_fu_862_p1;
wire   [31:0] bitcast_ln40_1_fu_882_p1;
wire   [7:0] tmp_3_fu_872_p4;
wire   [0:0] icmp_ln40_1_fu_866_p2;
wire   [0:0] icmp_ln40_fu_899_p2;
wire   [7:0] tmp_4_fu_885_p4;
wire   [22:0] trunc_ln40_2_fu_895_p1;
wire   [0:0] icmp_ln40_3_fu_917_p2;
wire   [0:0] icmp_ln40_2_fu_911_p2;
wire   [0:0] or_ln40_fu_905_p2;
wire   [0:0] or_ln40_1_fu_923_p2;
wire   [0:0] and_ln40_fu_929_p2;
wire   [0:0] grp_fu_301_p2;
wire   [31:0] bitcast_ln40_3_fu_948_p1;
wire   [22:0] trunc_ln40_3_fu_951_p1;
wire   [7:0] tmp_3_mid_fu_973_p4;
wire   [7:0] tmp_4_mid_fu_983_p4;
wire   [7:0] select_ln76_12_fu_1010_p3;
wire   [0:0] select_ln76_3_fu_961_p3;
wire   [0:0] icmp_ln40_8_fu_1017_p2;
wire   [31:0] select_ln76_5_fu_968_p3;
wire   [31:0] bitcast_ln40_4_fu_1036_p1;
wire   [7:0] tmp_4_mid1_fu_1039_p4;
wire   [22:0] trunc_ln40_4_fu_1049_p1;
wire   [0:0] select_ln76_6_fu_1004_p3;
wire   [7:0] select_ln76_14_fu_1072_p3;
wire   [7:0] select_ln77_8_fu_1079_p3;
wire   [0:0] select_ln77_2_fu_1065_p3;
wire   [0:0] icmp_ln45_fu_1086_p2;
wire   [0:0] or_ln40_2_fu_1098_p2;
wire   [0:0] or_ln40_3_fu_1102_p2;
wire   [0:0] and_ln40_2_fu_1106_p2;
wire   [0:0] grp_fu_305_p2;
wire   [0:0] and_ln40_3_fu_1112_p2;
wire   [0:0] or_ln40_5_fu_1124_p2;
wire   [0:0] and_ln40_4_fu_1128_p2;
wire   [0:0] and_ln40_5_fu_1133_p2;
wire   [0:0] select_ln76_7_fu_1118_p3;
wire   [31:0] bitcast_ln42_fu_1146_p1;
wire   [7:0] tmp_9_fu_1149_p4;
wire   [22:0] trunc_ln42_fu_1159_p1;
wire   [0:0] icmp_ln42_1_fu_1169_p2;
wire   [0:0] icmp_ln42_fu_1163_p2;
wire   [0:0] or_ln42_fu_1175_p2;
wire   [0:0] and_ln42_fu_1181_p2;
wire   [0:0] grp_fu_309_p2;
wire   [0:0] and_ln42_1_fu_1186_p2;
wire   [0:0] and_ln45_fu_1198_p2;
wire   [0:0] grp_fu_313_p2;
wire   [0:0] and_ln45_1_fu_1203_p2;
wire   [0:0] select_ln77_3_fu_1139_p3;
wire   [31:0] min_2_fu_1192_p3;
wire   [31:0] min_4_fu_1209_p3;
wire   [31:0] bitcast_ln70_fu_1223_p1;
wire   [31:0] bitcast_ln70_1_fu_1240_p1;
wire   [7:0] tmp_13_fu_1226_p4;
wire   [22:0] trunc_ln70_fu_1236_p1;
wire   [7:0] tmp_14_fu_1243_p4;
wire   [22:0] trunc_ln70_1_fu_1253_p1;
wire   [0:0] or_ln70_fu_1281_p2;
wire   [0:0] or_ln70_1_fu_1285_p2;
wire   [0:0] and_ln70_fu_1289_p2;
wire   [0:0] grp_fu_317_p2;
wire   [0:0] and_ln70_1_fu_1295_p2;
wire   [31:0] collisionCount_fu_1301_p2;
reg   [1:0] grp_fu_188_opcode;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state43;
reg   [16:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1688;
reg    ap_condition_1692;
reg    ap_condition_1696;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
end

honeybee_fsub_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_183_p0),
    .din1(grp_fu_183_p1),
    .ce(1'b1),
    .dout(grp_fu_183_p2)
);

honeybee_faddfsubcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_faddfsubcud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_188_p0),
    .din1(grp_fu_188_p1),
    .opcode(grp_fu_188_opcode),
    .ce(1'b1),
    .dout(grp_fu_188_p2)
);

honeybee_fsub_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32nbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(obs_x_mid1_reg_1520),
    .din1(edge_p1_x),
    .ce(1'b1),
    .dout(grp_fu_197_p2)
);

honeybee_fsub_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32nbkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(obs_y_mid1_reg_1525),
    .din1(edge_p1_y),
    .ce(1'b1),
    .dout(grp_fu_201_p2)
);

honeybee_fsub_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32nbkb_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(obs_z_reg_1530),
    .din1(edge_p1_z),
    .ce(1'b1),
    .dout(grp_fu_205_p2)
);

honeybee_fadd_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fadd_32ndEe_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_i_reg_1535),
    .din1(32'd1065353216),
    .ce(1'b1),
    .dout(grp_fu_209_p2)
);

honeybee_fadd_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fadd_32ndEe_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i1_i_reg_1541),
    .din1(32'd1065353216),
    .ce(1'b1),
    .dout(grp_fu_214_p2)
);

honeybee_fadd_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fadd_32ndEe_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_i_mid1_reg_1547),
    .din1(32'd1065353216),
    .ce(1'b1),
    .dout(grp_fu_219_p2)
);

honeybee_fadd_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fadd_32ndEe_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i1_i_mid1_reg_1553),
    .din1(32'd1065353216),
    .ce(1'b1),
    .dout(grp_fu_224_p2)
);

honeybee_fadd_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fadd_32ndEe_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i5_i_reg_1559),
    .din1(32'd1065353216),
    .ce(1'b1),
    .dout(grp_fu_229_p2)
);

honeybee_fdiv_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32neOg_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_234_p0),
    .din1(grp_fu_234_p1),
    .ce(1'b1),
    .dout(grp_fu_234_p2)
);

honeybee_fdiv_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32neOg_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_238_p0),
    .din1(tmp_1_i3_i_reg_1338),
    .ce(1'b1),
    .dout(grp_fu_238_p2)
);

honeybee_fdiv_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32neOg_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_i_mid1_reg_1547),
    .din1(tmp_1_i_i_reg_1369),
    .ce(1'b1),
    .dout(grp_fu_242_p2)
);

honeybee_fdiv_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32neOg_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i1_i_mid1_reg_1553),
    .din1(tmp_1_i3_i_reg_1338),
    .ce(1'b1),
    .dout(grp_fu_246_p2)
);

honeybee_fdiv_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32neOg_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i5_i_reg_1559_pp0_iter10_reg),
    .din1(reg_321),
    .ce(1'b1),
    .dout(grp_fu_250_p2)
);

honeybee_fdiv_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32neOg_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_i_4_reg_1565),
    .din1(tmp_1_i_i_reg_1369),
    .ce(1'b1),
    .dout(grp_fu_254_p2)
);

honeybee_fdiv_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32neOg_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i2_i_reg_1570),
    .din1(tmp_1_i3_i_reg_1338),
    .ce(1'b1),
    .dout(grp_fu_258_p2)
);

honeybee_fdiv_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32neOg_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_i_mid1_5_reg_1575),
    .din1(tmp_1_i_i_reg_1369),
    .ce(1'b1),
    .dout(grp_fu_262_p2)
);

honeybee_fdiv_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32neOg_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i2_i_mid1_reg_1580),
    .din1(tmp_1_i3_i_reg_1338),
    .ce(1'b1),
    .dout(grp_fu_266_p2)
);

honeybee_fdiv_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32neOg_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i6_i_reg_1585),
    .din1(reg_321),
    .ce(1'b1),
    .dout(grp_fu_270_p2)
);

honeybee_sitofp_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_sitofp_3fYi_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_274_p0),
    .ce(1'b1),
    .dout(grp_fu_274_p1)
);

honeybee_sitofp_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_sitofp_3fYi_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_277_p0),
    .ce(1'b1),
    .dout(grp_fu_277_p1)
);

honeybee_sitofp_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_sitofp_3fYi_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_280_p0),
    .ce(1'b1),
    .dout(grp_fu_280_p1)
);

honeybee_sitofp_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_sitofp_3fYi_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_283_p0),
    .ce(1'b1),
    .dout(grp_fu_283_p1)
);

honeybee_sitofp_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_sitofp_3fYi_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_286_p0),
    .ce(1'b1),
    .dout(grp_fu_286_p1)
);

honeybee_fcmp_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32ng8j_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(max_2_reg_1590),
    .din1(max_5_reg_1597),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_289_p2)
);

honeybee_fcmp_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32ng8j_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_293_p0),
    .din1(grp_fu_293_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_293_p2)
);

honeybee_fcmp_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32ng8j_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(max_3_reg_1677),
    .din1(grp_fu_297_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_297_p2)
);

honeybee_fcmp_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32ng8j_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(min_reg_1685),
    .din1(min_3_reg_1692),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_301_p2)
);

honeybee_fcmp_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32ng8j_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_305_p0),
    .din1(grp_fu_305_p1),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_305_p2)
);

honeybee_fcmp_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32ng8j_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(min_1_reg_1713),
    .din1(grp_fu_309_p1),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_309_p2)
);

honeybee_fcmp_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32ng8j_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(min_1_reg_1713),
    .din1(grp_fu_313_p1),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_313_p2)
);

honeybee_fcmp_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32ng8j_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(max_reg_1722_pp0_iter24_reg),
    .din1(min_7_reg_1782),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_317_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_fu_380_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter23_state39)) begin
                ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter22;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp0_iter26 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b1) & (icmp_ln76_reg_1421_pp0_iter25_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        collisionCount_2_reg_171 <= select_ln80_fu_1307_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        collisionCount_2_reg_171 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_fu_380_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_127 <= select_ln76_11_fu_430_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i_0_reg_127 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_fu_380_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten85_reg_116 <= add_ln76_fu_386_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        indvar_flatten85_reg_116 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_fu_380_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_138 <= select_ln77_10_fu_478_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        indvar_flatten_reg_138 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_fu_380_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_reg_149 <= select_ln77_7_fu_458_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        j_0_reg_149 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_fu_380_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_0_reg_160 <= k_fu_466_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        k_0_reg_160 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_fu_380_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln76_1_reg_1448 <= add_ln76_1_fu_406_p2;
        and_ln76_reg_1453 <= and_ln76_fu_424_p2;
        icmp_ln77_reg_1430 <= icmp_ln77_fu_392_p2;
        j_reg_1470 <= j_fu_438_p2;
        select_ln77_reg_1475 <= select_ln77_fu_450_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln76_reg_1453_pp0_iter18_reg) & (icmp_ln77_reg_1430_pp0_iter18_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln20_1_reg_1618 <= and_ln20_1_fu_574_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln76_reg_1453_pp0_iter22_reg) & (icmp_ln77_reg_1430_pp0_iter22_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln40_1_reg_1728 <= and_ln40_1_fu_935_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln76_reg_1453_pp0_iter10_reg <= and_ln76_reg_1453_pp0_iter9_reg;
        and_ln76_reg_1453_pp0_iter11_reg <= and_ln76_reg_1453_pp0_iter10_reg;
        and_ln76_reg_1453_pp0_iter12_reg <= and_ln76_reg_1453_pp0_iter11_reg;
        and_ln76_reg_1453_pp0_iter13_reg <= and_ln76_reg_1453_pp0_iter12_reg;
        and_ln76_reg_1453_pp0_iter14_reg <= and_ln76_reg_1453_pp0_iter13_reg;
        and_ln76_reg_1453_pp0_iter15_reg <= and_ln76_reg_1453_pp0_iter14_reg;
        and_ln76_reg_1453_pp0_iter16_reg <= and_ln76_reg_1453_pp0_iter15_reg;
        and_ln76_reg_1453_pp0_iter17_reg <= and_ln76_reg_1453_pp0_iter16_reg;
        and_ln76_reg_1453_pp0_iter18_reg <= and_ln76_reg_1453_pp0_iter17_reg;
        and_ln76_reg_1453_pp0_iter19_reg <= and_ln76_reg_1453_pp0_iter18_reg;
        and_ln76_reg_1453_pp0_iter20_reg <= and_ln76_reg_1453_pp0_iter19_reg;
        and_ln76_reg_1453_pp0_iter21_reg <= and_ln76_reg_1453_pp0_iter20_reg;
        and_ln76_reg_1453_pp0_iter22_reg <= and_ln76_reg_1453_pp0_iter21_reg;
        and_ln76_reg_1453_pp0_iter23_reg <= and_ln76_reg_1453_pp0_iter22_reg;
        and_ln76_reg_1453_pp0_iter2_reg <= and_ln76_reg_1453_pp0_iter1_reg;
        and_ln76_reg_1453_pp0_iter3_reg <= and_ln76_reg_1453_pp0_iter2_reg;
        and_ln76_reg_1453_pp0_iter4_reg <= and_ln76_reg_1453_pp0_iter3_reg;
        and_ln76_reg_1453_pp0_iter5_reg <= and_ln76_reg_1453_pp0_iter4_reg;
        and_ln76_reg_1453_pp0_iter6_reg <= and_ln76_reg_1453_pp0_iter5_reg;
        and_ln76_reg_1453_pp0_iter7_reg <= and_ln76_reg_1453_pp0_iter6_reg;
        and_ln76_reg_1453_pp0_iter8_reg <= and_ln76_reg_1453_pp0_iter7_reg;
        and_ln76_reg_1453_pp0_iter9_reg <= and_ln76_reg_1453_pp0_iter8_reg;
        icmp_ln76_reg_1421_pp0_iter10_reg <= icmp_ln76_reg_1421_pp0_iter9_reg;
        icmp_ln76_reg_1421_pp0_iter11_reg <= icmp_ln76_reg_1421_pp0_iter10_reg;
        icmp_ln76_reg_1421_pp0_iter12_reg <= icmp_ln76_reg_1421_pp0_iter11_reg;
        icmp_ln76_reg_1421_pp0_iter13_reg <= icmp_ln76_reg_1421_pp0_iter12_reg;
        icmp_ln76_reg_1421_pp0_iter14_reg <= icmp_ln76_reg_1421_pp0_iter13_reg;
        icmp_ln76_reg_1421_pp0_iter15_reg <= icmp_ln76_reg_1421_pp0_iter14_reg;
        icmp_ln76_reg_1421_pp0_iter16_reg <= icmp_ln76_reg_1421_pp0_iter15_reg;
        icmp_ln76_reg_1421_pp0_iter17_reg <= icmp_ln76_reg_1421_pp0_iter16_reg;
        icmp_ln76_reg_1421_pp0_iter18_reg <= icmp_ln76_reg_1421_pp0_iter17_reg;
        icmp_ln76_reg_1421_pp0_iter19_reg <= icmp_ln76_reg_1421_pp0_iter18_reg;
        icmp_ln76_reg_1421_pp0_iter20_reg <= icmp_ln76_reg_1421_pp0_iter19_reg;
        icmp_ln76_reg_1421_pp0_iter21_reg <= icmp_ln76_reg_1421_pp0_iter20_reg;
        icmp_ln76_reg_1421_pp0_iter22_reg <= icmp_ln76_reg_1421_pp0_iter21_reg;
        icmp_ln76_reg_1421_pp0_iter23_reg <= icmp_ln76_reg_1421_pp0_iter22_reg;
        icmp_ln76_reg_1421_pp0_iter24_reg <= icmp_ln76_reg_1421_pp0_iter23_reg;
        icmp_ln76_reg_1421_pp0_iter25_reg <= icmp_ln76_reg_1421_pp0_iter24_reg;
        icmp_ln76_reg_1421_pp0_iter2_reg <= icmp_ln76_reg_1421_pp0_iter1_reg;
        icmp_ln76_reg_1421_pp0_iter3_reg <= icmp_ln76_reg_1421_pp0_iter2_reg;
        icmp_ln76_reg_1421_pp0_iter4_reg <= icmp_ln76_reg_1421_pp0_iter3_reg;
        icmp_ln76_reg_1421_pp0_iter5_reg <= icmp_ln76_reg_1421_pp0_iter4_reg;
        icmp_ln76_reg_1421_pp0_iter6_reg <= icmp_ln76_reg_1421_pp0_iter5_reg;
        icmp_ln76_reg_1421_pp0_iter7_reg <= icmp_ln76_reg_1421_pp0_iter6_reg;
        icmp_ln76_reg_1421_pp0_iter8_reg <= icmp_ln76_reg_1421_pp0_iter7_reg;
        icmp_ln76_reg_1421_pp0_iter9_reg <= icmp_ln76_reg_1421_pp0_iter8_reg;
        icmp_ln77_reg_1430_pp0_iter10_reg <= icmp_ln77_reg_1430_pp0_iter9_reg;
        icmp_ln77_reg_1430_pp0_iter11_reg <= icmp_ln77_reg_1430_pp0_iter10_reg;
        icmp_ln77_reg_1430_pp0_iter12_reg <= icmp_ln77_reg_1430_pp0_iter11_reg;
        icmp_ln77_reg_1430_pp0_iter13_reg <= icmp_ln77_reg_1430_pp0_iter12_reg;
        icmp_ln77_reg_1430_pp0_iter14_reg <= icmp_ln77_reg_1430_pp0_iter13_reg;
        icmp_ln77_reg_1430_pp0_iter15_reg <= icmp_ln77_reg_1430_pp0_iter14_reg;
        icmp_ln77_reg_1430_pp0_iter16_reg <= icmp_ln77_reg_1430_pp0_iter15_reg;
        icmp_ln77_reg_1430_pp0_iter17_reg <= icmp_ln77_reg_1430_pp0_iter16_reg;
        icmp_ln77_reg_1430_pp0_iter18_reg <= icmp_ln77_reg_1430_pp0_iter17_reg;
        icmp_ln77_reg_1430_pp0_iter19_reg <= icmp_ln77_reg_1430_pp0_iter18_reg;
        icmp_ln77_reg_1430_pp0_iter20_reg <= icmp_ln77_reg_1430_pp0_iter19_reg;
        icmp_ln77_reg_1430_pp0_iter21_reg <= icmp_ln77_reg_1430_pp0_iter20_reg;
        icmp_ln77_reg_1430_pp0_iter22_reg <= icmp_ln77_reg_1430_pp0_iter21_reg;
        icmp_ln77_reg_1430_pp0_iter23_reg <= icmp_ln77_reg_1430_pp0_iter22_reg;
        icmp_ln77_reg_1430_pp0_iter2_reg <= icmp_ln77_reg_1430_pp0_iter1_reg;
        icmp_ln77_reg_1430_pp0_iter3_reg <= icmp_ln77_reg_1430_pp0_iter2_reg;
        icmp_ln77_reg_1430_pp0_iter4_reg <= icmp_ln77_reg_1430_pp0_iter3_reg;
        icmp_ln77_reg_1430_pp0_iter5_reg <= icmp_ln77_reg_1430_pp0_iter4_reg;
        icmp_ln77_reg_1430_pp0_iter6_reg <= icmp_ln77_reg_1430_pp0_iter5_reg;
        icmp_ln77_reg_1430_pp0_iter7_reg <= icmp_ln77_reg_1430_pp0_iter6_reg;
        icmp_ln77_reg_1430_pp0_iter8_reg <= icmp_ln77_reg_1430_pp0_iter7_reg;
        icmp_ln77_reg_1430_pp0_iter9_reg <= icmp_ln77_reg_1430_pp0_iter8_reg;
        max_2_reg_1590_pp0_iter18_reg <= max_2_reg_1590;
        max_3_reg_1677_pp0_iter21_reg <= max_3_reg_1677;
        max_5_reg_1597_pp0_iter18_reg <= max_5_reg_1597;
        max_reg_1722_pp0_iter23_reg <= max_reg_1722;
        max_reg_1722_pp0_iter24_reg <= max_reg_1722_pp0_iter23_reg;
        min_1_reg_1713_pp0_iter23_reg <= min_1_reg_1713;
        min_3_reg_1692 <= grp_fu_258_p2;
        min_3_reg_1692_pp0_iter22_reg <= min_3_reg_1692;
        min_reg_1685 <= grp_fu_254_p2;
        min_reg_1685_pp0_iter22_reg <= min_reg_1685;
        obs_x_reg_1510 <= grp_fu_274_p1;
        obs_y_reg_1515 <= grp_fu_277_p1;
        or_ln20_4_reg_1645_pp0_iter20_reg <= or_ln20_4_reg_1645;
        or_ln20_4_reg_1645_pp0_iter21_reg <= or_ln20_4_reg_1645_pp0_iter20_reg;
        or_ln25_reg_1667_pp0_iter20_reg <= or_ln25_reg_1667;
        or_ln25_reg_1667_pp0_iter21_reg <= or_ln25_reg_1667_pp0_iter20_reg;
        select_ln76_2_reg_1623_pp0_iter20_reg <= select_ln76_2_reg_1623;
        select_ln76_2_reg_1623_pp0_iter21_reg <= select_ln76_2_reg_1623_pp0_iter20_reg;
        select_ln77_4_reg_1651_pp0_iter20_reg <= select_ln77_4_reg_1651;
        select_ln77_4_reg_1651_pp0_iter21_reg <= select_ln77_4_reg_1651_pp0_iter20_reg;
        select_ln77_6_reg_1672_pp0_iter21_reg <= select_ln77_6_reg_1672;
        tmp_i2_i_reg_1570 <= grp_fu_214_p2;
        tmp_i5_i_reg_1559_pp0_iter10_reg <= tmp_i5_i_reg_1559_pp0_iter9_reg;
        tmp_i5_i_reg_1559_pp0_iter9_reg <= tmp_i5_i_reg_1559;
        tmp_i_i_4_reg_1565 <= grp_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln76_reg_1453_pp0_iter1_reg <= and_ln76_reg_1453;
        icmp_ln76_reg_1421 <= icmp_ln76_fu_380_p2;
        icmp_ln76_reg_1421_pp0_iter1_reg <= icmp_ln76_reg_1421;
        icmp_ln77_reg_1430_pp0_iter1_reg <= icmp_ln77_reg_1430;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bitcast_ln14_1_reg_1332 <= bitcast_ln14_1_fu_338_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        bitcast_ln20_2_reg_1400 <= bitcast_ln20_2_fu_356_p1;
        bitcast_ln40_2_reg_1383 <= bitcast_ln40_2_fu_342_p1;
        icmp_ln20_4_reg_1405 <= icmp_ln20_4_fu_364_p2;
        icmp_ln40_4_reg_1388 <= icmp_ln40_4_fu_350_p2;
        tmp_1_i_i_reg_1369 <= grp_fu_183_p2;
        y_assign_1_mid_reg_1394 <= grp_fu_238_p2;
        y_assign_mid_reg_1377 <= grp_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_reg_1421_pp0_iter18_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln20_10_reg_1662 <= icmp_ln20_10_fu_696_p2;
        icmp_ln20_5_reg_1630 <= icmp_ln20_5_fu_593_p2;
        or_ln20_4_reg_1645 <= or_ln20_4_fu_661_p2;
        or_ln25_reg_1667 <= or_ln25_fu_729_p2;
        select_ln76_2_reg_1623 <= select_ln76_2_fu_580_p3;
        select_ln77_4_reg_1651 <= select_ln77_4_fu_667_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_reg_1430_pp0_iter18_reg == 1'd1) & (1'd0 == and_ln76_reg_1453_pp0_iter18_reg) & (icmp_ln76_reg_1421_pp0_iter18_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln20_6_reg_1635 <= icmp_ln20_6_fu_630_p2;
        icmp_ln20_7_reg_1640 <= icmp_ln20_7_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln76_reg_1453_pp0_iter18_reg) & (icmp_ln76_reg_1421_pp0_iter18_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln20_9_reg_1657 <= icmp_ln20_9_fu_690_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_reg_1421_pp0_iter22_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln40_10_reg_1772 <= icmp_ln40_10_fu_1059_p2;
        icmp_ln40_5_reg_1740 <= icmp_ln40_5_fu_955_p2;
        or_ln40_4_reg_1755 <= or_ln40_4_fu_1023_p2;
        or_ln45_reg_1777 <= or_ln45_fu_1092_p2;
        select_ln76_1_reg_1733 <= select_ln76_1_fu_941_p3;
        select_ln77_1_reg_1761 <= select_ln77_1_fu_1029_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_reg_1430_pp0_iter22_reg == 1'd1) & (1'd0 == and_ln76_reg_1453_pp0_iter22_reg) & (icmp_ln76_reg_1421_pp0_iter22_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln40_6_reg_1745 <= icmp_ln40_6_fu_992_p2;
        icmp_ln40_7_reg_1750 <= icmp_ln40_7_fu_998_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln76_reg_1453_pp0_iter22_reg) & (icmp_ln76_reg_1421_pp0_iter22_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln40_9_reg_1767 <= icmp_ln40_9_fu_1053_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_reg_1421_pp0_iter24_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln70_1_reg_1793 <= icmp_ln70_1_fu_1263_p2;
        icmp_ln70_2_reg_1798 <= icmp_ln70_2_fu_1269_p2;
        icmp_ln70_3_reg_1803 <= icmp_ln70_3_fu_1275_p2;
        icmp_ln70_reg_1788 <= icmp_ln70_fu_1257_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_2_reg_1590 <= grp_fu_234_p2;
        max_5_reg_1597 <= grp_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_reg_1421_pp0_iter19_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_3_reg_1677 <= grp_fu_250_p2;
        select_ln77_6_reg_1672 <= select_ln77_6_fu_776_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_reg_1421_pp0_iter21_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_reg_1722 <= max_fu_852_p3;
        min_1_reg_1713 <= grp_fu_270_p2;
        x_assign_mid1_reg_1699 <= grp_fu_262_p2;
        y_assign_mid1_reg_1706 <= grp_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_reg_1421_pp0_iter23_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        min_7_reg_1782 <= min_7_fu_1215_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_reg_1421_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        obs_x_mid1_reg_1520 <= grp_fu_280_p1;
        obs_y_mid1_reg_1525 <= grp_fu_283_p1;
        obs_z_reg_1530 <= grp_fu_286_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_321 <= grp_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_1_i3_i_reg_1338 <= grp_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_reg_1421_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_i1_i_mid1_reg_1553 <= grp_fu_201_p2;
        tmp_i5_i_reg_1559 <= grp_fu_205_p2;
        tmp_i_i_mid1_reg_1547 <= grp_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_i1_i_reg_1541 <= grp_fu_188_p2;
        tmp_i_i_reg_1535 <= grp_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_reg_1421_pp0_iter11_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_i2_i_mid1_reg_1580 <= grp_fu_224_p2;
        tmp_i6_i_reg_1585 <= grp_fu_229_p2;
        tmp_i_i_mid1_5_reg_1575 <= grp_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_reg_1421_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_assign_1_mid1_reg_1604 <= grp_fu_242_p2;
        y_assign_1_mid1_reg_1611 <= grp_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        xor_ln14_reg_1322 <= xor_ln14_fu_332_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (ap_enable_reg_pp0_iter22 == 1'b0))) begin
        ap_condition_pp0_exit_iter23_state39 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter23_state39 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        grp_fu_183_p0 = obs_x_reg_1510;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_183_p0 = edge_p2_x;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_183_p0 = edge_p2_y;
    end else begin
        grp_fu_183_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        grp_fu_183_p1 = edge_p1_x;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_183_p1 = edge_p1_y;
    end else begin
        grp_fu_183_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_00001)))) begin
        grp_fu_188_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_188_opcode = 2'd0;
    end else begin
        grp_fu_188_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        grp_fu_188_p0 = obs_y_reg_1515;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_188_p0 = edge_p2_z;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_188_p0 = bitcast_ln14_1_fu_338_p1;
    end else begin
        grp_fu_188_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        grp_fu_188_p1 = edge_p1_y;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_188_p1 = edge_p1_z;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_188_p1 = 32'd1065353216;
    end else begin
        grp_fu_188_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        grp_fu_234_p0 = tmp_i_i_reg_1535;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_234_p0 = reg_321;
    end else begin
        grp_fu_234_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        grp_fu_234_p1 = tmp_1_i_i_reg_1369;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_234_p1 = tmp_1_i3_i_reg_1338;
    end else begin
        grp_fu_234_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        grp_fu_238_p0 = tmp_i1_i_reg_1541;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_238_p0 = bitcast_ln14_1_reg_1332;
    end else begin
        grp_fu_238_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1688)) begin
        if ((1'd1 == and_ln76_reg_1453_pp0_iter18_reg)) begin
            grp_fu_293_p0 = select_ln76_2_fu_580_p3;
        end else if (((icmp_ln77_reg_1430_pp0_iter18_reg == 1'd1) & (1'd0 == and_ln76_reg_1453_pp0_iter18_reg))) begin
            grp_fu_293_p0 = x_assign_1_mid1_reg_1604;
        end else begin
            grp_fu_293_p0 = 'bx;
        end
    end else begin
        grp_fu_293_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1688)) begin
        if ((1'd1 == and_ln76_reg_1453_pp0_iter18_reg)) begin
            grp_fu_293_p1 = y_assign_1_mid1_reg_1611;
        end else if (((icmp_ln77_reg_1430_pp0_iter18_reg == 1'd1) & (1'd0 == and_ln76_reg_1453_pp0_iter18_reg))) begin
            grp_fu_293_p1 = y_assign_1_mid_reg_1394;
        end else begin
            grp_fu_293_p1 = 'bx;
        end
    end else begin
        grp_fu_293_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1692)) begin
        if ((select_ln77_6_reg_1672 == 1'd0)) begin
            grp_fu_297_p1 = select_ln77_4_reg_1651_pp0_iter20_reg;
        end else if ((select_ln77_6_reg_1672 == 1'd1)) begin
            grp_fu_297_p1 = select_ln76_2_reg_1623_pp0_iter20_reg;
        end else begin
            grp_fu_297_p1 = 'bx;
        end
    end else begin
        grp_fu_297_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1696)) begin
        if ((1'd1 == and_ln76_reg_1453_pp0_iter22_reg)) begin
            grp_fu_305_p0 = select_ln76_1_fu_941_p3;
        end else if (((icmp_ln77_reg_1430_pp0_iter22_reg == 1'd1) & (1'd0 == and_ln76_reg_1453_pp0_iter22_reg))) begin
            grp_fu_305_p0 = x_assign_mid1_reg_1699;
        end else begin
            grp_fu_305_p0 = 'bx;
        end
    end else begin
        grp_fu_305_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1696)) begin
        if ((1'd1 == and_ln76_reg_1453_pp0_iter22_reg)) begin
            grp_fu_305_p1 = y_assign_mid1_reg_1706;
        end else if (((icmp_ln77_reg_1430_pp0_iter22_reg == 1'd1) & (1'd0 == and_ln76_reg_1453_pp0_iter22_reg))) begin
            grp_fu_305_p1 = y_assign_mid_reg_1377;
        end else begin
            grp_fu_305_p1 = 'bx;
        end
    end else begin
        grp_fu_305_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter23 == 1'b1)) & ~((ap_enable_reg_pp0_iter25 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter26 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter23 == 1'b1)) | ((ap_enable_reg_pp0_iter25 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter26 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln76_1_fu_406_p2 = (3'd1 + i_0_reg_127);

assign add_ln76_fu_386_p2 = (7'd1 + indvar_flatten85_reg_116);

assign add_ln77_fu_472_p2 = (6'd1 + indvar_flatten_reg_138);

assign and_ln20_1_fu_574_p2 = (grp_fu_289_p2 & and_ln20_fu_568_p2);

assign and_ln20_2_fu_743_p2 = (or_ln20_3_fu_739_p2 & or_ln20_2_fu_735_p2);

assign and_ln20_3_fu_749_p2 = (grp_fu_293_p2 & and_ln20_2_fu_743_p2);

assign and_ln20_4_fu_765_p2 = (or_ln20_5_fu_761_p2 & or_ln20_4_reg_1645);

assign and_ln20_5_fu_770_p2 = (grp_fu_293_p2 & and_ln20_4_fu_765_p2);

assign and_ln20_fu_568_p2 = (or_ln20_fu_544_p2 & or_ln20_1_fu_562_p2);

assign and_ln22_1_fu_823_p2 = (grp_fu_297_p2 & and_ln22_fu_818_p2);

assign and_ln22_fu_818_p2 = (or_ln22_fu_812_p2 & or_ln20_4_reg_1645_pp0_iter21_reg);

assign and_ln25_1_fu_840_p2 = (grp_fu_297_p2 & and_ln25_fu_835_p2);

assign and_ln25_fu_835_p2 = (or_ln25_reg_1667_pp0_iter21_reg & or_ln22_fu_812_p2);

assign and_ln40_1_fu_935_p2 = (grp_fu_301_p2 & and_ln40_fu_929_p2);

assign and_ln40_2_fu_1106_p2 = (or_ln40_3_fu_1102_p2 & or_ln40_2_fu_1098_p2);

assign and_ln40_3_fu_1112_p2 = (grp_fu_305_p2 & and_ln40_2_fu_1106_p2);

assign and_ln40_4_fu_1128_p2 = (or_ln40_5_fu_1124_p2 & or_ln40_4_reg_1755);

assign and_ln40_5_fu_1133_p2 = (grp_fu_305_p2 & and_ln40_4_fu_1128_p2);

assign and_ln40_fu_929_p2 = (or_ln40_fu_905_p2 & or_ln40_1_fu_923_p2);

assign and_ln42_1_fu_1186_p2 = (grp_fu_309_p2 & and_ln42_fu_1181_p2);

assign and_ln42_fu_1181_p2 = (or_ln42_fu_1175_p2 & or_ln40_4_reg_1755);

assign and_ln45_1_fu_1203_p2 = (grp_fu_313_p2 & and_ln45_fu_1198_p2);

assign and_ln45_fu_1198_p2 = (or_ln45_reg_1777 & or_ln42_fu_1175_p2);

assign and_ln70_1_fu_1295_p2 = (grp_fu_317_p2 & and_ln70_fu_1289_p2);

assign and_ln70_fu_1289_p2 = (or_ln70_fu_1281_p2 & or_ln70_1_fu_1285_p2);

assign and_ln76_fu_424_p2 = (xor_ln76_fu_412_p2 & icmp_ln78_fu_418_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1688 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter19 == 1'b1) & (icmp_ln76_reg_1421_pp0_iter18_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1692 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter21 == 1'b1) & (icmp_ln76_reg_1421_pp0_iter20_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1696 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter23 == 1'b1) & (icmp_ln76_reg_1421_pp0_iter22_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = collisionCount_2_reg_171;

assign bitcast_ln14_1_fu_338_p1 = xor_ln14_reg_1322;

assign bitcast_ln14_fu_328_p1 = edge_p1_y;

assign bitcast_ln20_1_fu_521_p1 = max_5_reg_1597_pp0_iter18_reg;

assign bitcast_ln20_2_fu_356_p1 = grp_fu_238_p2;

assign bitcast_ln20_3_fu_586_p1 = x_assign_1_mid1_reg_1604;

assign bitcast_ln20_4_fu_673_p1 = y_assign_1_mid1_reg_1611;

assign bitcast_ln20_fu_498_p1 = max_2_reg_1590_pp0_iter18_reg;

assign bitcast_ln22_fu_783_p1 = max_3_reg_1677_pp0_iter21_reg;

assign bitcast_ln40_1_fu_882_p1 = min_3_reg_1692_pp0_iter22_reg;

assign bitcast_ln40_2_fu_342_p1 = grp_fu_234_p2;

assign bitcast_ln40_3_fu_948_p1 = x_assign_mid1_reg_1699;

assign bitcast_ln40_4_fu_1036_p1 = y_assign_mid1_reg_1706;

assign bitcast_ln40_fu_859_p1 = min_reg_1685_pp0_iter22_reg;

assign bitcast_ln42_fu_1146_p1 = min_1_reg_1713_pp0_iter23_reg;

assign bitcast_ln70_1_fu_1240_p1 = min_7_reg_1782;

assign bitcast_ln70_fu_1223_p1 = max_reg_1722_pp0_iter24_reg;

assign collisionCount_fu_1301_p2 = (32'd1 + collisionCount_2_reg_171);

assign grp_fu_274_p0 = i_0_reg_127;

assign grp_fu_277_p0 = j_0_reg_149;

assign grp_fu_280_p0 = add_ln76_1_reg_1448;

assign grp_fu_283_p0 = j_reg_1470;

assign grp_fu_286_p0 = select_ln77_reg_1475;

assign grp_fu_309_p1 = ((icmp_ln77_reg_1430_pp0_iter22_reg[0:0] === 1'b1) ? x_assign_mid1_reg_1699 : min_reg_1685_pp0_iter22_reg);

assign grp_fu_313_p1 = ((and_ln76_reg_1453_pp0_iter22_reg[0:0] === 1'b1) ? y_assign_mid1_reg_1706 : select_ln76_5_fu_968_p3);

assign icmp_ln20_10_fu_696_p2 = ((trunc_ln20_4_fu_686_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_505_p2 = ((trunc_ln20_1_fu_501_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_2_fu_550_p2 = ((tmp_7_fu_524_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln20_3_fu_556_p2 = ((trunc_ln20_2_fu_534_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_4_fu_364_p2 = ((trunc_ln20_fu_360_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_5_fu_593_p2 = ((trunc_ln20_3_fu_589_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_6_fu_630_p2 = ((tmp_6_mid_fu_611_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln20_7_fu_636_p2 = ((tmp_7_mid_fu_621_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln20_8_fu_655_p2 = ((select_ln76_13_fu_648_p3 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln20_9_fu_690_p2 = ((tmp_7_mid1_fu_676_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_538_p2 = ((tmp_6_fu_511_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_1_fu_806_p2 = ((trunc_ln22_fu_796_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_800_p2 = ((tmp_10_fu_786_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_723_p2 = ((select_ln77_9_fu_716_p3 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln40_10_fu_1059_p2 = ((trunc_ln40_4_fu_1049_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_1_fu_866_p2 = ((trunc_ln40_1_fu_862_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_2_fu_911_p2 = ((tmp_4_fu_885_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln40_3_fu_917_p2 = ((trunc_ln40_2_fu_895_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_4_fu_350_p2 = ((trunc_ln40_fu_346_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_5_fu_955_p2 = ((trunc_ln40_3_fu_951_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_6_fu_992_p2 = ((tmp_3_mid_fu_973_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln40_7_fu_998_p2 = ((tmp_4_mid_fu_983_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln40_8_fu_1017_p2 = ((select_ln76_12_fu_1010_p3 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln40_9_fu_1053_p2 = ((tmp_4_mid1_fu_1039_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_899_p2 = ((tmp_3_fu_872_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln42_1_fu_1169_p2 = ((trunc_ln42_fu_1159_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_1163_p2 = ((tmp_9_fu_1149_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_1086_p2 = ((select_ln77_8_fu_1079_p3 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln70_1_fu_1263_p2 = ((trunc_ln70_fu_1236_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln70_2_fu_1269_p2 = ((tmp_14_fu_1243_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln70_3_fu_1275_p2 = ((trunc_ln70_1_fu_1253_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_1257_p2 = ((tmp_13_fu_1226_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_380_p2 = ((indvar_flatten85_reg_116 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_392_p2 = ((indvar_flatten_reg_138 == 6'd16) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_418_p2 = ((k_0_reg_160 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_438_p2 = (3'd1 + select_ln76_fu_398_p3);

assign k_fu_466_p2 = (3'd1 + select_ln77_fu_450_p3);

assign max_4_fu_829_p3 = ((and_ln22_1_fu_823_p2[0:0] === 1'b1) ? max_3_reg_1677_pp0_iter21_reg : select_ln76_2_reg_1623_pp0_iter21_reg);

assign max_6_fu_846_p3 = ((and_ln25_1_fu_840_p2[0:0] === 1'b1) ? max_3_reg_1677_pp0_iter21_reg : select_ln77_4_reg_1651_pp0_iter21_reg);

assign max_fu_852_p3 = ((select_ln77_6_reg_1672_pp0_iter21_reg[0:0] === 1'b1) ? max_4_fu_829_p3 : max_6_fu_846_p3);

assign min_2_fu_1192_p3 = ((and_ln42_1_fu_1186_p2[0:0] === 1'b1) ? min_1_reg_1713_pp0_iter23_reg : select_ln76_1_reg_1733);

assign min_4_fu_1209_p3 = ((and_ln45_1_fu_1203_p2[0:0] === 1'b1) ? min_1_reg_1713_pp0_iter23_reg : select_ln77_1_reg_1761);

assign min_7_fu_1215_p3 = ((select_ln77_3_fu_1139_p3[0:0] === 1'b1) ? min_2_fu_1192_p3 : min_4_fu_1209_p3);

assign or_ln20_1_fu_562_p2 = (icmp_ln20_3_fu_556_p2 | icmp_ln20_2_fu_550_p2);

assign or_ln20_2_fu_735_p2 = (icmp_ln20_6_reg_1635 | icmp_ln20_5_reg_1630);

assign or_ln20_3_fu_739_p2 = (icmp_ln20_7_reg_1640 | icmp_ln20_4_reg_1405);

assign or_ln20_4_fu_661_p2 = (select_ln76_4_fu_599_p3 | icmp_ln20_8_fu_655_p2);

assign or_ln20_5_fu_761_p2 = (icmp_ln20_9_reg_1657 | icmp_ln20_10_reg_1662);

assign or_ln20_fu_544_p2 = (icmp_ln20_fu_538_p2 | icmp_ln20_1_fu_505_p2);

assign or_ln22_fu_812_p2 = (icmp_ln22_fu_800_p2 | icmp_ln22_1_fu_806_p2);

assign or_ln25_fu_729_p2 = (select_ln77_5_fu_702_p3 | icmp_ln25_fu_723_p2);

assign or_ln40_1_fu_923_p2 = (icmp_ln40_3_fu_917_p2 | icmp_ln40_2_fu_911_p2);

assign or_ln40_2_fu_1098_p2 = (icmp_ln40_6_reg_1745 | icmp_ln40_5_reg_1740);

assign or_ln40_3_fu_1102_p2 = (icmp_ln40_7_reg_1750 | icmp_ln40_4_reg_1388);

assign or_ln40_4_fu_1023_p2 = (select_ln76_3_fu_961_p3 | icmp_ln40_8_fu_1017_p2);

assign or_ln40_5_fu_1124_p2 = (icmp_ln40_9_reg_1767 | icmp_ln40_10_reg_1772);

assign or_ln40_fu_905_p2 = (icmp_ln40_fu_899_p2 | icmp_ln40_1_fu_866_p2);

assign or_ln42_fu_1175_p2 = (icmp_ln42_fu_1163_p2 | icmp_ln42_1_fu_1169_p2);

assign or_ln45_fu_1092_p2 = (select_ln77_2_fu_1065_p3 | icmp_ln45_fu_1086_p2);

assign or_ln70_1_fu_1285_p2 = (icmp_ln70_3_reg_1803 | icmp_ln70_2_reg_1798);

assign or_ln70_fu_1281_p2 = (icmp_ln70_reg_1788 | icmp_ln70_1_reg_1793);

assign or_ln77_fu_444_p2 = (icmp_ln77_fu_392_p2 | and_ln76_fu_424_p2);

assign select_ln76_10_fu_755_p3 = ((icmp_ln77_reg_1430_pp0_iter19_reg[0:0] === 1'b1) ? and_ln20_3_fu_749_p2 : and_ln20_1_reg_1618);

assign select_ln76_11_fu_430_p3 = ((icmp_ln77_fu_392_p2[0:0] === 1'b1) ? add_ln76_1_fu_406_p2 : i_0_reg_127);

assign select_ln76_12_fu_1010_p3 = ((icmp_ln77_reg_1430_pp0_iter22_reg[0:0] === 1'b1) ? tmp_3_mid_fu_973_p4 : tmp_3_fu_872_p4);

assign select_ln76_13_fu_648_p3 = ((icmp_ln77_reg_1430_pp0_iter18_reg[0:0] === 1'b1) ? tmp_6_mid_fu_611_p4 : tmp_6_fu_511_p4);

assign select_ln76_14_fu_1072_p3 = ((icmp_ln77_reg_1430_pp0_iter22_reg[0:0] === 1'b1) ? tmp_4_mid_fu_983_p4 : tmp_4_fu_885_p4);

assign select_ln76_15_fu_709_p3 = ((icmp_ln77_reg_1430_pp0_iter18_reg[0:0] === 1'b1) ? tmp_7_mid_fu_621_p4 : tmp_7_fu_524_p4);

assign select_ln76_1_fu_941_p3 = ((icmp_ln77_reg_1430_pp0_iter22_reg[0:0] === 1'b1) ? x_assign_mid1_reg_1699 : min_reg_1685_pp0_iter22_reg);

assign select_ln76_2_fu_580_p3 = ((icmp_ln77_reg_1430_pp0_iter18_reg[0:0] === 1'b1) ? x_assign_1_mid1_reg_1604 : max_2_reg_1590_pp0_iter18_reg);

assign select_ln76_3_fu_961_p3 = ((icmp_ln77_reg_1430_pp0_iter22_reg[0:0] === 1'b1) ? icmp_ln40_5_fu_955_p2 : icmp_ln40_1_fu_866_p2);

assign select_ln76_4_fu_599_p3 = ((icmp_ln77_reg_1430_pp0_iter18_reg[0:0] === 1'b1) ? icmp_ln20_5_fu_593_p2 : icmp_ln20_1_fu_505_p2);

assign select_ln76_5_fu_968_p3 = ((icmp_ln77_reg_1430_pp0_iter22_reg[0:0] === 1'b1) ? y_assign_mid_reg_1377 : min_3_reg_1692_pp0_iter22_reg);

assign select_ln76_6_fu_1004_p3 = ((icmp_ln77_reg_1430_pp0_iter22_reg[0:0] === 1'b1) ? icmp_ln40_4_reg_1388 : icmp_ln40_3_fu_917_p2);

assign select_ln76_7_fu_1118_p3 = ((icmp_ln77_reg_1430_pp0_iter23_reg[0:0] === 1'b1) ? and_ln40_3_fu_1112_p2 : and_ln40_1_reg_1728);

assign select_ln76_8_fu_606_p3 = ((icmp_ln77_reg_1430_pp0_iter18_reg[0:0] === 1'b1) ? y_assign_1_mid_reg_1394 : max_5_reg_1597_pp0_iter18_reg);

assign select_ln76_9_fu_642_p3 = ((icmp_ln77_reg_1430_pp0_iter18_reg[0:0] === 1'b1) ? icmp_ln20_4_reg_1405 : icmp_ln20_3_fu_556_p2);

assign select_ln76_fu_398_p3 = ((icmp_ln77_fu_392_p2[0:0] === 1'b1) ? 3'd0 : j_0_reg_149);

assign select_ln77_10_fu_478_p3 = ((icmp_ln77_fu_392_p2[0:0] === 1'b1) ? 6'd1 : add_ln77_fu_472_p2);

assign select_ln77_1_fu_1029_p3 = ((and_ln76_reg_1453_pp0_iter22_reg[0:0] === 1'b1) ? y_assign_mid1_reg_1706 : select_ln76_5_fu_968_p3);

assign select_ln77_2_fu_1065_p3 = ((and_ln76_reg_1453_pp0_iter22_reg[0:0] === 1'b1) ? icmp_ln40_10_fu_1059_p2 : select_ln76_6_fu_1004_p3);

assign select_ln77_3_fu_1139_p3 = ((and_ln76_reg_1453_pp0_iter23_reg[0:0] === 1'b1) ? and_ln40_5_fu_1133_p2 : select_ln76_7_fu_1118_p3);

assign select_ln77_4_fu_667_p3 = ((and_ln76_reg_1453_pp0_iter18_reg[0:0] === 1'b1) ? y_assign_1_mid1_reg_1611 : select_ln76_8_fu_606_p3);

assign select_ln77_5_fu_702_p3 = ((and_ln76_reg_1453_pp0_iter18_reg[0:0] === 1'b1) ? icmp_ln20_10_fu_696_p2 : select_ln76_9_fu_642_p3);

assign select_ln77_6_fu_776_p3 = ((and_ln76_reg_1453_pp0_iter19_reg[0:0] === 1'b1) ? and_ln20_5_fu_770_p2 : select_ln76_10_fu_755_p3);

assign select_ln77_7_fu_458_p3 = ((and_ln76_fu_424_p2[0:0] === 1'b1) ? j_fu_438_p2 : select_ln76_fu_398_p3);

assign select_ln77_8_fu_1079_p3 = ((and_ln76_reg_1453_pp0_iter22_reg[0:0] === 1'b1) ? tmp_4_mid1_fu_1039_p4 : select_ln76_14_fu_1072_p3);

assign select_ln77_9_fu_716_p3 = ((and_ln76_reg_1453_pp0_iter18_reg[0:0] === 1'b1) ? tmp_7_mid1_fu_676_p4 : select_ln76_15_fu_709_p3);

assign select_ln77_fu_450_p3 = ((or_ln77_fu_444_p2[0:0] === 1'b1) ? 3'd0 : k_0_reg_160);

assign select_ln80_fu_1307_p3 = ((and_ln70_1_fu_1295_p2[0:0] === 1'b1) ? collisionCount_fu_1301_p2 : collisionCount_2_reg_171);

assign tmp_10_fu_786_p4 = {{bitcast_ln22_fu_783_p1[30:23]}};

assign tmp_13_fu_1226_p4 = {{bitcast_ln70_fu_1223_p1[30:23]}};

assign tmp_14_fu_1243_p4 = {{bitcast_ln70_1_fu_1240_p1[30:23]}};

assign tmp_3_fu_872_p4 = {{bitcast_ln40_fu_859_p1[30:23]}};

assign tmp_3_mid_fu_973_p4 = {{bitcast_ln40_3_fu_948_p1[30:23]}};

assign tmp_4_fu_885_p4 = {{bitcast_ln40_1_fu_882_p1[30:23]}};

assign tmp_4_mid1_fu_1039_p4 = {{bitcast_ln40_4_fu_1036_p1[30:23]}};

assign tmp_4_mid_fu_983_p4 = {{bitcast_ln40_2_reg_1383[30:23]}};

assign tmp_6_fu_511_p4 = {{bitcast_ln20_fu_498_p1[30:23]}};

assign tmp_6_mid_fu_611_p4 = {{bitcast_ln20_3_fu_586_p1[30:23]}};

assign tmp_7_fu_524_p4 = {{bitcast_ln20_1_fu_521_p1[30:23]}};

assign tmp_7_mid1_fu_676_p4 = {{bitcast_ln20_4_fu_673_p1[30:23]}};

assign tmp_7_mid_fu_621_p4 = {{bitcast_ln20_2_reg_1400[30:23]}};

assign tmp_9_fu_1149_p4 = {{bitcast_ln42_fu_1146_p1[30:23]}};

assign trunc_ln20_1_fu_501_p1 = bitcast_ln20_fu_498_p1[22:0];

assign trunc_ln20_2_fu_534_p1 = bitcast_ln20_1_fu_521_p1[22:0];

assign trunc_ln20_3_fu_589_p1 = bitcast_ln20_3_fu_586_p1[22:0];

assign trunc_ln20_4_fu_686_p1 = bitcast_ln20_4_fu_673_p1[22:0];

assign trunc_ln20_fu_360_p1 = bitcast_ln20_2_fu_356_p1[22:0];

assign trunc_ln22_fu_796_p1 = bitcast_ln22_fu_783_p1[22:0];

assign trunc_ln40_1_fu_862_p1 = bitcast_ln40_fu_859_p1[22:0];

assign trunc_ln40_2_fu_895_p1 = bitcast_ln40_1_fu_882_p1[22:0];

assign trunc_ln40_3_fu_951_p1 = bitcast_ln40_3_fu_948_p1[22:0];

assign trunc_ln40_4_fu_1049_p1 = bitcast_ln40_4_fu_1036_p1[22:0];

assign trunc_ln40_fu_346_p1 = bitcast_ln40_2_fu_342_p1[22:0];

assign trunc_ln42_fu_1159_p1 = bitcast_ln42_fu_1146_p1[22:0];

assign trunc_ln70_1_fu_1253_p1 = bitcast_ln70_1_fu_1240_p1[22:0];

assign trunc_ln70_fu_1236_p1 = bitcast_ln70_fu_1223_p1[22:0];

assign xor_ln14_fu_332_p2 = (bitcast_ln14_fu_328_p1 ^ 32'd2147483648);

assign xor_ln76_fu_412_p2 = (icmp_ln77_fu_392_p2 ^ 1'd1);

endmodule //honeybee
