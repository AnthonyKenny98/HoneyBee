-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity honeybee is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of honeybee is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "honeybee,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.921200,HLS_SYN_LAT=2107,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=34,HLS_SYN_FF=6086,HLS_SYN_LUT=13606,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln152_fu_177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_fu_188_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_320 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_fu_194_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_reg_325 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grid_z_reg_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln153_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_fu_211_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_343 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln161_fu_217_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln161_reg_348 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grid_y_reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln154_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_fu_234_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_366 : STD_LOGIC_VECTOR (1 downto 0);
    signal grid_x_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln161_1_fu_264_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_segmentIntersectsGri_fu_153_ap_ready : STD_LOGIC;
    signal grp_segmentIntersectsGri_fu_153_ap_done : STD_LOGIC;
    signal grp_segmentIntersectsGri_fu_153_ap_start : STD_LOGIC;
    signal grp_segmentIntersectsGri_fu_153_ap_idle : STD_LOGIC;
    signal grp_segmentIntersectsGri_fu_153_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal k_0_reg_86 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln153_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_0_reg_97 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_109 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln154_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_1_reg_120 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_131 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_2_reg_142 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_segmentIntersectsGri_fu_153_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal collisions_1_fu_46 : STD_LOGIC_VECTOR (7 downto 0);
    signal collisions_fu_258_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln152_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_166_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln154_1_fu_240_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln159_fu_244_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln158_fu_250_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component segmentIntersectsGri IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
        grid_x : IN STD_LOGIC_VECTOR (31 downto 0);
        grid_y : IN STD_LOGIC_VECTOR (31 downto 0);
        grid_z : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component honeybee_sitofp_3hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_segmentIntersectsGri_fu_153 : component segmentIntersectsGri
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_segmentIntersectsGri_fu_153_ap_start,
        ap_done => grp_segmentIntersectsGri_fu_153_ap_done,
        ap_idle => grp_segmentIntersectsGri_fu_153_ap_idle,
        ap_ready => grp_segmentIntersectsGri_fu_153_ap_ready,
        edge_p1_x => edge_p1_x,
        edge_p1_y => edge_p1_y,
        edge_p1_z => edge_p1_z,
        edge_p2_x => edge_p2_x,
        edge_p2_y => edge_p2_y,
        edge_p2_z => edge_p2_z,
        grid_x => grid_x_reg_371,
        grid_y => grid_y_reg_353,
        grid_z => grid_z_reg_330,
        ap_return => grp_segmentIntersectsGri_fu_153_ap_return);

    honeybee_sitofp_3hbi_U56 : component honeybee_sitofp_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_166_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_segmentIntersectsGri_fu_153_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_segmentIntersectsGri_fu_153_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    grp_segmentIntersectsGri_fu_153_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_segmentIntersectsGri_fu_153_ap_ready = ap_const_logic_1)) then 
                    grp_segmentIntersectsGri_fu_153_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    b_0_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln153_fu_205_p2 = ap_const_lv1_1))) then 
                b_0_reg_97 <= b_reg_325;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                b_0_reg_97 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    b_1_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln154_fu_228_p2 = ap_const_lv1_1))) then 
                b_1_reg_120 <= add_ln161_reg_348;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                b_1_reg_120 <= b_0_reg_97;
            end if; 
        end if;
    end process;

    b_2_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_segmentIntersectsGri_fu_153_ap_done = ap_const_logic_1))) then 
                b_2_reg_142 <= add_ln161_1_fu_264_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                b_2_reg_142 <= b_1_reg_120;
            end if; 
        end if;
    end process;

    collisions_1_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_segmentIntersectsGri_fu_153_ap_done = ap_const_logic_1))) then 
                collisions_1_fu_46 <= collisions_fu_258_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                collisions_1_fu_46 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_0_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_segmentIntersectsGri_fu_153_ap_done = ap_const_logic_1))) then 
                i_0_reg_131 <= i_reg_366;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_0_reg_131 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln154_fu_228_p2 = ap_const_lv1_1))) then 
                j_0_reg_109 <= j_reg_343;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_0_reg_109 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_0_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln153_fu_205_p2 = ap_const_lv1_1))) then 
                k_0_reg_86 <= k_reg_320;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_0_reg_86 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln161_reg_348 <= add_ln161_fu_217_p2;
                grid_y_reg_353 <= grp_fu_166_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                b_reg_325 <= b_fu_194_p2;
                grid_z_reg_330 <= grp_fu_166_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                grid_x_reg_371 <= grp_fu_166_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_reg_366 <= i_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_reg_343 <= j_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_reg_320 <= k_fu_188_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state21, grp_segmentIntersectsGri_fu_153_ap_done, icmp_ln153_fu_205_p2, icmp_ln154_fu_228_p2, icmp_ln152_fu_182_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln152_fu_182_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln153_fu_205_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln154_fu_228_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_segmentIntersectsGri_fu_153_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln161_1_fu_264_p2 <= std_logic_vector(unsigned(b_2_reg_142) + unsigned(ap_const_lv4_1));
    add_ln161_fu_217_p2 <= std_logic_vector(unsigned(b_1_reg_120) + unsigned(ap_const_lv4_2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln152_fu_182_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln152_fu_182_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln152_fu_182_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln152_fu_182_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= collisions_1_fu_46;
    b_fu_194_p2 <= std_logic_vector(unsigned(b_0_reg_97) + unsigned(ap_const_lv4_4));
    collisions_fu_258_p2 <= (select_ln158_fu_250_p3 or collisions_1_fu_46);

    grp_fu_166_p0_assign_proc : process(zext_ln152_fu_177_p1, ap_CS_fsm_state2, zext_ln153_fu_200_p1, ap_CS_fsm_state8, zext_ln154_fu_223_p1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_166_p0 <= zext_ln154_fu_223_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_166_p0 <= zext_ln153_fu_200_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_166_p0 <= zext_ln152_fu_177_p1;
        else 
            grp_fu_166_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_segmentIntersectsGri_fu_153_ap_start <= grp_segmentIntersectsGri_fu_153_ap_start_reg;
    i_fu_234_p2 <= std_logic_vector(unsigned(i_0_reg_131) + unsigned(ap_const_lv2_1));
    icmp_ln152_fu_182_p2 <= "1" when (k_0_reg_86 = ap_const_lv2_2) else "0";
    icmp_ln153_fu_205_p2 <= "1" when (j_0_reg_109 = ap_const_lv2_2) else "0";
    icmp_ln154_fu_228_p2 <= "1" when (i_0_reg_131 = ap_const_lv2_2) else "0";
    j_fu_211_p2 <= std_logic_vector(unsigned(j_0_reg_109) + unsigned(ap_const_lv2_1));
    k_fu_188_p2 <= std_logic_vector(unsigned(k_0_reg_86) + unsigned(ap_const_lv2_1));
    select_ln158_fu_250_p3 <= 
        shl_ln159_fu_244_p2 when (grp_segmentIntersectsGri_fu_153_ap_return(0) = '1') else 
        ap_const_lv8_0;
    shl_ln159_fu_244_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln154_1_fu_240_p1(8-1 downto 0)))));
    zext_ln152_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_86),32));
    zext_ln153_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_109),32));
    zext_ln154_1_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_2_reg_142),8));
    zext_ln154_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_131),32));
end behav;
