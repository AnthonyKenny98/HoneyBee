-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity honeybee is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of honeybee is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "honeybee,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.523250,HLS_SYN_LAT=3065,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=3389,HLS_SYN_LUT=5740,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (107 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (107 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (107 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (107 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (107 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (107 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (107 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (107 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (107 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (107 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (107 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (107 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal grp_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal tmp_1_i_i_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i3_i_reg_783 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i7_i_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln73_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal k_fu_255_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_803 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_fu_261_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal b_reg_808 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal min_reg_813 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_1_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln32_1_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_833 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln44_fu_281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln44_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln44_1_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_1_reg_843 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln74_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal j_fu_306_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_856 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln32_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_reg_861 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_reg_867 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_1_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal max_2_reg_881 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln82_fu_352_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln82_reg_888 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal or_ln32_1_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_1_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_3_fu_404_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_3_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln44_1_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_1_reg_903 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_2_fu_456_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_2_reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln75_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal i_fu_473_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_921 : STD_LOGIC_VECTOR (2 downto 0);
    signal max_fu_544_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_926 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal min_7_fu_616_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_7_reg_932 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal icmp_ln62_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_reg_938 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal icmp_ln62_1_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_2_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_2_reg_948 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_3_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_3_reg_953 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_958 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal add_ln82_1_fu_728_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal k_0_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_0_reg_119 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_reg_131 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln75_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_1_reg_142 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_reg_153 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_2_reg_164 : STD_LOGIC_VECTOR (6 downto 0);
    signal collisions_1_fu_68 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_fu_722_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln73_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_175_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal grp_fu_194_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal grp_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_202_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_205_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal grp_fu_209_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln32_fu_271_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln44_fu_285_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_2_fu_312_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln32_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_332_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln44_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln32_1_fu_358_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_361_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_1_fu_371_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln32_3_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_2_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_1_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln44_1_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_413_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln44_1_fu_423_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln44_3_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_2_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_1_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln27_fu_479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_483_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_fu_493_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_1_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_1_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_1_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_6_fu_537_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_555_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_fu_565_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_1_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_1_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_1_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_4_fu_609_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln62_fu_623_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln62_1_fu_640_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_626_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln62_fu_636_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_14_fu_643_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln62_1_fu_653_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln62_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln62_1_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln62_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln75_1_fu_700_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln62_1_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln80_fu_704_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln62_fu_710_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln62_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_175_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_205_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_209_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (107 downto 0);

    component honeybee_faddfsubbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fsub_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fdiv_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_sitofp_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fcmp_32nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    honeybee_faddfsubbkb_U1 : component honeybee_faddfsubbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_175_p0,
        din1 => grp_fu_175_p1,
        opcode => grp_fu_175_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_175_p2);

    honeybee_fsub_32ncud_U2 : component honeybee_fsub_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => edge_p2_y,
        din1 => edge_p1_y,
        ce => ap_const_logic_1,
        dout => grp_fu_181_p2);

    honeybee_fsub_32ncud_U3 : component honeybee_fsub_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => edge_p2_z,
        din1 => edge_p1_z,
        ce => ap_const_logic_1,
        dout => grp_fu_187_p2);

    honeybee_fdiv_32ndEe_U4 : component honeybee_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_194_p0,
        din1 => grp_fu_194_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_194_p2);

    honeybee_fdiv_32ndEe_U5 : component honeybee_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_221,
        din1 => grp_fu_198_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_198_p2);

    honeybee_sitofp_3eOg_U6 : component honeybee_sitofp_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_202_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_202_p1);

    honeybee_fcmp_32nfYi_U7 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_205_p0,
        din1 => grp_fu_205_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_205_opcode,
        dout => grp_fu_205_p2);

    honeybee_fcmp_32nfYi_U8 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_209_p0,
        din1 => grp_fu_209_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_209_opcode,
        dout => grp_fu_209_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    b_0_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                b_0_reg_119 <= b_reg_808;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                b_0_reg_119 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    b_1_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_467_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                b_1_reg_142 <= add_ln82_reg_888;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                b_1_reg_142 <= b_0_reg_119;
            end if; 
        end if;
    end process;

    b_2_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
                b_2_reg_164 <= add_ln82_1_fu_728_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                b_2_reg_164 <= b_1_reg_142;
            end if; 
        end if;
    end process;

    collisions_1_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
                collisions_1_fu_68 <= collisions_fu_722_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                collisions_1_fu_68 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
                i_0_reg_153 <= i_reg_921;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                i_0_reg_153 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_467_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                j_0_reg_131 <= j_reg_856;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                j_0_reg_131 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_0_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                k_0_reg_108 <= k_reg_803;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_0_reg_108 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                add_ln82_reg_888 <= add_ln82_fu_352_p2;
                max_3_reg_898 <= max_3_fu_404_p3;
                min_2_reg_908 <= min_2_fu_456_p3;
                or_ln32_1_reg_893 <= or_ln32_1_fu_387_p2;
                or_ln44_1_reg_903 <= or_ln44_1_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                b_reg_808 <= b_fu_261_p2;
                bitcast_ln32_reg_828 <= bitcast_ln32_fu_267_p1;
                bitcast_ln44_reg_838 <= bitcast_ln44_fu_281_p1;
                icmp_ln32_1_reg_833 <= icmp_ln32_1_fu_275_p2;
                icmp_ln44_1_reg_843 <= icmp_ln44_1_fu_289_p2;
                max_1_reg_820 <= grp_fu_198_p2;
                min_reg_813 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                i_reg_921 <= i_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state106)) then
                icmp_ln62_1_reg_943 <= icmp_ln62_1_fu_663_p2;
                icmp_ln62_2_reg_948 <= icmp_ln62_2_fu_669_p2;
                icmp_ln62_3_reg_953 <= icmp_ln62_3_fu_675_p2;
                icmp_ln62_reg_938 <= icmp_ln62_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                j_reg_856 <= j_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_reg_803 <= k_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                max_2_reg_881 <= grp_fu_198_p2;
                min_1_reg_873 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then
                max_reg_926 <= max_fu_544_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state105)) then
                min_7_reg_932 <= min_7_fu_616_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                or_ln32_reg_861 <= or_ln32_fu_327_p2;
                or_ln44_reg_867 <= or_ln44_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_216 <= grp_fu_202_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_221 <= grp_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state21))) then
                reg_228 <= grp_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state98))) then
                reg_233 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state107)) then
                tmp_15_reg_958 <= grp_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_1_i3_i_reg_783 <= grp_fu_181_p2;
                tmp_1_i7_i_reg_789 <= grp_fu_187_p2;
                tmp_1_i_i_reg_778 <= grp_fu_175_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state38, icmp_ln74_fu_300_p2, ap_CS_fsm_state72, icmp_ln75_fu_467_p2, icmp_ln73_fu_249_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln73_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((icmp_ln74_fu_300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((icmp_ln75_fu_467_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln82_1_fu_728_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(b_2_reg_164));
    add_ln82_fu_352_p2 <= std_logic_vector(unsigned(ap_const_lv7_4) + unsigned(b_1_reg_142));
    and_ln27_1_fu_520_p2 <= (grp_fu_205_p2 and and_ln27_fu_515_p2);
    and_ln27_fu_515_p2 <= (or_ln32_1_reg_893 and or_ln27_fu_509_p2);
    and_ln29_1_fu_531_p2 <= (grp_fu_209_p2 and and_ln29_fu_526_p2);
    and_ln29_fu_526_p2 <= (or_ln32_reg_861 and or_ln27_fu_509_p2);
    and_ln32_1_fu_398_p2 <= (grp_fu_205_p2 and and_ln32_fu_393_p2);
    and_ln32_fu_393_p2 <= (or_ln32_reg_861 and or_ln32_1_fu_387_p2);
    and_ln39_1_fu_592_p2 <= (grp_fu_205_p2 and and_ln39_fu_587_p2);
    and_ln39_fu_587_p2 <= (or_ln44_1_reg_903 and or_ln39_fu_581_p2);
    and_ln41_1_fu_603_p2 <= (grp_fu_209_p2 and and_ln41_fu_598_p2);
    and_ln41_fu_598_p2 <= (or_ln44_reg_867 and or_ln39_fu_581_p2);
    and_ln44_1_fu_450_p2 <= (grp_fu_209_p2 and and_ln44_fu_445_p2);
    and_ln44_fu_445_p2 <= (or_ln44_reg_867 and or_ln44_1_fu_439_p2);
    and_ln62_1_fu_695_p2 <= (tmp_15_reg_958 and and_ln62_fu_689_p2);
    and_ln62_fu_689_p2 <= (or_ln62_fu_681_p2 and or_ln62_1_fu_685_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_done_assign_proc : process(ap_CS_fsm_state6, icmp_ln73_fu_249_p2)
    begin
        if (((icmp_ln73_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln73_fu_249_p2)
    begin
        if (((icmp_ln73_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= collisions_1_fu_68;
    b_fu_261_p2 <= std_logic_vector(unsigned(ap_const_lv7_10) + unsigned(b_0_reg_119));
    bitcast_ln27_fu_479_p1 <= reg_233;
    bitcast_ln32_1_fu_358_p1 <= max_2_reg_881;
    bitcast_ln32_fu_267_p1 <= grp_fu_198_p2;
    bitcast_ln39_fu_551_p1 <= reg_233;
    bitcast_ln44_1_fu_410_p1 <= min_1_reg_873;
    bitcast_ln44_fu_281_p1 <= grp_fu_194_p2;
    bitcast_ln62_1_fu_640_p1 <= min_7_reg_932;
    bitcast_ln62_fu_623_p1 <= max_reg_926;
    collisions_fu_722_p2 <= (sext_ln62_fu_718_p1 or collisions_1_fu_68);

    grp_fu_175_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state44, ap_CS_fsm_state49, ap_CS_fsm_state78, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            grp_fu_175_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_175_opcode <= ap_const_lv2_0;
        else 
            grp_fu_175_opcode <= "XX";
        end if; 
    end process;


    grp_fu_175_p0_assign_proc : process(ap_CS_fsm_state1, edge_p2_x, reg_216, reg_221, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state44, ap_CS_fsm_state49, ap_CS_fsm_state78, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_175_p0 <= reg_221;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_175_p0 <= reg_216;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_175_p0 <= edge_p2_x;
        else 
            grp_fu_175_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_175_p1_assign_proc : process(ap_CS_fsm_state1, edge_p1_x, edge_p1_y, edge_p1_z, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state44, ap_CS_fsm_state49, ap_CS_fsm_state78, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_175_p1 <= edge_p1_y;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_175_p1 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_175_p1 <= edge_p1_z;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_175_p1 <= edge_p1_x;
        else 
            grp_fu_175_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_194_p0_assign_proc : process(reg_221, reg_228, ap_CS_fsm_state83, ap_CS_fsm_state22, ap_CS_fsm_state54, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            grp_fu_194_p0 <= reg_221;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_194_p0 <= reg_228;
        else 
            grp_fu_194_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_194_p1_assign_proc : process(tmp_1_i_i_reg_778, tmp_1_i3_i_reg_783, tmp_1_i7_i_reg_789, ap_CS_fsm_state83, ap_CS_fsm_state22, ap_CS_fsm_state54, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state83))) then 
            grp_fu_194_p1 <= tmp_1_i_i_reg_778;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_194_p1 <= tmp_1_i3_i_reg_783;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_194_p1 <= tmp_1_i7_i_reg_789;
        else 
            grp_fu_194_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_198_p1_assign_proc : process(tmp_1_i3_i_reg_783, tmp_1_i7_i_reg_789, ap_CS_fsm_state22, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_198_p1 <= tmp_1_i3_i_reg_783;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_198_p1 <= tmp_1_i7_i_reg_789;
        else 
            grp_fu_198_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_202_p0_assign_proc : process(zext_ln73_fu_244_p1, ap_CS_fsm_state6, zext_ln74_fu_295_p1, ap_CS_fsm_state38, zext_ln75_fu_462_p1, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_202_p0 <= zext_ln75_fu_462_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_202_p0 <= zext_ln74_fu_295_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_202_p0 <= zext_ln73_fu_244_p1;
        else 
            grp_fu_202_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_205_opcode_assign_proc : process(ap_CS_fsm_state106, ap_CS_fsm_state70, ap_CS_fsm_state99, ap_CS_fsm_state104)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state106))) then 
            grp_fu_205_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            grp_fu_205_opcode <= ap_const_lv5_2;
        else 
            grp_fu_205_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_205_p0_assign_proc : process(reg_233, max_1_reg_820, max_reg_926, ap_CS_fsm_state106, ap_CS_fsm_state70, ap_CS_fsm_state99, ap_CS_fsm_state104)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_fu_205_p0 <= max_reg_926;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            grp_fu_205_p0 <= reg_233;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_fu_205_p0 <= max_1_reg_820;
        else 
            grp_fu_205_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_205_p1_assign_proc : process(min_1_reg_873, max_2_reg_881, min_7_reg_932, ap_CS_fsm_state106, ap_CS_fsm_state70, ap_CS_fsm_state99, ap_CS_fsm_state104)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_fu_205_p1 <= min_7_reg_932;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            grp_fu_205_p1 <= min_1_reg_873;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            grp_fu_205_p1 <= max_2_reg_881;
        else 
            grp_fu_205_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_209_opcode_assign_proc : process(ap_CS_fsm_state70, ap_CS_fsm_state99, ap_CS_fsm_state104)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_fu_209_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            grp_fu_209_opcode <= ap_const_lv5_4;
        else 
            grp_fu_209_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_209_p0_assign_proc : process(min_reg_813, max_1_reg_820, ap_CS_fsm_state70, ap_CS_fsm_state99, ap_CS_fsm_state104)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_fu_209_p0 <= max_1_reg_820;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            grp_fu_209_p0 <= min_reg_813;
        else 
            grp_fu_209_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_209_p1_assign_proc : process(reg_233, min_1_reg_873, ap_CS_fsm_state70, ap_CS_fsm_state99, ap_CS_fsm_state104)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            grp_fu_209_p1 <= reg_233;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_fu_209_p1 <= min_1_reg_873;
        else 
            grp_fu_209_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_473_p2 <= std_logic_vector(unsigned(i_0_reg_153) + unsigned(ap_const_lv3_1));
    icmp_ln27_1_fu_503_p2 <= "1" when (trunc_ln27_fu_493_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_fu_497_p2 <= "0" when (tmp_10_fu_483_p4 = ap_const_lv8_FF) else "1";
    icmp_ln32_1_fu_275_p2 <= "1" when (trunc_ln32_fu_271_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_2_fu_375_p2 <= "0" when (tmp_3_fu_361_p4 = ap_const_lv8_FF) else "1";
    icmp_ln32_3_fu_381_p2 <= "1" when (trunc_ln32_1_fu_371_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_fu_321_p2 <= "0" when (tmp_2_fu_312_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_1_fu_575_p2 <= "1" when (trunc_ln39_fu_565_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_fu_569_p2 <= "0" when (tmp_8_fu_555_p4 = ap_const_lv8_FF) else "1";
    icmp_ln44_1_fu_289_p2 <= "1" when (trunc_ln44_fu_285_p1 = ap_const_lv23_0) else "0";
    icmp_ln44_2_fu_427_p2 <= "0" when (tmp_6_fu_413_p4 = ap_const_lv8_FF) else "1";
    icmp_ln44_3_fu_433_p2 <= "1" when (trunc_ln44_1_fu_423_p1 = ap_const_lv23_0) else "0";
    icmp_ln44_fu_341_p2 <= "0" when (tmp_5_fu_332_p4 = ap_const_lv8_FF) else "1";
    icmp_ln62_1_fu_663_p2 <= "1" when (trunc_ln62_fu_636_p1 = ap_const_lv23_0) else "0";
    icmp_ln62_2_fu_669_p2 <= "0" when (tmp_14_fu_643_p4 = ap_const_lv8_FF) else "1";
    icmp_ln62_3_fu_675_p2 <= "1" when (trunc_ln62_1_fu_653_p1 = ap_const_lv23_0) else "0";
    icmp_ln62_fu_657_p2 <= "0" when (tmp_13_fu_626_p4 = ap_const_lv8_FF) else "1";
    icmp_ln73_fu_249_p2 <= "1" when (k_0_reg_108 = ap_const_lv3_4) else "0";
    icmp_ln74_fu_300_p2 <= "1" when (j_0_reg_131 = ap_const_lv3_4) else "0";
    icmp_ln75_fu_467_p2 <= "1" when (i_0_reg_153 = ap_const_lv3_4) else "0";
    j_fu_306_p2 <= std_logic_vector(unsigned(j_0_reg_131) + unsigned(ap_const_lv3_1));
    k_fu_255_p2 <= std_logic_vector(unsigned(k_0_reg_108) + unsigned(ap_const_lv3_1));
    max_3_fu_404_p3 <= 
        max_1_reg_820 when (and_ln32_1_fu_398_p2(0) = '1') else 
        max_2_reg_881;
    max_6_fu_537_p3 <= 
        max_1_reg_820 when (and_ln29_1_fu_531_p2(0) = '1') else 
        reg_233;
    max_fu_544_p3 <= 
        max_6_fu_537_p3 when (and_ln27_1_fu_520_p2(0) = '1') else 
        max_3_reg_898;
    min_2_fu_456_p3 <= 
        min_reg_813 when (and_ln44_1_fu_450_p2(0) = '1') else 
        min_1_reg_873;
    min_4_fu_609_p3 <= 
        min_reg_813 when (and_ln41_1_fu_603_p2(0) = '1') else 
        reg_233;
    min_7_fu_616_p3 <= 
        min_4_fu_609_p3 when (and_ln39_1_fu_592_p2(0) = '1') else 
        min_2_reg_908;
    or_ln27_fu_509_p2 <= (icmp_ln27_fu_497_p2 or icmp_ln27_1_fu_503_p2);
    or_ln32_1_fu_387_p2 <= (icmp_ln32_3_fu_381_p2 or icmp_ln32_2_fu_375_p2);
    or_ln32_fu_327_p2 <= (icmp_ln32_fu_321_p2 or icmp_ln32_1_reg_833);
    or_ln39_fu_581_p2 <= (icmp_ln39_fu_569_p2 or icmp_ln39_1_fu_575_p2);
    or_ln44_1_fu_439_p2 <= (icmp_ln44_3_fu_433_p2 or icmp_ln44_2_fu_427_p2);
    or_ln44_fu_347_p2 <= (icmp_ln44_fu_341_p2 or icmp_ln44_1_reg_843);
    or_ln62_1_fu_685_p2 <= (icmp_ln62_3_reg_953 or icmp_ln62_2_reg_948);
    or_ln62_fu_681_p2 <= (icmp_ln62_reg_938 or icmp_ln62_1_reg_943);
    select_ln62_fu_710_p3 <= 
        shl_ln80_fu_704_p2 when (and_ln62_1_fu_695_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln62_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln62_fu_710_p3),64));

    shl_ln80_fu_704_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & zext_ln75_1_fu_700_p1(31-1 downto 0)))));
    tmp_10_fu_483_p4 <= bitcast_ln27_fu_479_p1(30 downto 23);
    tmp_13_fu_626_p4 <= bitcast_ln62_fu_623_p1(30 downto 23);
    tmp_14_fu_643_p4 <= bitcast_ln62_1_fu_640_p1(30 downto 23);
    tmp_2_fu_312_p4 <= bitcast_ln32_reg_828(30 downto 23);
    tmp_3_fu_361_p4 <= bitcast_ln32_1_fu_358_p1(30 downto 23);
    tmp_5_fu_332_p4 <= bitcast_ln44_reg_838(30 downto 23);
    tmp_6_fu_413_p4 <= bitcast_ln44_1_fu_410_p1(30 downto 23);
    tmp_8_fu_555_p4 <= bitcast_ln39_fu_551_p1(30 downto 23);
    trunc_ln27_fu_493_p1 <= bitcast_ln27_fu_479_p1(23 - 1 downto 0);
    trunc_ln32_1_fu_371_p1 <= bitcast_ln32_1_fu_358_p1(23 - 1 downto 0);
    trunc_ln32_fu_271_p1 <= bitcast_ln32_fu_267_p1(23 - 1 downto 0);
    trunc_ln39_fu_565_p1 <= bitcast_ln39_fu_551_p1(23 - 1 downto 0);
    trunc_ln44_1_fu_423_p1 <= bitcast_ln44_1_fu_410_p1(23 - 1 downto 0);
    trunc_ln44_fu_285_p1 <= bitcast_ln44_fu_281_p1(23 - 1 downto 0);
    trunc_ln62_1_fu_653_p1 <= bitcast_ln62_1_fu_640_p1(23 - 1 downto 0);
    trunc_ln62_fu_636_p1 <= bitcast_ln62_fu_623_p1(23 - 1 downto 0);
    zext_ln73_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_108),32));
    zext_ln74_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_131),32));
    zext_ln75_1_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_2_reg_164),32));
    zext_ln75_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_153),32));
end behav;
