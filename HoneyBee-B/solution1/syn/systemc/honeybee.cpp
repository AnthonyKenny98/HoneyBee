// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "honeybee.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic honeybee::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic honeybee::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<21> honeybee::ap_ST_fsm_state1 = "1";
const sc_lv<21> honeybee::ap_ST_fsm_state2 = "10";
const sc_lv<21> honeybee::ap_ST_fsm_state3 = "100";
const sc_lv<21> honeybee::ap_ST_fsm_state4 = "1000";
const sc_lv<21> honeybee::ap_ST_fsm_state5 = "10000";
const sc_lv<21> honeybee::ap_ST_fsm_state6 = "100000";
const sc_lv<21> honeybee::ap_ST_fsm_state7 = "1000000";
const sc_lv<21> honeybee::ap_ST_fsm_state8 = "10000000";
const sc_lv<21> honeybee::ap_ST_fsm_state9 = "100000000";
const sc_lv<21> honeybee::ap_ST_fsm_state10 = "1000000000";
const sc_lv<21> honeybee::ap_ST_fsm_state11 = "10000000000";
const sc_lv<21> honeybee::ap_ST_fsm_state12 = "100000000000";
const sc_lv<21> honeybee::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<21> honeybee::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<21> honeybee::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<21> honeybee::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<21> honeybee::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<21> honeybee::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<21> honeybee::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<21> honeybee::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<21> honeybee::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<32> honeybee::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> honeybee::ap_const_lv32_1 = "1";
const sc_lv<32> honeybee::ap_const_lv32_6 = "110";
const sc_lv<32> honeybee::ap_const_lv32_7 = "111";
const sc_lv<32> honeybee::ap_const_lv32_C = "1100";
const sc_lv<32> honeybee::ap_const_lv32_D = "1101";
const sc_lv<32> honeybee::ap_const_lv32_12 = "10010";
const sc_lv<32> honeybee::ap_const_lv32_14 = "10100";
const sc_lv<2> honeybee::ap_const_lv2_0 = "00";
const sc_lv<1> honeybee::ap_const_lv1_1 = "1";
const sc_lv<4> honeybee::ap_const_lv4_0 = "0000";
const sc_lv<32> honeybee::ap_const_lv32_13 = "10011";
const sc_lv<8> honeybee::ap_const_lv8_0 = "00000000";
const sc_lv<2> honeybee::ap_const_lv2_2 = "10";
const sc_lv<2> honeybee::ap_const_lv2_1 = "1";
const sc_lv<4> honeybee::ap_const_lv4_4 = "100";
const sc_lv<4> honeybee::ap_const_lv4_2 = "10";
const sc_lv<8> honeybee::ap_const_lv8_1 = "1";
const sc_lv<4> honeybee::ap_const_lv4_1 = "1";
const bool honeybee::ap_const_boolean_1 = true;

honeybee::honeybee(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_segmentIntersectsGri_fu_153 = new segmentIntersectsGri("grp_segmentIntersectsGri_fu_153");
    grp_segmentIntersectsGri_fu_153->ap_clk(ap_clk);
    grp_segmentIntersectsGri_fu_153->ap_rst(ap_rst);
    grp_segmentIntersectsGri_fu_153->ap_start(grp_segmentIntersectsGri_fu_153_ap_start);
    grp_segmentIntersectsGri_fu_153->ap_done(grp_segmentIntersectsGri_fu_153_ap_done);
    grp_segmentIntersectsGri_fu_153->ap_idle(grp_segmentIntersectsGri_fu_153_ap_idle);
    grp_segmentIntersectsGri_fu_153->ap_ready(grp_segmentIntersectsGri_fu_153_ap_ready);
    grp_segmentIntersectsGri_fu_153->edge_p1_x(edge_p1_x);
    grp_segmentIntersectsGri_fu_153->edge_p1_y(edge_p1_y);
    grp_segmentIntersectsGri_fu_153->edge_p1_z(edge_p1_z);
    grp_segmentIntersectsGri_fu_153->edge_p2_x(edge_p2_x);
    grp_segmentIntersectsGri_fu_153->edge_p2_y(edge_p2_y);
    grp_segmentIntersectsGri_fu_153->edge_p2_z(edge_p2_z);
    grp_segmentIntersectsGri_fu_153->grid_x(grid_x_reg_371);
    grp_segmentIntersectsGri_fu_153->grid_y(grid_y_reg_353);
    grp_segmentIntersectsGri_fu_153->grid_z(grid_z_reg_330);
    grp_segmentIntersectsGri_fu_153->ap_return(grp_segmentIntersectsGri_fu_153_ap_return);
    honeybee_sitofp_3hbi_U56 = new honeybee_sitofp_3hbi<1,6,32,32>("honeybee_sitofp_3hbi_U56");
    honeybee_sitofp_3hbi_U56->clk(ap_clk);
    honeybee_sitofp_3hbi_U56->reset(ap_rst);
    honeybee_sitofp_3hbi_U56->din0(grp_fu_166_p0);
    honeybee_sitofp_3hbi_U56->ce(ap_var_for_const0);
    honeybee_sitofp_3hbi_U56->dout(grp_fu_166_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln161_1_fu_264_p2);
    sensitive << ( b_2_reg_142 );

    SC_METHOD(thread_add_ln161_fu_217_p2);
    sensitive << ( b_1_reg_120 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln152_fu_182_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln152_fu_182_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( collisions_1_fu_46 );
    sensitive << ( icmp_ln152_fu_182_p2 );

    SC_METHOD(thread_b_fu_194_p2);
    sensitive << ( b_0_reg_97 );

    SC_METHOD(thread_collisions_fu_258_p2);
    sensitive << ( collisions_1_fu_46 );
    sensitive << ( select_ln158_fu_250_p3 );

    SC_METHOD(thread_grp_fu_166_p0);
    sensitive << ( zext_ln152_fu_177_p1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln153_fu_200_p1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln154_fu_223_p1 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_grp_segmentIntersectsGri_fu_153_ap_start);
    sensitive << ( grp_segmentIntersectsGri_fu_153_ap_start_reg );

    SC_METHOD(thread_i_fu_234_p2);
    sensitive << ( i_0_reg_131 );

    SC_METHOD(thread_icmp_ln152_fu_182_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( k_0_reg_86 );

    SC_METHOD(thread_icmp_ln153_fu_205_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( j_0_reg_109 );

    SC_METHOD(thread_icmp_ln154_fu_228_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( i_0_reg_131 );

    SC_METHOD(thread_j_fu_211_p2);
    sensitive << ( j_0_reg_109 );

    SC_METHOD(thread_k_fu_188_p2);
    sensitive << ( k_0_reg_86 );

    SC_METHOD(thread_select_ln158_fu_250_p3);
    sensitive << ( grp_segmentIntersectsGri_fu_153_ap_return );
    sensitive << ( shl_ln159_fu_244_p2 );

    SC_METHOD(thread_shl_ln159_fu_244_p2);
    sensitive << ( zext_ln154_1_fu_240_p1 );

    SC_METHOD(thread_zext_ln152_fu_177_p1);
    sensitive << ( k_0_reg_86 );

    SC_METHOD(thread_zext_ln153_fu_200_p1);
    sensitive << ( j_0_reg_109 );

    SC_METHOD(thread_zext_ln154_1_fu_240_p1);
    sensitive << ( b_2_reg_142 );

    SC_METHOD(thread_zext_ln154_fu_223_p1);
    sensitive << ( i_0_reg_131 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_segmentIntersectsGri_fu_153_ap_done );
    sensitive << ( icmp_ln153_fu_205_p2 );
    sensitive << ( icmp_ln154_fu_228_p2 );
    sensitive << ( icmp_ln152_fu_182_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000000001";
    grp_segmentIntersectsGri_fu_153_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "honeybee_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, edge_p1_x, "(port)edge_p1_x");
    sc_trace(mVcdFile, edge_p1_y, "(port)edge_p1_y");
    sc_trace(mVcdFile, edge_p1_z, "(port)edge_p1_z");
    sc_trace(mVcdFile, edge_p2_x, "(port)edge_p2_x");
    sc_trace(mVcdFile, edge_p2_y, "(port)edge_p2_y");
    sc_trace(mVcdFile, edge_p2_z, "(port)edge_p2_z");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, zext_ln152_fu_177_p1, "zext_ln152_fu_177_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, k_fu_188_p2, "k_fu_188_p2");
    sc_trace(mVcdFile, k_reg_320, "k_reg_320");
    sc_trace(mVcdFile, b_fu_194_p2, "b_fu_194_p2");
    sc_trace(mVcdFile, b_reg_325, "b_reg_325");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_fu_166_p1, "grp_fu_166_p1");
    sc_trace(mVcdFile, grid_z_reg_330, "grid_z_reg_330");
    sc_trace(mVcdFile, zext_ln153_fu_200_p1, "zext_ln153_fu_200_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, j_fu_211_p2, "j_fu_211_p2");
    sc_trace(mVcdFile, j_reg_343, "j_reg_343");
    sc_trace(mVcdFile, add_ln161_fu_217_p2, "add_ln161_fu_217_p2");
    sc_trace(mVcdFile, add_ln161_reg_348, "add_ln161_reg_348");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, grid_y_reg_353, "grid_y_reg_353");
    sc_trace(mVcdFile, zext_ln154_fu_223_p1, "zext_ln154_fu_223_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, i_fu_234_p2, "i_fu_234_p2");
    sc_trace(mVcdFile, i_reg_366, "i_reg_366");
    sc_trace(mVcdFile, grid_x_reg_371, "grid_x_reg_371");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, add_ln161_1_fu_264_p2, "add_ln161_1_fu_264_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_153_ap_ready, "grp_segmentIntersectsGri_fu_153_ap_ready");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_153_ap_done, "grp_segmentIntersectsGri_fu_153_ap_done");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_153_ap_start, "grp_segmentIntersectsGri_fu_153_ap_start");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_153_ap_idle, "grp_segmentIntersectsGri_fu_153_ap_idle");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_153_ap_return, "grp_segmentIntersectsGri_fu_153_ap_return");
    sc_trace(mVcdFile, k_0_reg_86, "k_0_reg_86");
    sc_trace(mVcdFile, icmp_ln153_fu_205_p2, "icmp_ln153_fu_205_p2");
    sc_trace(mVcdFile, b_0_reg_97, "b_0_reg_97");
    sc_trace(mVcdFile, j_0_reg_109, "j_0_reg_109");
    sc_trace(mVcdFile, icmp_ln154_fu_228_p2, "icmp_ln154_fu_228_p2");
    sc_trace(mVcdFile, b_1_reg_120, "b_1_reg_120");
    sc_trace(mVcdFile, i_0_reg_131, "i_0_reg_131");
    sc_trace(mVcdFile, b_2_reg_142, "b_2_reg_142");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_153_ap_start_reg, "grp_segmentIntersectsGri_fu_153_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, collisions_1_fu_46, "collisions_1_fu_46");
    sc_trace(mVcdFile, collisions_fu_258_p2, "collisions_fu_258_p2");
    sc_trace(mVcdFile, icmp_ln152_fu_182_p2, "icmp_ln152_fu_182_p2");
    sc_trace(mVcdFile, grp_fu_166_p0, "grp_fu_166_p0");
    sc_trace(mVcdFile, zext_ln154_1_fu_240_p1, "zext_ln154_1_fu_240_p1");
    sc_trace(mVcdFile, shl_ln159_fu_244_p2, "shl_ln159_fu_244_p2");
    sc_trace(mVcdFile, select_ln158_fu_250_p3, "select_ln158_fu_250_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("honeybee.hdltvin.dat");
    mHdltvoutHandle.open("honeybee.hdltvout.dat");
}

honeybee::~honeybee() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_segmentIntersectsGri_fu_153;
    delete honeybee_sitofp_3hbi_U56;
}

void honeybee::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void honeybee::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(icmp_ln153_fu_205_p2.read(), ap_const_lv1_1))) {
        b_0_reg_97 = b_reg_325.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        b_0_reg_97 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln154_fu_228_p2.read()))) {
        b_1_reg_120 = add_ln161_reg_348.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        b_1_reg_120 = b_0_reg_97.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
         esl_seteq<1,1,1>(grp_segmentIntersectsGri_fu_153_ap_done.read(), ap_const_logic_1))) {
        b_2_reg_142 = add_ln161_1_fu_264_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        b_2_reg_142 = b_1_reg_120.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
         esl_seteq<1,1,1>(grp_segmentIntersectsGri_fu_153_ap_done.read(), ap_const_logic_1))) {
        collisions_1_fu_46 = collisions_fu_258_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        collisions_1_fu_46 = ap_const_lv8_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_segmentIntersectsGri_fu_153_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
            grp_segmentIntersectsGri_fu_153_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_segmentIntersectsGri_fu_153_ap_ready.read())) {
            grp_segmentIntersectsGri_fu_153_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
         esl_seteq<1,1,1>(grp_segmentIntersectsGri_fu_153_ap_done.read(), ap_const_logic_1))) {
        i_0_reg_131 = i_reg_366.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        i_0_reg_131 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln154_fu_228_p2.read()))) {
        j_0_reg_109 = j_reg_343.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        j_0_reg_109 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(icmp_ln153_fu_205_p2.read(), ap_const_lv1_1))) {
        k_0_reg_86 = k_reg_320.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        k_0_reg_86 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        add_ln161_reg_348 = add_ln161_fu_217_p2.read();
        grid_y_reg_353 = grp_fu_166_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        b_reg_325 = b_fu_194_p2.read();
        grid_z_reg_330 = grp_fu_166_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        grid_x_reg_371 = grp_fu_166_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        i_reg_366 = i_fu_234_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        j_reg_343 = j_fu_211_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        k_reg_320 = k_fu_188_p2.read();
    }
}

void honeybee::thread_add_ln161_1_fu_264_p2() {
    add_ln161_1_fu_264_p2 = (!b_2_reg_142.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(b_2_reg_142.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void honeybee::thread_add_ln161_fu_217_p2() {
    add_ln161_fu_217_p2 = (!b_1_reg_120.read().is_01() || !ap_const_lv4_2.is_01())? sc_lv<4>(): (sc_biguint<4>(b_1_reg_120.read()) + sc_biguint<4>(ap_const_lv4_2));
}

void honeybee::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void honeybee::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void honeybee::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void honeybee::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void honeybee::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void honeybee::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void honeybee::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void honeybee::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void honeybee::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void honeybee::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln152_fu_182_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void honeybee::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void honeybee::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln152_fu_182_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void honeybee::thread_ap_return() {
    ap_return = collisions_1_fu_46.read();
}

void honeybee::thread_b_fu_194_p2() {
    b_fu_194_p2 = (!b_0_reg_97.read().is_01() || !ap_const_lv4_4.is_01())? sc_lv<4>(): (sc_biguint<4>(b_0_reg_97.read()) + sc_biguint<4>(ap_const_lv4_4));
}

void honeybee::thread_collisions_fu_258_p2() {
    collisions_fu_258_p2 = (select_ln158_fu_250_p3.read() | collisions_1_fu_46.read());
}

void honeybee::thread_grp_fu_166_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_166_p0 = zext_ln154_fu_223_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_166_p0 = zext_ln153_fu_200_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_166_p0 = zext_ln152_fu_177_p1.read();
    } else {
        grp_fu_166_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void honeybee::thread_grp_segmentIntersectsGri_fu_153_ap_start() {
    grp_segmentIntersectsGri_fu_153_ap_start = grp_segmentIntersectsGri_fu_153_ap_start_reg.read();
}

void honeybee::thread_i_fu_234_p2() {
    i_fu_234_p2 = (!i_0_reg_131.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_0_reg_131.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void honeybee::thread_icmp_ln152_fu_182_p2() {
    icmp_ln152_fu_182_p2 = (!k_0_reg_86.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_86.read() == ap_const_lv2_2);
}

void honeybee::thread_icmp_ln153_fu_205_p2() {
    icmp_ln153_fu_205_p2 = (!j_0_reg_109.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_109.read() == ap_const_lv2_2);
}

void honeybee::thread_icmp_ln154_fu_228_p2() {
    icmp_ln154_fu_228_p2 = (!i_0_reg_131.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_131.read() == ap_const_lv2_2);
}

void honeybee::thread_j_fu_211_p2() {
    j_fu_211_p2 = (!j_0_reg_109.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(j_0_reg_109.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void honeybee::thread_k_fu_188_p2() {
    k_fu_188_p2 = (!k_0_reg_86.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(k_0_reg_86.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void honeybee::thread_select_ln158_fu_250_p3() {
    select_ln158_fu_250_p3 = (!grp_segmentIntersectsGri_fu_153_ap_return.read()[0].is_01())? sc_lv<8>(): ((grp_segmentIntersectsGri_fu_153_ap_return.read()[0].to_bool())? shl_ln159_fu_244_p2.read(): ap_const_lv8_0);
}

void honeybee::thread_shl_ln159_fu_244_p2() {
    shl_ln159_fu_244_p2 = (!zext_ln154_1_fu_240_p1.read().is_01())? sc_lv<8>(): ap_const_lv8_1 << (unsigned short)zext_ln154_1_fu_240_p1.read().to_uint();
}

void honeybee::thread_zext_ln152_fu_177_p1() {
    zext_ln152_fu_177_p1 = esl_zext<32,2>(k_0_reg_86.read());
}

void honeybee::thread_zext_ln153_fu_200_p1() {
    zext_ln153_fu_200_p1 = esl_zext<32,2>(j_0_reg_109.read());
}

void honeybee::thread_zext_ln154_1_fu_240_p1() {
    zext_ln154_1_fu_240_p1 = esl_zext<8,4>(b_2_reg_142.read());
}

void honeybee::thread_zext_ln154_fu_223_p1() {
    zext_ln154_fu_223_p1 = esl_zext<32,2>(i_0_reg_131.read());
}

void honeybee::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln152_fu_182_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(icmp_ln153_fu_205_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln154_fu_228_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && esl_seteq<1,1,1>(grp_segmentIntersectsGri_fu_153_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<21>) ("XXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void honeybee::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p1_x\" :  \"" << edge_p1_x.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p1_y\" :  \"" << edge_p1_y.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p1_z\" :  \"" << edge_p1_z.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p2_x\" :  \"" << edge_p2_x.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p2_y\" :  \"" << edge_p2_y.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p2_z\" :  \"" << edge_p2_z.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

