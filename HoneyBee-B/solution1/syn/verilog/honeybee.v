// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="honeybee,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.921200,HLS_SYN_LAT=2107,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=34,HLS_SYN_FF=6086,HLS_SYN_LUT=13606,HLS_VERSION=2019_2}" *)

module honeybee (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        edge_p1_x,
        edge_p1_y,
        edge_p1_z,
        edge_p2_x,
        edge_p2_y,
        edge_p2_z,
        ap_return
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] edge_p1_x;
input  [31:0] edge_p1_y;
input  [31:0] edge_p1_z;
input  [31:0] edge_p2_x;
input  [31:0] edge_p2_y;
input  [31:0] edge_p2_z;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] zext_ln152_fu_177_p1;
wire    ap_CS_fsm_state2;
wire   [1:0] k_fu_188_p2;
reg   [1:0] k_reg_320;
wire   [3:0] b_fu_194_p2;
reg   [3:0] b_reg_325;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_166_p1;
reg   [31:0] grid_z_reg_330;
wire   [31:0] zext_ln153_fu_200_p1;
wire    ap_CS_fsm_state8;
wire   [1:0] j_fu_211_p2;
reg   [1:0] j_reg_343;
wire   [3:0] add_ln161_fu_217_p2;
reg   [3:0] add_ln161_reg_348;
wire    ap_CS_fsm_state13;
reg   [31:0] grid_y_reg_353;
wire   [31:0] zext_ln154_fu_223_p1;
wire    ap_CS_fsm_state14;
wire   [1:0] i_fu_234_p2;
reg   [1:0] i_reg_366;
reg   [31:0] grid_x_reg_371;
wire    ap_CS_fsm_state19;
wire   [3:0] add_ln161_1_fu_264_p2;
wire    ap_CS_fsm_state21;
wire    grp_segmentIntersectsGri_fu_153_ap_ready;
wire    grp_segmentIntersectsGri_fu_153_ap_done;
wire    grp_segmentIntersectsGri_fu_153_ap_start;
wire    grp_segmentIntersectsGri_fu_153_ap_idle;
wire   [0:0] grp_segmentIntersectsGri_fu_153_ap_return;
reg   [1:0] k_0_reg_86;
wire   [0:0] icmp_ln153_fu_205_p2;
reg   [3:0] b_0_reg_97;
reg   [1:0] j_0_reg_109;
wire   [0:0] icmp_ln154_fu_228_p2;
reg   [3:0] b_1_reg_120;
reg   [1:0] i_0_reg_131;
reg   [3:0] b_2_reg_142;
reg    grp_segmentIntersectsGri_fu_153_ap_start_reg;
wire    ap_CS_fsm_state20;
reg   [7:0] collisions_1_fu_46;
wire   [7:0] collisions_fu_258_p2;
wire   [0:0] icmp_ln152_fu_182_p2;
reg   [31:0] grp_fu_166_p0;
wire   [7:0] zext_ln154_1_fu_240_p1;
wire   [7:0] shl_ln159_fu_244_p2;
wire   [7:0] select_ln158_fu_250_p3;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
#0 grp_segmentIntersectsGri_fu_153_ap_start_reg = 1'b0;
end

segmentIntersectsGri grp_segmentIntersectsGri_fu_153(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_segmentIntersectsGri_fu_153_ap_start),
    .ap_done(grp_segmentIntersectsGri_fu_153_ap_done),
    .ap_idle(grp_segmentIntersectsGri_fu_153_ap_idle),
    .ap_ready(grp_segmentIntersectsGri_fu_153_ap_ready),
    .edge_p1_x(edge_p1_x),
    .edge_p1_y(edge_p1_y),
    .edge_p1_z(edge_p1_z),
    .edge_p2_x(edge_p2_x),
    .edge_p2_y(edge_p2_y),
    .edge_p2_z(edge_p2_z),
    .grid_x(grid_x_reg_371),
    .grid_y(grid_y_reg_353),
    .grid_z(grid_z_reg_330),
    .ap_return(grp_segmentIntersectsGri_fu_153_ap_return)
);

honeybee_sitofp_3hbi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_sitofp_3hbi_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_166_p0),
    .ce(1'b1),
    .dout(grp_fu_166_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_segmentIntersectsGri_fu_153_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state20)) begin
            grp_segmentIntersectsGri_fu_153_ap_start_reg <= 1'b1;
        end else if ((grp_segmentIntersectsGri_fu_153_ap_ready == 1'b1)) begin
            grp_segmentIntersectsGri_fu_153_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln153_fu_205_p2 == 1'd1))) begin
        b_0_reg_97 <= b_reg_325;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_0_reg_97 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln154_fu_228_p2 == 1'd1))) begin
        b_1_reg_120 <= add_ln161_reg_348;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        b_1_reg_120 <= b_0_reg_97;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (grp_segmentIntersectsGri_fu_153_ap_done == 1'b1))) begin
        b_2_reg_142 <= add_ln161_1_fu_264_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        b_2_reg_142 <= b_1_reg_120;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (grp_segmentIntersectsGri_fu_153_ap_done == 1'b1))) begin
        collisions_1_fu_46 <= collisions_fu_258_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        collisions_1_fu_46 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (grp_segmentIntersectsGri_fu_153_ap_done == 1'b1))) begin
        i_0_reg_131 <= i_reg_366;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_0_reg_131 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln154_fu_228_p2 == 1'd1))) begin
        j_0_reg_109 <= j_reg_343;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_reg_109 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln153_fu_205_p2 == 1'd1))) begin
        k_0_reg_86 <= k_reg_320;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_0_reg_86 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln161_reg_348 <= add_ln161_fu_217_p2;
        grid_y_reg_353 <= grp_fu_166_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b_reg_325 <= b_fu_194_p2;
        grid_z_reg_330 <= grp_fu_166_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grid_x_reg_371 <= grp_fu_166_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_reg_366 <= i_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_343 <= j_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_320 <= k_fu_188_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln152_fu_182_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln152_fu_182_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_166_p0 = zext_ln154_fu_223_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_166_p0 = zext_ln153_fu_200_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_166_p0 = zext_ln152_fu_177_p1;
    end else begin
        grp_fu_166_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln152_fu_182_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln153_fu_205_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln154_fu_228_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (grp_segmentIntersectsGri_fu_153_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln161_1_fu_264_p2 = (b_2_reg_142 + 4'd1);

assign add_ln161_fu_217_p2 = (b_1_reg_120 + 4'd2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_return = collisions_1_fu_46;

assign b_fu_194_p2 = (b_0_reg_97 + 4'd4);

assign collisions_fu_258_p2 = (select_ln158_fu_250_p3 | collisions_1_fu_46);

assign grp_segmentIntersectsGri_fu_153_ap_start = grp_segmentIntersectsGri_fu_153_ap_start_reg;

assign i_fu_234_p2 = (i_0_reg_131 + 2'd1);

assign icmp_ln152_fu_182_p2 = ((k_0_reg_86 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln153_fu_205_p2 = ((j_0_reg_109 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln154_fu_228_p2 = ((i_0_reg_131 == 2'd2) ? 1'b1 : 1'b0);

assign j_fu_211_p2 = (j_0_reg_109 + 2'd1);

assign k_fu_188_p2 = (k_0_reg_86 + 2'd1);

assign select_ln158_fu_250_p3 = ((grp_segmentIntersectsGri_fu_153_ap_return[0:0] === 1'b1) ? shl_ln159_fu_244_p2 : 8'd0);

assign shl_ln159_fu_244_p2 = 8'd1 << zext_ln154_1_fu_240_p1;

assign zext_ln152_fu_177_p1 = k_0_reg_86;

assign zext_ln153_fu_200_p1 = j_0_reg_109;

assign zext_ln154_1_fu_240_p1 = b_2_reg_142;

assign zext_ln154_fu_223_p1 = i_0_reg_131;

endmodule //honeybee
