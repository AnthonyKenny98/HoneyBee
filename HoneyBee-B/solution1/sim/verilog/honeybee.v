// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="honeybee,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.523250,HLS_SYN_LAT=507,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=3312,HLS_SYN_LUT=5566,HLS_VERSION=2019_2}" *)

module honeybee (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        edge_p1_x,
        edge_p1_y,
        edge_p1_z,
        edge_p2_x,
        edge_p2_y,
        edge_p2_z,
        ap_return
);

parameter    ap_ST_fsm_state1 = 108'd1;
parameter    ap_ST_fsm_state2 = 108'd2;
parameter    ap_ST_fsm_state3 = 108'd4;
parameter    ap_ST_fsm_state4 = 108'd8;
parameter    ap_ST_fsm_state5 = 108'd16;
parameter    ap_ST_fsm_state6 = 108'd32;
parameter    ap_ST_fsm_state7 = 108'd64;
parameter    ap_ST_fsm_state8 = 108'd128;
parameter    ap_ST_fsm_state9 = 108'd256;
parameter    ap_ST_fsm_state10 = 108'd512;
parameter    ap_ST_fsm_state11 = 108'd1024;
parameter    ap_ST_fsm_state12 = 108'd2048;
parameter    ap_ST_fsm_state13 = 108'd4096;
parameter    ap_ST_fsm_state14 = 108'd8192;
parameter    ap_ST_fsm_state15 = 108'd16384;
parameter    ap_ST_fsm_state16 = 108'd32768;
parameter    ap_ST_fsm_state17 = 108'd65536;
parameter    ap_ST_fsm_state18 = 108'd131072;
parameter    ap_ST_fsm_state19 = 108'd262144;
parameter    ap_ST_fsm_state20 = 108'd524288;
parameter    ap_ST_fsm_state21 = 108'd1048576;
parameter    ap_ST_fsm_state22 = 108'd2097152;
parameter    ap_ST_fsm_state23 = 108'd4194304;
parameter    ap_ST_fsm_state24 = 108'd8388608;
parameter    ap_ST_fsm_state25 = 108'd16777216;
parameter    ap_ST_fsm_state26 = 108'd33554432;
parameter    ap_ST_fsm_state27 = 108'd67108864;
parameter    ap_ST_fsm_state28 = 108'd134217728;
parameter    ap_ST_fsm_state29 = 108'd268435456;
parameter    ap_ST_fsm_state30 = 108'd536870912;
parameter    ap_ST_fsm_state31 = 108'd1073741824;
parameter    ap_ST_fsm_state32 = 108'd2147483648;
parameter    ap_ST_fsm_state33 = 108'd4294967296;
parameter    ap_ST_fsm_state34 = 108'd8589934592;
parameter    ap_ST_fsm_state35 = 108'd17179869184;
parameter    ap_ST_fsm_state36 = 108'd34359738368;
parameter    ap_ST_fsm_state37 = 108'd68719476736;
parameter    ap_ST_fsm_state38 = 108'd137438953472;
parameter    ap_ST_fsm_state39 = 108'd274877906944;
parameter    ap_ST_fsm_state40 = 108'd549755813888;
parameter    ap_ST_fsm_state41 = 108'd1099511627776;
parameter    ap_ST_fsm_state42 = 108'd2199023255552;
parameter    ap_ST_fsm_state43 = 108'd4398046511104;
parameter    ap_ST_fsm_state44 = 108'd8796093022208;
parameter    ap_ST_fsm_state45 = 108'd17592186044416;
parameter    ap_ST_fsm_state46 = 108'd35184372088832;
parameter    ap_ST_fsm_state47 = 108'd70368744177664;
parameter    ap_ST_fsm_state48 = 108'd140737488355328;
parameter    ap_ST_fsm_state49 = 108'd281474976710656;
parameter    ap_ST_fsm_state50 = 108'd562949953421312;
parameter    ap_ST_fsm_state51 = 108'd1125899906842624;
parameter    ap_ST_fsm_state52 = 108'd2251799813685248;
parameter    ap_ST_fsm_state53 = 108'd4503599627370496;
parameter    ap_ST_fsm_state54 = 108'd9007199254740992;
parameter    ap_ST_fsm_state55 = 108'd18014398509481984;
parameter    ap_ST_fsm_state56 = 108'd36028797018963968;
parameter    ap_ST_fsm_state57 = 108'd72057594037927936;
parameter    ap_ST_fsm_state58 = 108'd144115188075855872;
parameter    ap_ST_fsm_state59 = 108'd288230376151711744;
parameter    ap_ST_fsm_state60 = 108'd576460752303423488;
parameter    ap_ST_fsm_state61 = 108'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 108'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 108'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 108'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 108'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 108'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 108'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 108'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 108'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 108'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 108'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 108'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 108'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 108'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 108'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 108'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 108'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 108'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 108'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 108'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 108'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 108'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 108'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 108'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 108'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 108'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 108'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 108'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 108'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 108'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 108'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 108'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 108'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 108'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 108'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 108'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 108'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 108'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 108'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 108'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 108'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 108'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 108'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 108'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 108'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 108'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 108'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 108'd162259276829213363391578010288128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] edge_p1_x;
input  [31:0] edge_p1_y;
input  [31:0] edge_p1_z;
input  [31:0] edge_p2_x;
input  [31:0] edge_p2_y;
input  [31:0] edge_p2_z;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [107:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_190_p1;
reg   [31:0] reg_204;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state77;
wire   [31:0] grp_fu_163_p2;
reg   [31:0] reg_209;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state82;
reg   [31:0] reg_216;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state87;
wire   [31:0] grp_fu_182_p2;
reg   [31:0] reg_221;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state103;
reg   [31:0] tmp_1_i_i_reg_762;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_169_p2;
reg   [31:0] tmp_1_i3_i_reg_767;
wire   [31:0] grp_fu_175_p2;
reg   [31:0] tmp_1_i7_i_reg_773;
wire   [31:0] zext_ln73_fu_232_p1;
wire    ap_CS_fsm_state6;
wire   [1:0] k_fu_243_p2;
reg   [1:0] k_reg_787;
wire   [3:0] b_fu_249_p2;
reg   [3:0] b_reg_792;
wire    ap_CS_fsm_state37;
reg   [31:0] min_reg_797;
wire   [31:0] grp_fu_186_p2;
reg   [31:0] max_1_reg_804;
wire   [31:0] bitcast_ln32_fu_255_p1;
reg   [31:0] bitcast_ln32_reg_812;
wire   [0:0] icmp_ln32_1_fu_263_p2;
reg   [0:0] icmp_ln32_1_reg_817;
wire   [31:0] bitcast_ln44_fu_269_p1;
reg   [31:0] bitcast_ln44_reg_822;
wire   [0:0] icmp_ln44_1_fu_277_p2;
reg   [0:0] icmp_ln44_1_reg_827;
wire   [31:0] zext_ln74_fu_283_p1;
wire    ap_CS_fsm_state38;
wire   [1:0] j_fu_294_p2;
reg   [1:0] j_reg_840;
wire   [0:0] or_ln32_fu_315_p2;
reg   [0:0] or_ln32_reg_845;
wire   [0:0] icmp_ln74_fu_288_p2;
wire   [0:0] or_ln44_fu_335_p2;
reg   [0:0] or_ln44_reg_851;
reg   [31:0] min_1_reg_857;
wire    ap_CS_fsm_state69;
reg   [31:0] max_2_reg_865;
wire   [3:0] add_ln82_fu_340_p2;
reg   [3:0] add_ln82_reg_872;
wire    ap_CS_fsm_state71;
wire   [0:0] or_ln32_1_fu_375_p2;
reg   [0:0] or_ln32_1_reg_877;
wire   [31:0] max_3_fu_392_p3;
reg   [31:0] max_3_reg_882;
wire   [0:0] or_ln44_1_fu_427_p2;
reg   [0:0] or_ln44_1_reg_887;
wire   [31:0] min_2_fu_444_p3;
reg   [31:0] min_2_reg_892;
wire   [31:0] zext_ln75_fu_450_p1;
wire    ap_CS_fsm_state72;
wire   [1:0] i_fu_461_p2;
reg   [1:0] i_reg_905;
wire   [31:0] max_fu_532_p3;
reg   [31:0] max_reg_910;
wire    ap_CS_fsm_state100;
wire   [31:0] min_7_fu_604_p3;
reg   [31:0] min_7_reg_916;
wire    ap_CS_fsm_state105;
wire   [0:0] icmp_ln62_fu_645_p2;
reg   [0:0] icmp_ln62_reg_922;
wire    ap_CS_fsm_state106;
wire   [0:0] icmp_ln62_1_fu_651_p2;
reg   [0:0] icmp_ln62_1_reg_927;
wire   [0:0] icmp_ln62_2_fu_657_p2;
reg   [0:0] icmp_ln62_2_reg_932;
wire   [0:0] icmp_ln62_3_fu_663_p2;
reg   [0:0] icmp_ln62_3_reg_937;
wire   [0:0] grp_fu_193_p2;
reg   [0:0] tmp_13_reg_942;
wire    ap_CS_fsm_state107;
wire   [3:0] add_ln82_1_fu_712_p2;
wire    ap_CS_fsm_state108;
reg   [1:0] k_0_reg_96;
reg   [3:0] b_0_reg_107;
reg   [1:0] j_0_reg_119;
wire   [0:0] icmp_ln75_fu_455_p2;
reg   [3:0] b_1_reg_130;
reg   [1:0] i_0_reg_141;
reg   [3:0] b_2_reg_152;
reg   [7:0] collisions_1_fu_56;
wire   [7:0] collisions_fu_706_p2;
wire   [0:0] icmp_ln73_fu_237_p2;
reg   [31:0] grp_fu_163_p0;
reg   [31:0] grp_fu_163_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state83;
reg   [31:0] grp_fu_182_p0;
reg   [31:0] grp_fu_182_p1;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state88;
reg   [31:0] grp_fu_186_p1;
reg   [31:0] grp_fu_190_p0;
reg   [31:0] grp_fu_193_p0;
reg   [31:0] grp_fu_193_p1;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state104;
reg   [31:0] grp_fu_197_p0;
reg   [31:0] grp_fu_197_p1;
wire   [22:0] trunc_ln32_fu_259_p1;
wire   [22:0] trunc_ln44_fu_273_p1;
wire   [7:0] tmp_fu_300_p4;
wire   [0:0] icmp_ln32_fu_309_p2;
wire   [7:0] tmp_3_fu_320_p4;
wire   [0:0] icmp_ln44_fu_329_p2;
wire   [31:0] bitcast_ln32_1_fu_346_p1;
wire   [7:0] tmp_1_fu_349_p4;
wire   [22:0] trunc_ln32_1_fu_359_p1;
wire   [0:0] icmp_ln32_3_fu_369_p2;
wire   [0:0] icmp_ln32_2_fu_363_p2;
wire   [0:0] and_ln32_fu_381_p2;
wire   [0:0] and_ln32_1_fu_386_p2;
wire   [31:0] bitcast_ln44_1_fu_398_p1;
wire   [7:0] tmp_4_fu_401_p4;
wire   [22:0] trunc_ln44_1_fu_411_p1;
wire   [0:0] icmp_ln44_3_fu_421_p2;
wire   [0:0] icmp_ln44_2_fu_415_p2;
wire   [0:0] and_ln44_fu_433_p2;
wire   [0:0] grp_fu_197_p2;
wire   [0:0] and_ln44_1_fu_438_p2;
wire   [31:0] bitcast_ln27_fu_467_p1;
wire   [7:0] tmp_7_fu_471_p4;
wire   [22:0] trunc_ln27_fu_481_p1;
wire   [0:0] icmp_ln27_1_fu_491_p2;
wire   [0:0] icmp_ln27_fu_485_p2;
wire   [0:0] or_ln27_fu_497_p2;
wire   [0:0] and_ln27_fu_503_p2;
wire   [0:0] and_ln29_fu_514_p2;
wire   [0:0] and_ln29_1_fu_519_p2;
wire   [0:0] and_ln27_1_fu_508_p2;
wire   [31:0] max_6_fu_525_p3;
wire   [31:0] bitcast_ln39_fu_539_p1;
wire   [7:0] tmp_6_fu_543_p4;
wire   [22:0] trunc_ln39_fu_553_p1;
wire   [0:0] icmp_ln39_1_fu_563_p2;
wire   [0:0] icmp_ln39_fu_557_p2;
wire   [0:0] or_ln39_fu_569_p2;
wire   [0:0] and_ln39_fu_575_p2;
wire   [0:0] and_ln41_fu_586_p2;
wire   [0:0] and_ln41_1_fu_591_p2;
wire   [0:0] and_ln39_1_fu_580_p2;
wire   [31:0] min_4_fu_597_p3;
wire   [31:0] bitcast_ln62_fu_611_p1;
wire   [31:0] bitcast_ln62_1_fu_628_p1;
wire   [7:0] tmp_11_fu_614_p4;
wire   [22:0] trunc_ln62_fu_624_p1;
wire   [7:0] tmp_12_fu_631_p4;
wire   [22:0] trunc_ln62_1_fu_641_p1;
wire   [0:0] or_ln62_fu_669_p2;
wire   [0:0] or_ln62_1_fu_673_p2;
wire   [0:0] and_ln62_fu_677_p2;
wire   [7:0] zext_ln75_1_fu_688_p1;
wire   [0:0] and_ln62_1_fu_683_p2;
wire   [7:0] shl_ln80_fu_692_p2;
wire   [7:0] select_ln62_fu_698_p3;
reg   [1:0] grp_fu_163_opcode;
reg   [4:0] grp_fu_193_opcode;
reg   [4:0] grp_fu_197_opcode;
reg   [107:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 108'd1;
end

honeybee_faddfsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_faddfsubbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_163_p0),
    .din1(grp_fu_163_p1),
    .opcode(grp_fu_163_opcode),
    .ce(1'b1),
    .dout(grp_fu_163_p2)
);

honeybee_fsub_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(edge_p2_y),
    .din1(edge_p1_y),
    .ce(1'b1),
    .dout(grp_fu_169_p2)
);

honeybee_fsub_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32ncud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(edge_p2_z),
    .din1(edge_p1_z),
    .ce(1'b1),
    .dout(grp_fu_175_p2)
);

honeybee_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32ndEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_182_p0),
    .din1(grp_fu_182_p1),
    .ce(1'b1),
    .dout(grp_fu_182_p2)
);

honeybee_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32ndEe_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_209),
    .din1(grp_fu_186_p1),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

honeybee_sitofp_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_sitofp_3eOg_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_190_p0),
    .ce(1'b1),
    .dout(grp_fu_190_p1)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_193_p0),
    .din1(grp_fu_193_p1),
    .ce(1'b1),
    .opcode(grp_fu_193_opcode),
    .dout(grp_fu_193_p2)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_197_p0),
    .din1(grp_fu_197_p1),
    .ce(1'b1),
    .opcode(grp_fu_197_opcode),
    .dout(grp_fu_197_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_288_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
        b_0_reg_107 <= b_reg_792;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        b_0_reg_107 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_455_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
        b_1_reg_130 <= add_ln82_reg_872;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        b_1_reg_130 <= b_0_reg_107;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        b_2_reg_152 <= add_ln82_1_fu_712_p2;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        b_2_reg_152 <= b_1_reg_130;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        collisions_1_fu_56 <= collisions_fu_706_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        collisions_1_fu_56 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        i_0_reg_141 <= i_reg_905;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        i_0_reg_141 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_455_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
        j_0_reg_119 <= j_reg_840;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        j_0_reg_119 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_288_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
        k_0_reg_96 <= k_reg_787;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_reg_96 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        add_ln82_reg_872 <= add_ln82_fu_340_p2;
        max_3_reg_882 <= max_3_fu_392_p3;
        min_2_reg_892 <= min_2_fu_444_p3;
        or_ln32_1_reg_877 <= or_ln32_1_fu_375_p2;
        or_ln44_1_reg_887 <= or_ln44_1_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        b_reg_792 <= b_fu_249_p2;
        bitcast_ln32_reg_812 <= bitcast_ln32_fu_255_p1;
        bitcast_ln44_reg_822 <= bitcast_ln44_fu_269_p1;
        icmp_ln32_1_reg_817 <= icmp_ln32_1_fu_263_p2;
        icmp_ln44_1_reg_827 <= icmp_ln44_1_fu_277_p2;
        max_1_reg_804 <= grp_fu_186_p2;
        min_reg_797 <= grp_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        i_reg_905 <= i_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        icmp_ln62_1_reg_927 <= icmp_ln62_1_fu_651_p2;
        icmp_ln62_2_reg_932 <= icmp_ln62_2_fu_657_p2;
        icmp_ln62_3_reg_937 <= icmp_ln62_3_fu_663_p2;
        icmp_ln62_reg_922 <= icmp_ln62_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        j_reg_840 <= j_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_reg_787 <= k_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        max_2_reg_865 <= grp_fu_186_p2;
        min_1_reg_857 <= grp_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        max_reg_910 <= max_fu_532_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        min_7_reg_916 <= min_7_fu_604_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_288_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state38))) begin
        or_ln32_reg_845 <= or_ln32_fu_315_p2;
        or_ln44_reg_851 <= or_ln44_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_204 <= grp_fu_190_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_209 <= grp_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state21))) begin
        reg_216 <= grp_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state98))) begin
        reg_221 <= grp_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        tmp_13_reg_942 <= grp_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_1_i3_i_reg_767 <= grp_fu_169_p2;
        tmp_1_i7_i_reg_773 <= grp_fu_175_p2;
        tmp_1_i_i_reg_762 <= grp_fu_163_p2;
    end
end

always @ (*) begin
    if (((icmp_ln73_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln73_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        grp_fu_163_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_163_opcode = 2'd0;
    end else begin
        grp_fu_163_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_163_p0 = reg_209;
    end else if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_163_p0 = reg_204;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_163_p0 = edge_p2_x;
    end else begin
        grp_fu_163_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_163_p1 = edge_p1_y;
    end else if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_163_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_163_p1 = edge_p1_z;
    end else if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_163_p1 = edge_p1_x;
    end else begin
        grp_fu_163_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        grp_fu_182_p0 = reg_209;
    end else if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_182_p0 = reg_216;
    end else begin
        grp_fu_182_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state83))) begin
        grp_fu_182_p1 = tmp_1_i_i_reg_762;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_182_p1 = tmp_1_i3_i_reg_767;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_182_p1 = tmp_1_i7_i_reg_773;
    end else begin
        grp_fu_182_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_186_p1 = tmp_1_i3_i_reg_767;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_186_p1 = tmp_1_i7_i_reg_773;
    end else begin
        grp_fu_186_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_190_p0 = zext_ln75_fu_450_p1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_190_p0 = zext_ln74_fu_283_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_190_p0 = zext_ln73_fu_232_p1;
    end else begin
        grp_fu_190_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state106))) begin
        grp_fu_193_opcode = 5'd4;
    end else if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state70))) begin
        grp_fu_193_opcode = 5'd2;
    end else begin
        grp_fu_193_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        grp_fu_193_p0 = max_reg_910;
    end else if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state99))) begin
        grp_fu_193_p0 = reg_221;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_193_p0 = max_1_reg_804;
    end else begin
        grp_fu_193_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        grp_fu_193_p1 = min_7_reg_916;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        grp_fu_193_p1 = min_1_reg_857;
    end else if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state70))) begin
        grp_fu_193_p1 = max_2_reg_865;
    end else begin
        grp_fu_193_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        grp_fu_197_opcode = 5'd2;
    end else if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state70))) begin
        grp_fu_197_opcode = 5'd4;
    end else begin
        grp_fu_197_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        grp_fu_197_p0 = max_1_reg_804;
    end else if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state70))) begin
        grp_fu_197_p0 = min_reg_797;
    end else begin
        grp_fu_197_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state99))) begin
        grp_fu_197_p1 = reg_221;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_197_p1 = min_1_reg_857;
    end else begin
        grp_fu_197_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln73_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((icmp_ln74_fu_288_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((icmp_ln75_fu_455_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln82_1_fu_712_p2 = (4'd1 + b_2_reg_152);

assign add_ln82_fu_340_p2 = (4'd2 + b_1_reg_130);

assign and_ln27_1_fu_508_p2 = (grp_fu_193_p2 & and_ln27_fu_503_p2);

assign and_ln27_fu_503_p2 = (or_ln32_1_reg_877 & or_ln27_fu_497_p2);

assign and_ln29_1_fu_519_p2 = (grp_fu_197_p2 & and_ln29_fu_514_p2);

assign and_ln29_fu_514_p2 = (or_ln32_reg_845 & or_ln27_fu_497_p2);

assign and_ln32_1_fu_386_p2 = (grp_fu_193_p2 & and_ln32_fu_381_p2);

assign and_ln32_fu_381_p2 = (or_ln32_reg_845 & or_ln32_1_fu_375_p2);

assign and_ln39_1_fu_580_p2 = (grp_fu_193_p2 & and_ln39_fu_575_p2);

assign and_ln39_fu_575_p2 = (or_ln44_1_reg_887 & or_ln39_fu_569_p2);

assign and_ln41_1_fu_591_p2 = (grp_fu_197_p2 & and_ln41_fu_586_p2);

assign and_ln41_fu_586_p2 = (or_ln44_reg_851 & or_ln39_fu_569_p2);

assign and_ln44_1_fu_438_p2 = (grp_fu_197_p2 & and_ln44_fu_433_p2);

assign and_ln44_fu_433_p2 = (or_ln44_reg_851 & or_ln44_1_fu_427_p2);

assign and_ln62_1_fu_683_p2 = (tmp_13_reg_942 & and_ln62_fu_677_p2);

assign and_ln62_fu_677_p2 = (or_ln62_fu_669_p2 & or_ln62_1_fu_673_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign ap_return = collisions_1_fu_56;

assign b_fu_249_p2 = (4'd4 + b_0_reg_107);

assign bitcast_ln27_fu_467_p1 = reg_221;

assign bitcast_ln32_1_fu_346_p1 = max_2_reg_865;

assign bitcast_ln32_fu_255_p1 = grp_fu_186_p2;

assign bitcast_ln39_fu_539_p1 = reg_221;

assign bitcast_ln44_1_fu_398_p1 = min_1_reg_857;

assign bitcast_ln44_fu_269_p1 = grp_fu_182_p2;

assign bitcast_ln62_1_fu_628_p1 = min_7_reg_916;

assign bitcast_ln62_fu_611_p1 = max_reg_910;

assign collisions_fu_706_p2 = (select_ln62_fu_698_p3 | collisions_1_fu_56);

assign i_fu_461_p2 = (i_0_reg_141 + 2'd1);

assign icmp_ln27_1_fu_491_p2 = ((trunc_ln27_fu_481_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_485_p2 = ((tmp_7_fu_471_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_263_p2 = ((trunc_ln32_fu_259_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_2_fu_363_p2 = ((tmp_1_fu_349_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln32_3_fu_369_p2 = ((trunc_ln32_1_fu_359_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_309_p2 = ((tmp_fu_300_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_1_fu_563_p2 = ((trunc_ln39_fu_553_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_557_p2 = ((tmp_6_fu_543_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln44_1_fu_277_p2 = ((trunc_ln44_fu_273_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln44_2_fu_415_p2 = ((tmp_4_fu_401_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln44_3_fu_421_p2 = ((trunc_ln44_1_fu_411_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_329_p2 = ((tmp_3_fu_320_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln62_1_fu_651_p2 = ((trunc_ln62_fu_624_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln62_2_fu_657_p2 = ((tmp_12_fu_631_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln62_3_fu_663_p2 = ((trunc_ln62_1_fu_641_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_645_p2 = ((tmp_11_fu_614_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_237_p2 = ((k_0_reg_96 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_288_p2 = ((j_0_reg_119 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_455_p2 = ((i_0_reg_141 == 2'd2) ? 1'b1 : 1'b0);

assign j_fu_294_p2 = (j_0_reg_119 + 2'd1);

assign k_fu_243_p2 = (k_0_reg_96 + 2'd1);

assign max_3_fu_392_p3 = ((and_ln32_1_fu_386_p2[0:0] === 1'b1) ? max_1_reg_804 : max_2_reg_865);

assign max_6_fu_525_p3 = ((and_ln29_1_fu_519_p2[0:0] === 1'b1) ? max_1_reg_804 : reg_221);

assign max_fu_532_p3 = ((and_ln27_1_fu_508_p2[0:0] === 1'b1) ? max_6_fu_525_p3 : max_3_reg_882);

assign min_2_fu_444_p3 = ((and_ln44_1_fu_438_p2[0:0] === 1'b1) ? min_reg_797 : min_1_reg_857);

assign min_4_fu_597_p3 = ((and_ln41_1_fu_591_p2[0:0] === 1'b1) ? min_reg_797 : reg_221);

assign min_7_fu_604_p3 = ((and_ln39_1_fu_580_p2[0:0] === 1'b1) ? min_4_fu_597_p3 : min_2_reg_892);

assign or_ln27_fu_497_p2 = (icmp_ln27_fu_485_p2 | icmp_ln27_1_fu_491_p2);

assign or_ln32_1_fu_375_p2 = (icmp_ln32_3_fu_369_p2 | icmp_ln32_2_fu_363_p2);

assign or_ln32_fu_315_p2 = (icmp_ln32_fu_309_p2 | icmp_ln32_1_reg_817);

assign or_ln39_fu_569_p2 = (icmp_ln39_fu_557_p2 | icmp_ln39_1_fu_563_p2);

assign or_ln44_1_fu_427_p2 = (icmp_ln44_3_fu_421_p2 | icmp_ln44_2_fu_415_p2);

assign or_ln44_fu_335_p2 = (icmp_ln44_fu_329_p2 | icmp_ln44_1_reg_827);

assign or_ln62_1_fu_673_p2 = (icmp_ln62_3_reg_937 | icmp_ln62_2_reg_932);

assign or_ln62_fu_669_p2 = (icmp_ln62_reg_922 | icmp_ln62_1_reg_927);

assign select_ln62_fu_698_p3 = ((and_ln62_1_fu_683_p2[0:0] === 1'b1) ? shl_ln80_fu_692_p2 : 8'd0);

assign shl_ln80_fu_692_p2 = 8'd1 << zext_ln75_1_fu_688_p1;

assign tmp_11_fu_614_p4 = {{bitcast_ln62_fu_611_p1[30:23]}};

assign tmp_12_fu_631_p4 = {{bitcast_ln62_1_fu_628_p1[30:23]}};

assign tmp_1_fu_349_p4 = {{bitcast_ln32_1_fu_346_p1[30:23]}};

assign tmp_3_fu_320_p4 = {{bitcast_ln44_reg_822[30:23]}};

assign tmp_4_fu_401_p4 = {{bitcast_ln44_1_fu_398_p1[30:23]}};

assign tmp_6_fu_543_p4 = {{bitcast_ln39_fu_539_p1[30:23]}};

assign tmp_7_fu_471_p4 = {{bitcast_ln27_fu_467_p1[30:23]}};

assign tmp_fu_300_p4 = {{bitcast_ln32_reg_812[30:23]}};

assign trunc_ln27_fu_481_p1 = bitcast_ln27_fu_467_p1[22:0];

assign trunc_ln32_1_fu_359_p1 = bitcast_ln32_1_fu_346_p1[22:0];

assign trunc_ln32_fu_259_p1 = bitcast_ln32_fu_255_p1[22:0];

assign trunc_ln39_fu_553_p1 = bitcast_ln39_fu_539_p1[22:0];

assign trunc_ln44_1_fu_411_p1 = bitcast_ln44_1_fu_398_p1[22:0];

assign trunc_ln44_fu_273_p1 = bitcast_ln44_fu_269_p1[22:0];

assign trunc_ln62_1_fu_641_p1 = bitcast_ln62_1_fu_628_p1[22:0];

assign trunc_ln62_fu_624_p1 = bitcast_ln62_fu_611_p1[22:0];

assign zext_ln73_fu_232_p1 = k_0_reg_96;

assign zext_ln74_fu_283_p1 = j_0_reg_119;

assign zext_ln75_1_fu_688_p1 = b_2_reg_152;

assign zext_ln75_fu_450_p1 = i_0_reg_141;

endmodule //honeybee
