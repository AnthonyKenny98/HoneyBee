// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lineIntersectGrid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        grid_x,
        grid_y,
        grid_z,
        edge_p1_x,
        edge_p1_y,
        edge_p1_z,
        edge_p2_x,
        edge_p2_y,
        edge_p2_z,
        ap_return
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_state11 = 30'd1024;
parameter    ap_ST_fsm_state12 = 30'd2048;
parameter    ap_ST_fsm_state13 = 30'd4096;
parameter    ap_ST_fsm_state14 = 30'd8192;
parameter    ap_ST_fsm_state15 = 30'd16384;
parameter    ap_ST_fsm_state16 = 30'd32768;
parameter    ap_ST_fsm_state17 = 30'd65536;
parameter    ap_ST_fsm_state18 = 30'd131072;
parameter    ap_ST_fsm_state19 = 30'd262144;
parameter    ap_ST_fsm_state20 = 30'd524288;
parameter    ap_ST_fsm_state21 = 30'd1048576;
parameter    ap_ST_fsm_state22 = 30'd2097152;
parameter    ap_ST_fsm_state23 = 30'd4194304;
parameter    ap_ST_fsm_state24 = 30'd8388608;
parameter    ap_ST_fsm_state25 = 30'd16777216;
parameter    ap_ST_fsm_state26 = 30'd33554432;
parameter    ap_ST_fsm_state27 = 30'd67108864;
parameter    ap_ST_fsm_state28 = 30'd134217728;
parameter    ap_ST_fsm_state29 = 30'd268435456;
parameter    ap_ST_fsm_state30 = 30'd536870912;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] grid_x;
input  [31:0] grid_y;
input  [31:0] grid_z;
input  [31:0] edge_p1_x;
input  [31:0] edge_p1_y;
input  [31:0] edge_p1_z;
input  [31:0] edge_p2_x;
input  [31:0] edge_p2_y;
input  [31:0] edge_p2_z;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_125_p2;
reg   [31:0] reg_149;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state26;
wire   [31:0] grp_fu_129_p2;
reg   [31:0] reg_155;
wire   [31:0] grp_fu_133_p2;
reg   [31:0] reg_161;
wire   [31:0] grp_fu_86_p2;
reg   [31:0] tmp_i_reg_629;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_92_p2;
reg   [31:0] tmp_1_i_reg_635;
wire   [31:0] grp_fu_98_p2;
reg   [31:0] tmp_i1_reg_640;
wire   [31:0] grp_fu_104_p2;
reg   [31:0] tmp_1_i3_reg_646;
wire   [31:0] grp_fu_110_p2;
reg   [31:0] tmp_i5_reg_651;
wire   [31:0] grp_fu_116_p2;
reg   [31:0] tmp_1_i7_reg_657;
reg   [31:0] tmp_i_4_reg_662;
wire    ap_CS_fsm_state10;
reg   [31:0] tmp_i2_reg_667;
reg   [31:0] tmp_i6_reg_672;
wire   [31:0] max_fu_327_p3;
reg   [31:0] max_reg_677;
wire    ap_CS_fsm_state23;
wire   [31:0] min_7_fu_495_p3;
reg   [31:0] min_7_reg_683;
wire    ap_CS_fsm_state28;
wire   [0:0] icmp_ln62_fu_537_p2;
reg   [0:0] icmp_ln62_reg_689;
wire    ap_CS_fsm_state29;
wire   [0:0] icmp_ln62_1_fu_543_p2;
reg   [0:0] icmp_ln62_1_reg_694;
wire   [0:0] icmp_ln62_2_fu_549_p2;
reg   [0:0] icmp_ln62_2_reg_699;
wire   [0:0] icmp_ln62_3_fu_555_p2;
reg   [0:0] icmp_ln62_3_reg_704;
reg   [31:0] grp_fu_86_p0;
reg   [31:0] grp_fu_86_p1;
wire    ap_CS_fsm_state6;
reg   [31:0] grp_fu_92_p0;
reg   [31:0] grp_fu_92_p1;
reg   [31:0] grp_fu_98_p0;
reg   [31:0] grp_fu_98_p1;
reg   [31:0] grp_fu_125_p0;
wire    ap_CS_fsm_state11;
reg   [31:0] grp_fu_129_p0;
reg   [31:0] grp_fu_133_p0;
reg   [31:0] grp_fu_137_p0;
reg   [31:0] grp_fu_137_p1;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state27;
wire   [31:0] bitcast_ln27_fu_167_p1;
wire   [31:0] bitcast_ln27_1_fu_185_p1;
wire   [7:0] tmp_9_fu_171_p4;
wire   [22:0] trunc_ln27_fu_181_p1;
wire   [0:0] icmp_ln27_1_fu_209_p2;
wire   [0:0] icmp_ln27_fu_203_p2;
wire   [7:0] tmp_s_fu_189_p4;
wire   [22:0] trunc_ln27_1_fu_199_p1;
wire   [0:0] icmp_ln27_3_fu_227_p2;
wire   [0:0] icmp_ln27_2_fu_221_p2;
wire   [0:0] or_ln27_fu_215_p2;
wire   [0:0] or_ln27_1_fu_233_p2;
wire   [0:0] and_ln27_fu_239_p2;
wire   [0:0] grp_fu_137_p2;
wire   [31:0] bitcast_ln29_fu_251_p1;
wire   [7:0] tmp_6_fu_255_p4;
wire   [22:0] trunc_ln29_fu_265_p1;
wire   [0:0] icmp_ln29_1_fu_275_p2;
wire   [0:0] icmp_ln29_fu_269_p2;
wire   [0:0] or_ln29_fu_281_p2;
wire   [0:0] and_ln29_fu_287_p2;
wire   [0:0] grp_fu_141_p2;
wire   [0:0] and_ln29_1_fu_293_p2;
wire   [0:0] and_ln32_fu_307_p2;
wire   [0:0] grp_fu_145_p2;
wire   [0:0] and_ln32_1_fu_313_p2;
wire   [0:0] and_ln27_1_fu_245_p2;
wire   [31:0] max_4_fu_299_p3;
wire   [31:0] max_6_fu_319_p3;
wire   [31:0] bitcast_ln39_fu_335_p1;
wire   [31:0] bitcast_ln39_1_fu_353_p1;
wire   [7:0] tmp_fu_339_p4;
wire   [22:0] trunc_ln39_fu_349_p1;
wire   [0:0] icmp_ln39_1_fu_377_p2;
wire   [0:0] icmp_ln39_fu_371_p2;
wire   [7:0] tmp_1_fu_357_p4;
wire   [22:0] trunc_ln39_1_fu_367_p1;
wire   [0:0] icmp_ln39_3_fu_395_p2;
wire   [0:0] icmp_ln39_2_fu_389_p2;
wire   [0:0] or_ln39_fu_383_p2;
wire   [0:0] or_ln39_1_fu_401_p2;
wire   [0:0] and_ln39_fu_407_p2;
wire   [31:0] bitcast_ln41_fu_419_p1;
wire   [7:0] tmp_3_fu_423_p4;
wire   [22:0] trunc_ln41_fu_433_p1;
wire   [0:0] icmp_ln41_1_fu_443_p2;
wire   [0:0] icmp_ln41_fu_437_p2;
wire   [0:0] or_ln41_fu_449_p2;
wire   [0:0] and_ln41_fu_455_p2;
wire   [0:0] and_ln41_1_fu_461_p2;
wire   [0:0] and_ln44_fu_475_p2;
wire   [0:0] and_ln44_1_fu_481_p2;
wire   [0:0] and_ln39_1_fu_413_p2;
wire   [31:0] min_2_fu_467_p3;
wire   [31:0] min_4_fu_487_p3;
wire   [31:0] bitcast_ln62_fu_503_p1;
wire   [31:0] bitcast_ln62_1_fu_520_p1;
wire   [7:0] tmp_11_fu_506_p4;
wire   [22:0] trunc_ln62_fu_516_p1;
wire   [7:0] tmp_12_fu_523_p4;
wire   [22:0] trunc_ln62_1_fu_533_p1;
wire    ap_CS_fsm_state30;
wire   [0:0] or_ln62_fu_561_p2;
wire   [0:0] or_ln62_1_fu_565_p2;
wire   [0:0] and_ln62_fu_569_p2;
reg   [1:0] grp_fu_86_opcode;
reg   [1:0] grp_fu_92_opcode;
reg   [1:0] grp_fu_98_opcode;
reg   [4:0] grp_fu_137_opcode;
reg   [4:0] grp_fu_141_opcode;
reg   [4:0] grp_fu_145_opcode;
wire   [0:0] and_ln62_1_fu_575_p2;
reg   [0:0] ap_return_preg;
reg   [29:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
#0 ap_return_preg = 1'd0;
end

honeybee_faddfsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_faddfsubbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_86_p0),
    .din1(grp_fu_86_p1),
    .opcode(grp_fu_86_opcode),
    .ce(1'b1),
    .dout(grp_fu_86_p2)
);

honeybee_faddfsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_faddfsubbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_92_p0),
    .din1(grp_fu_92_p1),
    .opcode(grp_fu_92_opcode),
    .ce(1'b1),
    .dout(grp_fu_92_p2)
);

honeybee_faddfsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_faddfsubbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_98_p0),
    .din1(grp_fu_98_p1),
    .opcode(grp_fu_98_opcode),
    .ce(1'b1),
    .dout(grp_fu_98_p2)
);

honeybee_fsub_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32ncud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(edge_p2_y),
    .din1(edge_p1_y),
    .ce(1'b1),
    .dout(grp_fu_104_p2)
);

honeybee_fsub_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32ncud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grid_z),
    .din1(edge_p1_z),
    .ce(1'b1),
    .dout(grp_fu_110_p2)
);

honeybee_fsub_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32ncud_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(edge_p2_z),
    .din1(edge_p1_z),
    .ce(1'b1),
    .dout(grp_fu_116_p2)
);

honeybee_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32ndEe_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_125_p0),
    .din1(tmp_1_i_reg_635),
    .ce(1'b1),
    .dout(grp_fu_125_p2)
);

honeybee_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32ndEe_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_129_p0),
    .din1(tmp_1_i3_reg_646),
    .ce(1'b1),
    .dout(grp_fu_129_p2)
);

honeybee_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32ndEe_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_133_p0),
    .din1(tmp_1_i7_reg_657),
    .ce(1'b1),
    .dout(grp_fu_133_p2)
);

honeybee_fcmp_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32neOg_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_137_p0),
    .din1(grp_fu_137_p1),
    .ce(1'b1),
    .opcode(grp_fu_137_opcode),
    .dout(grp_fu_137_p2)
);

honeybee_fcmp_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32neOg_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_161),
    .din1(reg_149),
    .ce(1'b1),
    .opcode(grp_fu_141_opcode),
    .dout(grp_fu_141_p2)
);

honeybee_fcmp_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32neOg_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_161),
    .din1(reg_155),
    .ce(1'b1),
    .opcode(grp_fu_145_opcode),
    .dout(grp_fu_145_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_return_preg <= and_ln62_1_fu_575_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        icmp_ln62_1_reg_694 <= icmp_ln62_1_fu_543_p2;
        icmp_ln62_2_reg_699 <= icmp_ln62_2_fu_549_p2;
        icmp_ln62_3_reg_704 <= icmp_ln62_3_fu_555_p2;
        icmp_ln62_reg_689 <= icmp_ln62_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        max_reg_677 <= max_fu_327_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        min_7_reg_683 <= min_7_fu_495_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state21))) begin
        reg_149 <= grp_fu_125_p2;
        reg_155 <= grp_fu_129_p2;
        reg_161 <= grp_fu_133_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_1_i3_reg_646 <= grp_fu_104_p2;
        tmp_1_i7_reg_657 <= grp_fu_116_p2;
        tmp_1_i_reg_635 <= grp_fu_92_p2;
        tmp_i1_reg_640 <= grp_fu_98_p2;
        tmp_i5_reg_651 <= grp_fu_110_p2;
        tmp_i_reg_629 <= grp_fu_86_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_i2_reg_667 <= grp_fu_92_p2;
        tmp_i6_reg_672 <= grp_fu_98_p2;
        tmp_i_4_reg_662 <= grp_fu_86_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        ap_return = and_ln62_1_fu_575_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_125_p0 = tmp_i_4_reg_662;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_125_p0 = tmp_i_reg_629;
    end else begin
        grp_fu_125_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_129_p0 = tmp_i2_reg_667;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_129_p0 = tmp_i1_reg_640;
    end else begin
        grp_fu_129_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_133_p0 = tmp_i6_reg_672;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_133_p0 = tmp_i5_reg_651;
    end else begin
        grp_fu_133_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_137_opcode = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_137_opcode = 5'd2;
    end else begin
        grp_fu_137_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_137_p0 = max_reg_677;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_137_p0 = reg_149;
    end else begin
        grp_fu_137_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_137_p1 = min_7_reg_683;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_137_p1 = reg_155;
    end else begin
        grp_fu_137_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_141_opcode = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_141_opcode = 5'd2;
    end else begin
        grp_fu_141_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_145_opcode = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_145_opcode = 5'd2;
    end else begin
        grp_fu_145_opcode = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_86_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_86_opcode = 2'd0;
    end else begin
        grp_fu_86_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_86_p0 = tmp_i_reg_629;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_86_p0 = grid_x;
    end else begin
        grp_fu_86_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_86_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_86_p1 = edge_p1_x;
    end else begin
        grp_fu_86_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_92_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_92_opcode = 2'd0;
    end else begin
        grp_fu_92_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_92_p0 = tmp_i1_reg_640;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_92_p0 = edge_p2_x;
    end else begin
        grp_fu_92_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_92_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_92_p1 = edge_p1_x;
    end else begin
        grp_fu_92_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_98_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_98_opcode = 2'd0;
    end else begin
        grp_fu_98_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_98_p0 = tmp_i5_reg_651;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_98_p0 = grid_y;
    end else begin
        grp_fu_98_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_98_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_98_p1 = edge_p1_y;
    end else begin
        grp_fu_98_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln27_1_fu_245_p2 = (grp_fu_137_p2 & and_ln27_fu_239_p2);

assign and_ln27_fu_239_p2 = (or_ln27_fu_215_p2 & or_ln27_1_fu_233_p2);

assign and_ln29_1_fu_293_p2 = (grp_fu_141_p2 & and_ln29_fu_287_p2);

assign and_ln29_fu_287_p2 = (or_ln29_fu_281_p2 & or_ln27_fu_215_p2);

assign and_ln32_1_fu_313_p2 = (grp_fu_145_p2 & and_ln32_fu_307_p2);

assign and_ln32_fu_307_p2 = (or_ln29_fu_281_p2 & or_ln27_1_fu_233_p2);

assign and_ln39_1_fu_413_p2 = (grp_fu_137_p2 & and_ln39_fu_407_p2);

assign and_ln39_fu_407_p2 = (or_ln39_fu_383_p2 & or_ln39_1_fu_401_p2);

assign and_ln41_1_fu_461_p2 = (grp_fu_141_p2 & and_ln41_fu_455_p2);

assign and_ln41_fu_455_p2 = (or_ln41_fu_449_p2 & or_ln39_fu_383_p2);

assign and_ln44_1_fu_481_p2 = (grp_fu_145_p2 & and_ln44_fu_475_p2);

assign and_ln44_fu_475_p2 = (or_ln41_fu_449_p2 & or_ln39_1_fu_401_p2);

assign and_ln62_1_fu_575_p2 = (grp_fu_137_p2 & and_ln62_fu_569_p2);

assign and_ln62_fu_569_p2 = (or_ln62_fu_561_p2 & or_ln62_1_fu_565_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign bitcast_ln27_1_fu_185_p1 = reg_155;

assign bitcast_ln27_fu_167_p1 = reg_149;

assign bitcast_ln29_fu_251_p1 = reg_161;

assign bitcast_ln39_1_fu_353_p1 = reg_155;

assign bitcast_ln39_fu_335_p1 = reg_149;

assign bitcast_ln41_fu_419_p1 = reg_161;

assign bitcast_ln62_1_fu_520_p1 = min_7_reg_683;

assign bitcast_ln62_fu_503_p1 = max_reg_677;

assign icmp_ln27_1_fu_209_p2 = ((trunc_ln27_fu_181_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_2_fu_221_p2 = ((tmp_s_fu_189_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_3_fu_227_p2 = ((trunc_ln27_1_fu_199_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_203_p2 = ((tmp_9_fu_171_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_275_p2 = ((trunc_ln29_fu_265_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_269_p2 = ((tmp_6_fu_255_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_1_fu_377_p2 = ((trunc_ln39_fu_349_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_2_fu_389_p2 = ((tmp_1_fu_357_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_3_fu_395_p2 = ((trunc_ln39_1_fu_367_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_371_p2 = ((tmp_fu_339_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln41_1_fu_443_p2 = ((trunc_ln41_fu_433_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_437_p2 = ((tmp_3_fu_423_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln62_1_fu_543_p2 = ((trunc_ln62_fu_516_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln62_2_fu_549_p2 = ((tmp_12_fu_523_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln62_3_fu_555_p2 = ((trunc_ln62_1_fu_533_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_537_p2 = ((tmp_11_fu_506_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_4_fu_299_p3 = ((and_ln29_1_fu_293_p2[0:0] === 1'b1) ? reg_161 : reg_149);

assign max_6_fu_319_p3 = ((and_ln32_1_fu_313_p2[0:0] === 1'b1) ? reg_161 : reg_155);

assign max_fu_327_p3 = ((and_ln27_1_fu_245_p2[0:0] === 1'b1) ? max_4_fu_299_p3 : max_6_fu_319_p3);

assign min_2_fu_467_p3 = ((and_ln41_1_fu_461_p2[0:0] === 1'b1) ? reg_161 : reg_149);

assign min_4_fu_487_p3 = ((and_ln44_1_fu_481_p2[0:0] === 1'b1) ? reg_161 : reg_155);

assign min_7_fu_495_p3 = ((and_ln39_1_fu_413_p2[0:0] === 1'b1) ? min_2_fu_467_p3 : min_4_fu_487_p3);

assign or_ln27_1_fu_233_p2 = (icmp_ln27_3_fu_227_p2 | icmp_ln27_2_fu_221_p2);

assign or_ln27_fu_215_p2 = (icmp_ln27_fu_203_p2 | icmp_ln27_1_fu_209_p2);

assign or_ln29_fu_281_p2 = (icmp_ln29_fu_269_p2 | icmp_ln29_1_fu_275_p2);

assign or_ln39_1_fu_401_p2 = (icmp_ln39_3_fu_395_p2 | icmp_ln39_2_fu_389_p2);

assign or_ln39_fu_383_p2 = (icmp_ln39_fu_371_p2 | icmp_ln39_1_fu_377_p2);

assign or_ln41_fu_449_p2 = (icmp_ln41_fu_437_p2 | icmp_ln41_1_fu_443_p2);

assign or_ln62_1_fu_565_p2 = (icmp_ln62_3_reg_704 | icmp_ln62_2_reg_699);

assign or_ln62_fu_561_p2 = (icmp_ln62_reg_689 | icmp_ln62_1_reg_694);

assign tmp_11_fu_506_p4 = {{bitcast_ln62_fu_503_p1[30:23]}};

assign tmp_12_fu_523_p4 = {{bitcast_ln62_1_fu_520_p1[30:23]}};

assign tmp_1_fu_357_p4 = {{bitcast_ln39_1_fu_353_p1[30:23]}};

assign tmp_3_fu_423_p4 = {{bitcast_ln41_fu_419_p1[30:23]}};

assign tmp_6_fu_255_p4 = {{bitcast_ln29_fu_251_p1[30:23]}};

assign tmp_9_fu_171_p4 = {{bitcast_ln27_fu_167_p1[30:23]}};

assign tmp_fu_339_p4 = {{bitcast_ln39_fu_335_p1[30:23]}};

assign tmp_s_fu_189_p4 = {{bitcast_ln27_1_fu_185_p1[30:23]}};

assign trunc_ln27_1_fu_199_p1 = bitcast_ln27_1_fu_185_p1[22:0];

assign trunc_ln27_fu_181_p1 = bitcast_ln27_fu_167_p1[22:0];

assign trunc_ln29_fu_265_p1 = bitcast_ln29_fu_251_p1[22:0];

assign trunc_ln39_1_fu_367_p1 = bitcast_ln39_1_fu_353_p1[22:0];

assign trunc_ln39_fu_349_p1 = bitcast_ln39_fu_335_p1[22:0];

assign trunc_ln41_fu_433_p1 = bitcast_ln41_fu_419_p1[22:0];

assign trunc_ln62_1_fu_533_p1 = bitcast_ln62_1_fu_520_p1[22:0];

assign trunc_ln62_fu_516_p1 = bitcast_ln62_fu_503_p1[22:0];

endmodule //lineIntersectGrid
