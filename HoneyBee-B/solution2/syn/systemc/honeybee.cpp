// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "honeybee.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic honeybee::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic honeybee::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> honeybee::ap_ST_fsm_state1 = "1";
const sc_lv<16> honeybee::ap_ST_fsm_state2 = "10";
const sc_lv<16> honeybee::ap_ST_fsm_state3 = "100";
const sc_lv<16> honeybee::ap_ST_fsm_state4 = "1000";
const sc_lv<16> honeybee::ap_ST_fsm_state5 = "10000";
const sc_lv<16> honeybee::ap_ST_fsm_state6 = "100000";
const sc_lv<16> honeybee::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> honeybee::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> honeybee::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> honeybee::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> honeybee::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> honeybee::ap_ST_fsm_state12 = "100000000000";
const sc_lv<16> honeybee::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<16> honeybee::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<16> honeybee::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<16> honeybee::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> honeybee::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> honeybee::ap_const_lv32_1 = "1";
const sc_lv<32> honeybee::ap_const_lv32_6 = "110";
const sc_lv<32> honeybee::ap_const_lv32_7 = "111";
const sc_lv<32> honeybee::ap_const_lv32_C = "1100";
const sc_lv<32> honeybee::ap_const_lv32_E = "1110";
const bool honeybee::ap_const_boolean_0 = false;
const sc_lv<32> honeybee::ap_const_lv32_F = "1111";
const sc_lv<3> honeybee::ap_const_lv3_0 = "000";
const sc_lv<1> honeybee::ap_const_lv1_1 = "1";
const sc_lv<7> honeybee::ap_const_lv7_0 = "0000000";
const sc_lv<32> honeybee::ap_const_lv32_D = "1101";
const sc_lv<32> honeybee::ap_const_lv32_3F800000 = "111111100000000000000000000000";
const sc_lv<32> honeybee::ap_const_lv32_40000000 = "1000000000000000000000000000000";
const sc_lv<32> honeybee::ap_const_lv32_40400000 = "1000000010000000000000000000000";
const sc_lv<64> honeybee::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<3> honeybee::ap_const_lv3_4 = "100";
const sc_lv<3> honeybee::ap_const_lv3_1 = "1";
const sc_lv<7> honeybee::ap_const_lv7_10 = "10000";
const sc_lv<6> honeybee::ap_const_lv6_1 = "1";
const sc_lv<7> honeybee::ap_const_lv7_1 = "1";
const sc_lv<7> honeybee::ap_const_lv7_4 = "100";
const sc_lv<6> honeybee::ap_const_lv6_3 = "11";
const bool honeybee::ap_const_boolean_1 = true;

honeybee::honeybee(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_lineIntersectGrid_fu_153 = new lineIntersectGrid("grp_lineIntersectGrid_fu_153");
    grp_lineIntersectGrid_fu_153->ap_clk(ap_clk);
    grp_lineIntersectGrid_fu_153->ap_rst(ap_rst);
    grp_lineIntersectGrid_fu_153->ap_start(grp_lineIntersectGrid_fu_153_ap_start);
    grp_lineIntersectGrid_fu_153->ap_done(grp_lineIntersectGrid_fu_153_ap_done);
    grp_lineIntersectGrid_fu_153->ap_idle(grp_lineIntersectGrid_fu_153_ap_idle);
    grp_lineIntersectGrid_fu_153->ap_ready(grp_lineIntersectGrid_fu_153_ap_ready);
    grp_lineIntersectGrid_fu_153->grid_x(ap_var_for_const0);
    grp_lineIntersectGrid_fu_153->grid_y(grid_y_reg_484);
    grp_lineIntersectGrid_fu_153->grid_z(grid_z_reg_463);
    grp_lineIntersectGrid_fu_153->edge_p1_x(edge_p1_x);
    grp_lineIntersectGrid_fu_153->edge_p1_y(edge_p1_y);
    grp_lineIntersectGrid_fu_153->edge_p1_z(edge_p1_z);
    grp_lineIntersectGrid_fu_153->edge_p2_x(edge_p2_x);
    grp_lineIntersectGrid_fu_153->edge_p2_y(edge_p2_y);
    grp_lineIntersectGrid_fu_153->edge_p2_z(edge_p2_z);
    grp_lineIntersectGrid_fu_153->ap_return(grp_lineIntersectGrid_fu_153_ap_return);
    grp_lineIntersectGrid_fu_167 = new lineIntersectGrid("grp_lineIntersectGrid_fu_167");
    grp_lineIntersectGrid_fu_167->ap_clk(ap_clk);
    grp_lineIntersectGrid_fu_167->ap_rst(ap_rst);
    grp_lineIntersectGrid_fu_167->ap_start(grp_lineIntersectGrid_fu_167_ap_start);
    grp_lineIntersectGrid_fu_167->ap_done(grp_lineIntersectGrid_fu_167_ap_done);
    grp_lineIntersectGrid_fu_167->ap_idle(grp_lineIntersectGrid_fu_167_ap_idle);
    grp_lineIntersectGrid_fu_167->ap_ready(grp_lineIntersectGrid_fu_167_ap_ready);
    grp_lineIntersectGrid_fu_167->grid_x(ap_var_for_const1);
    grp_lineIntersectGrid_fu_167->grid_y(grid_y_reg_484);
    grp_lineIntersectGrid_fu_167->grid_z(grid_z_reg_463);
    grp_lineIntersectGrid_fu_167->edge_p1_x(edge_p1_x);
    grp_lineIntersectGrid_fu_167->edge_p1_y(edge_p1_y);
    grp_lineIntersectGrid_fu_167->edge_p1_z(edge_p1_z);
    grp_lineIntersectGrid_fu_167->edge_p2_x(edge_p2_x);
    grp_lineIntersectGrid_fu_167->edge_p2_y(edge_p2_y);
    grp_lineIntersectGrid_fu_167->edge_p2_z(edge_p2_z);
    grp_lineIntersectGrid_fu_167->ap_return(grp_lineIntersectGrid_fu_167_ap_return);
    grp_lineIntersectGrid_fu_181 = new lineIntersectGrid("grp_lineIntersectGrid_fu_181");
    grp_lineIntersectGrid_fu_181->ap_clk(ap_clk);
    grp_lineIntersectGrid_fu_181->ap_rst(ap_rst);
    grp_lineIntersectGrid_fu_181->ap_start(grp_lineIntersectGrid_fu_181_ap_start);
    grp_lineIntersectGrid_fu_181->ap_done(grp_lineIntersectGrid_fu_181_ap_done);
    grp_lineIntersectGrid_fu_181->ap_idle(grp_lineIntersectGrid_fu_181_ap_idle);
    grp_lineIntersectGrid_fu_181->ap_ready(grp_lineIntersectGrid_fu_181_ap_ready);
    grp_lineIntersectGrid_fu_181->grid_x(ap_var_for_const2);
    grp_lineIntersectGrid_fu_181->grid_y(grid_y_reg_484);
    grp_lineIntersectGrid_fu_181->grid_z(grid_z_reg_463);
    grp_lineIntersectGrid_fu_181->edge_p1_x(edge_p1_x);
    grp_lineIntersectGrid_fu_181->edge_p1_y(edge_p1_y);
    grp_lineIntersectGrid_fu_181->edge_p1_z(edge_p1_z);
    grp_lineIntersectGrid_fu_181->edge_p2_x(edge_p2_x);
    grp_lineIntersectGrid_fu_181->edge_p2_y(edge_p2_y);
    grp_lineIntersectGrid_fu_181->edge_p2_z(edge_p2_z);
    grp_lineIntersectGrid_fu_181->ap_return(grp_lineIntersectGrid_fu_181_ap_return);
    grp_lineIntersectGrid_fu_195 = new lineIntersectGrid("grp_lineIntersectGrid_fu_195");
    grp_lineIntersectGrid_fu_195->ap_clk(ap_clk);
    grp_lineIntersectGrid_fu_195->ap_rst(ap_rst);
    grp_lineIntersectGrid_fu_195->ap_start(grp_lineIntersectGrid_fu_195_ap_start);
    grp_lineIntersectGrid_fu_195->ap_done(grp_lineIntersectGrid_fu_195_ap_done);
    grp_lineIntersectGrid_fu_195->ap_idle(grp_lineIntersectGrid_fu_195_ap_idle);
    grp_lineIntersectGrid_fu_195->ap_ready(grp_lineIntersectGrid_fu_195_ap_ready);
    grp_lineIntersectGrid_fu_195->grid_x(ap_var_for_const3);
    grp_lineIntersectGrid_fu_195->grid_y(grid_y_reg_484);
    grp_lineIntersectGrid_fu_195->grid_z(grid_z_reg_463);
    grp_lineIntersectGrid_fu_195->edge_p1_x(edge_p1_x);
    grp_lineIntersectGrid_fu_195->edge_p1_y(edge_p1_y);
    grp_lineIntersectGrid_fu_195->edge_p1_z(edge_p1_z);
    grp_lineIntersectGrid_fu_195->edge_p2_x(edge_p2_x);
    grp_lineIntersectGrid_fu_195->edge_p2_y(edge_p2_y);
    grp_lineIntersectGrid_fu_195->edge_p2_z(edge_p2_z);
    grp_lineIntersectGrid_fu_195->ap_return(grp_lineIntersectGrid_fu_195_ap_return);
    honeybee_sitofp_3fYi_U26 = new honeybee_sitofp_3fYi<1,6,32,32>("honeybee_sitofp_3fYi_U26");
    honeybee_sitofp_3fYi_U26->clk(ap_clk);
    honeybee_sitofp_3fYi_U26->reset(ap_rst);
    honeybee_sitofp_3fYi_U26->din0(grp_fu_209_p0);
    honeybee_sitofp_3fYi_U26->ce(ap_var_for_const4);
    honeybee_sitofp_3fYi_U26->dout(grp_fu_209_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln82_2_fu_274_p2);
    sensitive << ( zext_ln82_fu_270_p1 );

    SC_METHOD(thread_add_ln82_fu_280_p2);
    sensitive << ( b_1_reg_142 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state15_on_subcall_done);
    sensitive << ( grp_lineIntersectGrid_fu_153_ap_done );
    sensitive << ( grp_lineIntersectGrid_fu_167_ap_done );
    sensitive << ( grp_lineIntersectGrid_fu_181_ap_done );
    sensitive << ( grp_lineIntersectGrid_fu_195_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln73_fu_225_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln73_fu_225_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( collisions_0_fu_68 );
    sensitive << ( icmp_ln73_fu_225_p2 );

    SC_METHOD(thread_b_fu_237_p2);
    sensitive << ( b_0_reg_119 );

    SC_METHOD(thread_grp_fu_209_p0);
    sensitive << ( zext_ln73_fu_220_p1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln74_fu_243_p1 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_lineIntersectGrid_fu_153_ap_start);
    sensitive << ( grp_lineIntersectGrid_fu_153_ap_start_reg );

    SC_METHOD(thread_grp_lineIntersectGrid_fu_167_ap_start);
    sensitive << ( grp_lineIntersectGrid_fu_167_ap_start_reg );

    SC_METHOD(thread_grp_lineIntersectGrid_fu_181_ap_start);
    sensitive << ( grp_lineIntersectGrid_fu_181_ap_start_reg );

    SC_METHOD(thread_grp_lineIntersectGrid_fu_195_ap_start);
    sensitive << ( grp_lineIntersectGrid_fu_195_ap_start_reg );

    SC_METHOD(thread_icmp_ln73_fu_225_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( k_0_reg_108 );

    SC_METHOD(thread_icmp_ln74_fu_248_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( j_0_reg_131 );

    SC_METHOD(thread_j_fu_254_p2);
    sensitive << ( j_0_reg_131 );

    SC_METHOD(thread_k_fu_231_p2);
    sensitive << ( k_0_reg_108 );

    SC_METHOD(thread_or_ln79_1_fu_363_p2);
    sensitive << ( select_ln79_2_fu_328_p3 );
    sensitive << ( select_ln79_3_fu_350_p3 );

    SC_METHOD(thread_or_ln79_2_fu_369_p2);
    sensitive << ( or_ln79_1_fu_363_p2 );
    sensitive << ( or_ln79_fu_357_p2 );

    SC_METHOD(thread_or_ln79_3_fu_379_p2);
    sensitive << ( collisions_0_fu_68 );
    sensitive << ( sext_ln79_fu_375_p1 );

    SC_METHOD(thread_or_ln79_fu_357_p2);
    sensitive << ( select_ln79_fu_296_p3 );
    sensitive << ( select_ln79_1_fu_312_p3 );

    SC_METHOD(thread_or_ln82_1_fu_335_p2);
    sensitive << ( trunc_ln74_reg_497 );

    SC_METHOD(thread_or_ln82_fu_264_p2);
    sensitive << ( trunc_ln74_fu_260_p1 );

    SC_METHOD(thread_select_ln79_1_fu_312_p3);
    sensitive << ( tmp_4_1_reg_507 );
    sensitive << ( shl_ln80_1_fu_306_p2 );

    SC_METHOD(thread_select_ln79_2_fu_328_p3);
    sensitive << ( tmp_4_2_reg_517 );
    sensitive << ( shl_ln80_2_fu_322_p2 );

    SC_METHOD(thread_select_ln79_3_fu_350_p3);
    sensitive << ( tmp_4_3_reg_522 );
    sensitive << ( shl_ln80_3_fu_344_p2 );

    SC_METHOD(thread_select_ln79_fu_296_p3);
    sensitive << ( tmp_4_reg_492 );
    sensitive << ( shl_ln80_fu_290_p2 );

    SC_METHOD(thread_sext_ln79_fu_375_p1);
    sensitive << ( or_ln79_2_fu_369_p2 );

    SC_METHOD(thread_shl_ln80_1_fu_306_p2);
    sensitive << ( zext_ln82_1_fu_303_p1 );

    SC_METHOD(thread_shl_ln80_2_fu_322_p2);
    sensitive << ( zext_ln82_2_fu_319_p1 );

    SC_METHOD(thread_shl_ln80_3_fu_344_p2);
    sensitive << ( zext_ln82_3_fu_340_p1 );

    SC_METHOD(thread_shl_ln80_fu_290_p2);
    sensitive << ( zext_ln74_1_fu_286_p1 );

    SC_METHOD(thread_trunc_ln74_fu_260_p1);
    sensitive << ( b_1_reg_142 );

    SC_METHOD(thread_zext_ln73_fu_220_p1);
    sensitive << ( k_0_reg_108 );

    SC_METHOD(thread_zext_ln74_1_fu_286_p1);
    sensitive << ( b_1_reg_142 );

    SC_METHOD(thread_zext_ln74_fu_243_p1);
    sensitive << ( j_0_reg_131 );

    SC_METHOD(thread_zext_ln82_1_fu_303_p1);
    sensitive << ( or_ln82_reg_502 );

    SC_METHOD(thread_zext_ln82_2_fu_319_p1);
    sensitive << ( add_ln82_2_reg_512 );

    SC_METHOD(thread_zext_ln82_3_fu_340_p1);
    sensitive << ( or_ln82_1_fu_335_p2 );

    SC_METHOD(thread_zext_ln82_fu_270_p1);
    sensitive << ( or_ln82_fu_264_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_block_state15_on_subcall_done );
    sensitive << ( icmp_ln74_fu_248_p2 );
    sensitive << ( icmp_ln73_fu_225_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    ap_CS_fsm = "0000000000000001";
    grp_lineIntersectGrid_fu_153_ap_start_reg = SC_LOGIC_0;
    grp_lineIntersectGrid_fu_167_ap_start_reg = SC_LOGIC_0;
    grp_lineIntersectGrid_fu_181_ap_start_reg = SC_LOGIC_0;
    grp_lineIntersectGrid_fu_195_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "honeybee_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, edge_p1_x, "(port)edge_p1_x");
    sc_trace(mVcdFile, edge_p1_y, "(port)edge_p1_y");
    sc_trace(mVcdFile, edge_p1_z, "(port)edge_p1_z");
    sc_trace(mVcdFile, edge_p2_x, "(port)edge_p2_x");
    sc_trace(mVcdFile, edge_p2_y, "(port)edge_p2_y");
    sc_trace(mVcdFile, edge_p2_z, "(port)edge_p2_z");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, zext_ln73_fu_220_p1, "zext_ln73_fu_220_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, k_fu_231_p2, "k_fu_231_p2");
    sc_trace(mVcdFile, k_reg_453, "k_reg_453");
    sc_trace(mVcdFile, b_fu_237_p2, "b_fu_237_p2");
    sc_trace(mVcdFile, b_reg_458, "b_reg_458");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_fu_209_p1, "grp_fu_209_p1");
    sc_trace(mVcdFile, grid_z_reg_463, "grid_z_reg_463");
    sc_trace(mVcdFile, zext_ln74_fu_243_p1, "zext_ln74_fu_243_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, j_fu_254_p2, "j_fu_254_p2");
    sc_trace(mVcdFile, j_reg_479, "j_reg_479");
    sc_trace(mVcdFile, grid_y_reg_484, "grid_y_reg_484");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_153_ap_return, "grp_lineIntersectGrid_fu_153_ap_return");
    sc_trace(mVcdFile, tmp_4_reg_492, "tmp_4_reg_492");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_153_ap_ready, "grp_lineIntersectGrid_fu_153_ap_ready");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_153_ap_done, "grp_lineIntersectGrid_fu_153_ap_done");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_167_ap_ready, "grp_lineIntersectGrid_fu_167_ap_ready");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_167_ap_done, "grp_lineIntersectGrid_fu_167_ap_done");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_181_ap_ready, "grp_lineIntersectGrid_fu_181_ap_ready");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_181_ap_done, "grp_lineIntersectGrid_fu_181_ap_done");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_195_ap_ready, "grp_lineIntersectGrid_fu_195_ap_ready");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_195_ap_done, "grp_lineIntersectGrid_fu_195_ap_done");
    sc_trace(mVcdFile, ap_block_state15_on_subcall_done, "ap_block_state15_on_subcall_done");
    sc_trace(mVcdFile, trunc_ln74_fu_260_p1, "trunc_ln74_fu_260_p1");
    sc_trace(mVcdFile, trunc_ln74_reg_497, "trunc_ln74_reg_497");
    sc_trace(mVcdFile, or_ln82_fu_264_p2, "or_ln82_fu_264_p2");
    sc_trace(mVcdFile, or_ln82_reg_502, "or_ln82_reg_502");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_167_ap_return, "grp_lineIntersectGrid_fu_167_ap_return");
    sc_trace(mVcdFile, tmp_4_1_reg_507, "tmp_4_1_reg_507");
    sc_trace(mVcdFile, add_ln82_2_fu_274_p2, "add_ln82_2_fu_274_p2");
    sc_trace(mVcdFile, add_ln82_2_reg_512, "add_ln82_2_reg_512");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_181_ap_return, "grp_lineIntersectGrid_fu_181_ap_return");
    sc_trace(mVcdFile, tmp_4_2_reg_517, "tmp_4_2_reg_517");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_195_ap_return, "grp_lineIntersectGrid_fu_195_ap_return");
    sc_trace(mVcdFile, tmp_4_3_reg_522, "tmp_4_3_reg_522");
    sc_trace(mVcdFile, add_ln82_fu_280_p2, "add_ln82_fu_280_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_153_ap_start, "grp_lineIntersectGrid_fu_153_ap_start");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_153_ap_idle, "grp_lineIntersectGrid_fu_153_ap_idle");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_167_ap_start, "grp_lineIntersectGrid_fu_167_ap_start");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_167_ap_idle, "grp_lineIntersectGrid_fu_167_ap_idle");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_181_ap_start, "grp_lineIntersectGrid_fu_181_ap_start");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_181_ap_idle, "grp_lineIntersectGrid_fu_181_ap_idle");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_195_ap_start, "grp_lineIntersectGrid_fu_195_ap_start");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_195_ap_idle, "grp_lineIntersectGrid_fu_195_ap_idle");
    sc_trace(mVcdFile, k_0_reg_108, "k_0_reg_108");
    sc_trace(mVcdFile, icmp_ln74_fu_248_p2, "icmp_ln74_fu_248_p2");
    sc_trace(mVcdFile, b_0_reg_119, "b_0_reg_119");
    sc_trace(mVcdFile, j_0_reg_131, "j_0_reg_131");
    sc_trace(mVcdFile, b_1_reg_142, "b_1_reg_142");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_153_ap_start_reg, "grp_lineIntersectGrid_fu_153_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_167_ap_start_reg, "grp_lineIntersectGrid_fu_167_ap_start_reg");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_181_ap_start_reg, "grp_lineIntersectGrid_fu_181_ap_start_reg");
    sc_trace(mVcdFile, grp_lineIntersectGrid_fu_195_ap_start_reg, "grp_lineIntersectGrid_fu_195_ap_start_reg");
    sc_trace(mVcdFile, collisions_0_fu_68, "collisions_0_fu_68");
    sc_trace(mVcdFile, or_ln79_3_fu_379_p2, "or_ln79_3_fu_379_p2");
    sc_trace(mVcdFile, icmp_ln73_fu_225_p2, "icmp_ln73_fu_225_p2");
    sc_trace(mVcdFile, grp_fu_209_p0, "grp_fu_209_p0");
    sc_trace(mVcdFile, zext_ln82_fu_270_p1, "zext_ln82_fu_270_p1");
    sc_trace(mVcdFile, zext_ln74_1_fu_286_p1, "zext_ln74_1_fu_286_p1");
    sc_trace(mVcdFile, shl_ln80_fu_290_p2, "shl_ln80_fu_290_p2");
    sc_trace(mVcdFile, zext_ln82_1_fu_303_p1, "zext_ln82_1_fu_303_p1");
    sc_trace(mVcdFile, shl_ln80_1_fu_306_p2, "shl_ln80_1_fu_306_p2");
    sc_trace(mVcdFile, zext_ln82_2_fu_319_p1, "zext_ln82_2_fu_319_p1");
    sc_trace(mVcdFile, shl_ln80_2_fu_322_p2, "shl_ln80_2_fu_322_p2");
    sc_trace(mVcdFile, or_ln82_1_fu_335_p2, "or_ln82_1_fu_335_p2");
    sc_trace(mVcdFile, zext_ln82_3_fu_340_p1, "zext_ln82_3_fu_340_p1");
    sc_trace(mVcdFile, shl_ln80_3_fu_344_p2, "shl_ln80_3_fu_344_p2");
    sc_trace(mVcdFile, select_ln79_fu_296_p3, "select_ln79_fu_296_p3");
    sc_trace(mVcdFile, select_ln79_1_fu_312_p3, "select_ln79_1_fu_312_p3");
    sc_trace(mVcdFile, select_ln79_2_fu_328_p3, "select_ln79_2_fu_328_p3");
    sc_trace(mVcdFile, select_ln79_3_fu_350_p3, "select_ln79_3_fu_350_p3");
    sc_trace(mVcdFile, or_ln79_1_fu_363_p2, "or_ln79_1_fu_363_p2");
    sc_trace(mVcdFile, or_ln79_fu_357_p2, "or_ln79_fu_357_p2");
    sc_trace(mVcdFile, or_ln79_2_fu_369_p2, "or_ln79_2_fu_369_p2");
    sc_trace(mVcdFile, sext_ln79_fu_375_p1, "sext_ln79_fu_375_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("honeybee.hdltvin.dat");
    mHdltvoutHandle.open("honeybee.hdltvout.dat");
}

honeybee::~honeybee() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_lineIntersectGrid_fu_153;
    delete grp_lineIntersectGrid_fu_167;
    delete grp_lineIntersectGrid_fu_181;
    delete grp_lineIntersectGrid_fu_195;
    delete honeybee_sitofp_3fYi_U26;
}

void honeybee::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_logic_1;
}

void honeybee::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_0;
}

void honeybee::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_3F800000;
}

void honeybee::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_40000000;
}

void honeybee::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv32_40400000;
}

void honeybee::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(icmp_ln74_fu_248_p2.read(), ap_const_lv1_1))) {
        b_0_reg_119 = b_reg_458.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        b_0_reg_119 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        b_1_reg_142 = add_ln82_fu_280_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        b_1_reg_142 = b_0_reg_119.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        collisions_0_fu_68 = or_ln79_3_fu_379_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        collisions_0_fu_68 = ap_const_lv64_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_lineIntersectGrid_fu_153_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
            grp_lineIntersectGrid_fu_153_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_lineIntersectGrid_fu_153_ap_ready.read())) {
            grp_lineIntersectGrid_fu_153_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_lineIntersectGrid_fu_167_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
            grp_lineIntersectGrid_fu_167_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_lineIntersectGrid_fu_167_ap_ready.read())) {
            grp_lineIntersectGrid_fu_167_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_lineIntersectGrid_fu_181_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
            grp_lineIntersectGrid_fu_181_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_lineIntersectGrid_fu_181_ap_ready.read())) {
            grp_lineIntersectGrid_fu_181_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_lineIntersectGrid_fu_195_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
            grp_lineIntersectGrid_fu_195_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_lineIntersectGrid_fu_195_ap_ready.read())) {
            grp_lineIntersectGrid_fu_195_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        j_0_reg_131 = j_reg_479.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        j_0_reg_131 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(icmp_ln74_fu_248_p2.read(), ap_const_lv1_1))) {
        k_0_reg_108 = k_reg_453.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        k_0_reg_108 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_block_state15_on_subcall_done.read(), ap_const_boolean_0))) {
        add_ln82_2_reg_512 = add_ln82_2_fu_274_p2.read();
        or_ln82_reg_502 = or_ln82_fu_264_p2.read();
        tmp_4_1_reg_507 = grp_lineIntersectGrid_fu_167_ap_return.read();
        tmp_4_2_reg_517 = grp_lineIntersectGrid_fu_181_ap_return.read();
        tmp_4_3_reg_522 = grp_lineIntersectGrid_fu_195_ap_return.read();
        tmp_4_reg_492 = grp_lineIntersectGrid_fu_153_ap_return.read();
        trunc_ln74_reg_497 = trunc_ln74_fu_260_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        b_reg_458 = b_fu_237_p2.read();
        grid_z_reg_463 = grp_fu_209_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grid_y_reg_484 = grp_fu_209_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        j_reg_479 = j_fu_254_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        k_reg_453 = k_fu_231_p2.read();
    }
}

void honeybee::thread_add_ln82_2_fu_274_p2() {
    add_ln82_2_fu_274_p2 = (!ap_const_lv7_1.is_01() || !zext_ln82_fu_270_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(ap_const_lv7_1) + sc_biguint<7>(zext_ln82_fu_270_p1.read()));
}

void honeybee::thread_add_ln82_fu_280_p2() {
    add_ln82_fu_280_p2 = (!ap_const_lv7_4.is_01() || !b_1_reg_142.read().is_01())? sc_lv<7>(): (sc_biguint<7>(ap_const_lv7_4) + sc_biguint<7>(b_1_reg_142.read()));
}

void honeybee::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void honeybee::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void honeybee::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void honeybee::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void honeybee::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void honeybee::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void honeybee::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void honeybee::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void honeybee::thread_ap_block_state15_on_subcall_done() {
    ap_block_state15_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_lineIntersectGrid_fu_153_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_lineIntersectGrid_fu_167_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_lineIntersectGrid_fu_181_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_lineIntersectGrid_fu_195_ap_done.read()));
}

void honeybee::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln73_fu_225_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void honeybee::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void honeybee::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln73_fu_225_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void honeybee::thread_ap_return() {
    ap_return = collisions_0_fu_68.read();
}

void honeybee::thread_b_fu_237_p2() {
    b_fu_237_p2 = (!b_0_reg_119.read().is_01() || !ap_const_lv7_10.is_01())? sc_lv<7>(): (sc_biguint<7>(b_0_reg_119.read()) + sc_biguint<7>(ap_const_lv7_10));
}

void honeybee::thread_grp_fu_209_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_209_p0 = zext_ln74_fu_243_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_209_p0 = zext_ln73_fu_220_p1.read();
    } else {
        grp_fu_209_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void honeybee::thread_grp_lineIntersectGrid_fu_153_ap_start() {
    grp_lineIntersectGrid_fu_153_ap_start = grp_lineIntersectGrid_fu_153_ap_start_reg.read();
}

void honeybee::thread_grp_lineIntersectGrid_fu_167_ap_start() {
    grp_lineIntersectGrid_fu_167_ap_start = grp_lineIntersectGrid_fu_167_ap_start_reg.read();
}

void honeybee::thread_grp_lineIntersectGrid_fu_181_ap_start() {
    grp_lineIntersectGrid_fu_181_ap_start = grp_lineIntersectGrid_fu_181_ap_start_reg.read();
}

void honeybee::thread_grp_lineIntersectGrid_fu_195_ap_start() {
    grp_lineIntersectGrid_fu_195_ap_start = grp_lineIntersectGrid_fu_195_ap_start_reg.read();
}

void honeybee::thread_icmp_ln73_fu_225_p2() {
    icmp_ln73_fu_225_p2 = (!k_0_reg_108.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_108.read() == ap_const_lv3_4);
}

void honeybee::thread_icmp_ln74_fu_248_p2() {
    icmp_ln74_fu_248_p2 = (!j_0_reg_131.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_131.read() == ap_const_lv3_4);
}

void honeybee::thread_j_fu_254_p2() {
    j_fu_254_p2 = (!j_0_reg_131.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_0_reg_131.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void honeybee::thread_k_fu_231_p2() {
    k_fu_231_p2 = (!k_0_reg_108.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_0_reg_108.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void honeybee::thread_or_ln79_1_fu_363_p2() {
    or_ln79_1_fu_363_p2 = (select_ln79_2_fu_328_p3.read() | select_ln79_3_fu_350_p3.read());
}

void honeybee::thread_or_ln79_2_fu_369_p2() {
    or_ln79_2_fu_369_p2 = (or_ln79_1_fu_363_p2.read() | or_ln79_fu_357_p2.read());
}

void honeybee::thread_or_ln79_3_fu_379_p2() {
    or_ln79_3_fu_379_p2 = (collisions_0_fu_68.read() | sext_ln79_fu_375_p1.read());
}

void honeybee::thread_or_ln79_fu_357_p2() {
    or_ln79_fu_357_p2 = (select_ln79_fu_296_p3.read() | select_ln79_1_fu_312_p3.read());
}

void honeybee::thread_or_ln82_1_fu_335_p2() {
    or_ln82_1_fu_335_p2 = (trunc_ln74_reg_497.read() | ap_const_lv6_3);
}

void honeybee::thread_or_ln82_fu_264_p2() {
    or_ln82_fu_264_p2 = (trunc_ln74_fu_260_p1.read() | ap_const_lv6_1);
}

void honeybee::thread_select_ln79_1_fu_312_p3() {
    select_ln79_1_fu_312_p3 = (!tmp_4_1_reg_507.read()[0].is_01())? sc_lv<32>(): ((tmp_4_1_reg_507.read()[0].to_bool())? shl_ln80_1_fu_306_p2.read(): ap_const_lv32_0);
}

void honeybee::thread_select_ln79_2_fu_328_p3() {
    select_ln79_2_fu_328_p3 = (!tmp_4_2_reg_517.read()[0].is_01())? sc_lv<32>(): ((tmp_4_2_reg_517.read()[0].to_bool())? shl_ln80_2_fu_322_p2.read(): ap_const_lv32_0);
}

void honeybee::thread_select_ln79_3_fu_350_p3() {
    select_ln79_3_fu_350_p3 = (!tmp_4_3_reg_522.read()[0].is_01())? sc_lv<32>(): ((tmp_4_3_reg_522.read()[0].to_bool())? shl_ln80_3_fu_344_p2.read(): ap_const_lv32_0);
}

void honeybee::thread_select_ln79_fu_296_p3() {
    select_ln79_fu_296_p3 = (!tmp_4_reg_492.read()[0].is_01())? sc_lv<32>(): ((tmp_4_reg_492.read()[0].to_bool())? shl_ln80_fu_290_p2.read(): ap_const_lv32_0);
}

void honeybee::thread_sext_ln79_fu_375_p1() {
    sext_ln79_fu_375_p1 = esl_sext<64,32>(or_ln79_2_fu_369_p2.read());
}

void honeybee::thread_shl_ln80_1_fu_306_p2() {
    shl_ln80_1_fu_306_p2 = (!zext_ln82_1_fu_303_p1.read().is_01())? sc_lv<32>(): ap_const_lv32_1 << (unsigned short)zext_ln82_1_fu_303_p1.read().to_uint();
}

void honeybee::thread_shl_ln80_2_fu_322_p2() {
    shl_ln80_2_fu_322_p2 = (!zext_ln82_2_fu_319_p1.read().is_01())? sc_lv<32>(): ap_const_lv32_1 << (unsigned short)zext_ln82_2_fu_319_p1.read().to_uint();
}

void honeybee::thread_shl_ln80_3_fu_344_p2() {
    shl_ln80_3_fu_344_p2 = (!zext_ln82_3_fu_340_p1.read().is_01())? sc_lv<32>(): ap_const_lv32_1 << (unsigned short)zext_ln82_3_fu_340_p1.read().to_uint();
}

void honeybee::thread_shl_ln80_fu_290_p2() {
    shl_ln80_fu_290_p2 = (!zext_ln74_1_fu_286_p1.read().is_01())? sc_lv<32>(): ap_const_lv32_1 << (unsigned short)zext_ln74_1_fu_286_p1.read().to_uint();
}

void honeybee::thread_trunc_ln74_fu_260_p1() {
    trunc_ln74_fu_260_p1 = b_1_reg_142.read().range(6-1, 0);
}

void honeybee::thread_zext_ln73_fu_220_p1() {
    zext_ln73_fu_220_p1 = esl_zext<32,3>(k_0_reg_108.read());
}

void honeybee::thread_zext_ln74_1_fu_286_p1() {
    zext_ln74_1_fu_286_p1 = esl_zext<32,7>(b_1_reg_142.read());
}

void honeybee::thread_zext_ln74_fu_243_p1() {
    zext_ln74_fu_243_p1 = esl_zext<32,3>(j_0_reg_131.read());
}

void honeybee::thread_zext_ln82_1_fu_303_p1() {
    zext_ln82_1_fu_303_p1 = esl_zext<32,6>(or_ln82_reg_502.read());
}

void honeybee::thread_zext_ln82_2_fu_319_p1() {
    zext_ln82_2_fu_319_p1 = esl_zext<32,7>(add_ln82_2_reg_512.read());
}

void honeybee::thread_zext_ln82_3_fu_340_p1() {
    zext_ln82_3_fu_340_p1 = esl_zext<32,6>(or_ln82_1_fu_335_p2.read());
}

void honeybee::thread_zext_ln82_fu_270_p1() {
    zext_ln82_fu_270_p1 = esl_zext<7,6>(or_ln82_fu_264_p2.read());
}

void honeybee::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln73_fu_225_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(icmp_ln74_fu_248_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_block_state15_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
            break;
    }
}

void honeybee::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p1_x\" :  \"" << edge_p1_x.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p1_y\" :  \"" << edge_p1_y.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p1_z\" :  \"" << edge_p1_z.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p2_x\" :  \"" << edge_p2_x.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p2_y\" :  \"" << edge_p2_y.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p2_z\" :  \"" << edge_p2_z.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

