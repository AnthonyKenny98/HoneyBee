-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lineIntersectGrid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    grid_x : IN STD_LOGIC_VECTOR (31 downto 0);
    grid_y : IN STD_LOGIC_VECTOR (31 downto 0);
    grid_z : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of lineIntersectGrid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_149 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_129_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_155 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_161 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_86_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_92_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_635 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_98_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_reg_640 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_104_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i3_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i5_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i7_reg_657 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_4_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_i2_reg_667 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i6_reg_672 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_fu_327_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal min_7_fu_495_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_7_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln62_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_reg_689 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal icmp_ln62_1_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_694 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_2_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_2_reg_699 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_3_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_3_reg_704 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_86_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_86_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_92_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_92_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_98_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_98_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_125_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_129_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_133_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_137_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_137_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal bitcast_ln27_fu_167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_1_fu_185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_171_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_fu_181_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_1_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_189_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_1_fu_199_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_3_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_2_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_1_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_fu_251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_255_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_265_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_1_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_1_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_1_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_1_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_4_fu_299_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_6_fu_319_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_fu_335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_1_fu_353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_339_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_fu_349_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_1_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_357_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_1_fu_367_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_3_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_2_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln41_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_423_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln41_fu_433_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln41_1_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_1_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_1_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_1_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_2_fu_467_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_4_fu_487_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln62_fu_503_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln62_1_fu_520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_506_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln62_fu_516_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_12_fu_523_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln62_1_fu_533_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal or_ln62_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln62_1_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln62_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_86_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_92_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_98_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_137_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_141_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_145_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln62_1_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);

    component honeybee_faddfsubbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fsub_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fdiv_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fcmp_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    honeybee_faddfsubbkb_U1 : component honeybee_faddfsubbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_86_p0,
        din1 => grp_fu_86_p1,
        opcode => grp_fu_86_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_86_p2);

    honeybee_faddfsubbkb_U2 : component honeybee_faddfsubbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_92_p0,
        din1 => grp_fu_92_p1,
        opcode => grp_fu_92_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_92_p2);

    honeybee_faddfsubbkb_U3 : component honeybee_faddfsubbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_98_p0,
        din1 => grp_fu_98_p1,
        opcode => grp_fu_98_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_98_p2);

    honeybee_fsub_32ncud_U4 : component honeybee_fsub_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => edge_p2_y,
        din1 => edge_p1_y,
        ce => ap_const_logic_1,
        dout => grp_fu_104_p2);

    honeybee_fsub_32ncud_U5 : component honeybee_fsub_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grid_z,
        din1 => edge_p1_z,
        ce => ap_const_logic_1,
        dout => grp_fu_110_p2);

    honeybee_fsub_32ncud_U6 : component honeybee_fsub_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => edge_p2_z,
        din1 => edge_p1_z,
        ce => ap_const_logic_1,
        dout => grp_fu_116_p2);

    honeybee_fdiv_32ndEe_U7 : component honeybee_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_125_p0,
        din1 => tmp_1_i_reg_635,
        ce => ap_const_logic_1,
        dout => grp_fu_125_p2);

    honeybee_fdiv_32ndEe_U8 : component honeybee_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_129_p0,
        din1 => tmp_1_i3_reg_646,
        ce => ap_const_logic_1,
        dout => grp_fu_129_p2);

    honeybee_fdiv_32ndEe_U9 : component honeybee_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_133_p0,
        din1 => tmp_1_i7_reg_657,
        ce => ap_const_logic_1,
        dout => grp_fu_133_p2);

    honeybee_fcmp_32neOg_U10 : component honeybee_fcmp_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_137_p0,
        din1 => grp_fu_137_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_137_opcode,
        dout => grp_fu_137_p2);

    honeybee_fcmp_32neOg_U11 : component honeybee_fcmp_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_161,
        din1 => reg_149,
        ce => ap_const_logic_1,
        opcode => grp_fu_141_opcode,
        dout => grp_fu_141_p2);

    honeybee_fcmp_32neOg_U12 : component honeybee_fcmp_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_161,
        din1 => reg_155,
        ce => ap_const_logic_1,
        opcode => grp_fu_145_opcode,
        dout => grp_fu_145_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_return_preg <= and_ln62_1_fu_575_p2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                icmp_ln62_1_reg_694 <= icmp_ln62_1_fu_543_p2;
                icmp_ln62_2_reg_699 <= icmp_ln62_2_fu_549_p2;
                icmp_ln62_3_reg_704 <= icmp_ln62_3_fu_555_p2;
                icmp_ln62_reg_689 <= icmp_ln62_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                max_reg_677 <= max_fu_327_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                min_7_reg_683 <= min_7_fu_495_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21))) then
                reg_149 <= grp_fu_125_p2;
                reg_155 <= grp_fu_129_p2;
                reg_161 <= grp_fu_133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_1_i3_reg_646 <= grp_fu_104_p2;
                tmp_1_i7_reg_657 <= grp_fu_116_p2;
                tmp_1_i_reg_635 <= grp_fu_92_p2;
                tmp_i1_reg_640 <= grp_fu_98_p2;
                tmp_i5_reg_651 <= grp_fu_110_p2;
                tmp_i_reg_629 <= grp_fu_86_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_i2_reg_667 <= grp_fu_92_p2;
                tmp_i6_reg_672 <= grp_fu_98_p2;
                tmp_i_4_reg_662 <= grp_fu_86_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln27_1_fu_245_p2 <= (grp_fu_137_p2 and and_ln27_fu_239_p2);
    and_ln27_fu_239_p2 <= (or_ln27_fu_215_p2 and or_ln27_1_fu_233_p2);
    and_ln29_1_fu_293_p2 <= (grp_fu_141_p2 and and_ln29_fu_287_p2);
    and_ln29_fu_287_p2 <= (or_ln29_fu_281_p2 and or_ln27_fu_215_p2);
    and_ln32_1_fu_313_p2 <= (grp_fu_145_p2 and and_ln32_fu_307_p2);
    and_ln32_fu_307_p2 <= (or_ln29_fu_281_p2 and or_ln27_1_fu_233_p2);
    and_ln39_1_fu_413_p2 <= (grp_fu_137_p2 and and_ln39_fu_407_p2);
    and_ln39_fu_407_p2 <= (or_ln39_fu_383_p2 and or_ln39_1_fu_401_p2);
    and_ln41_1_fu_461_p2 <= (grp_fu_141_p2 and and_ln41_fu_455_p2);
    and_ln41_fu_455_p2 <= (or_ln41_fu_449_p2 and or_ln39_fu_383_p2);
    and_ln44_1_fu_481_p2 <= (grp_fu_145_p2 and and_ln44_fu_475_p2);
    and_ln44_fu_475_p2 <= (or_ln41_fu_449_p2 and or_ln39_1_fu_401_p2);
    and_ln62_1_fu_575_p2 <= (grp_fu_137_p2 and and_ln62_fu_569_p2);
    and_ln62_fu_569_p2 <= (or_ln62_fu_561_p2 and or_ln62_1_fu_565_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state30, and_ln62_1_fu_575_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_return <= and_ln62_1_fu_575_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln27_1_fu_185_p1 <= reg_155;
    bitcast_ln27_fu_167_p1 <= reg_149;
    bitcast_ln29_fu_251_p1 <= reg_161;
    bitcast_ln39_1_fu_353_p1 <= reg_155;
    bitcast_ln39_fu_335_p1 <= reg_149;
    bitcast_ln41_fu_419_p1 <= reg_161;
    bitcast_ln62_1_fu_520_p1 <= min_7_reg_683;
    bitcast_ln62_fu_503_p1 <= max_reg_677;

    grp_fu_125_p0_assign_proc : process(tmp_i_reg_629, tmp_i_4_reg_662, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_125_p0 <= tmp_i_4_reg_662;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_125_p0 <= tmp_i_reg_629;
        else 
            grp_fu_125_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_129_p0_assign_proc : process(tmp_i1_reg_640, tmp_i2_reg_667, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_129_p0 <= tmp_i2_reg_667;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_129_p0 <= tmp_i1_reg_640;
        else 
            grp_fu_129_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_133_p0_assign_proc : process(tmp_i5_reg_651, tmp_i6_reg_672, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_133_p0 <= tmp_i6_reg_672;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_133_p0 <= tmp_i5_reg_651;
        else 
            grp_fu_133_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_137_opcode_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_137_opcode <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_137_opcode <= ap_const_lv5_2;
        else 
            grp_fu_137_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_137_p0_assign_proc : process(reg_149, max_reg_677, ap_CS_fsm_state29, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_137_p0 <= max_reg_677;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_137_p0 <= reg_149;
        else 
            grp_fu_137_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_137_p1_assign_proc : process(reg_155, min_7_reg_683, ap_CS_fsm_state29, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_137_p1 <= min_7_reg_683;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_137_p1 <= reg_155;
        else 
            grp_fu_137_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_141_opcode_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_141_opcode <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_141_opcode <= ap_const_lv5_2;
        else 
            grp_fu_141_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_145_opcode_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_145_opcode <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_145_opcode <= ap_const_lv5_2;
        else 
            grp_fu_145_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_86_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_86_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_86_opcode <= ap_const_lv2_0;
        else 
            grp_fu_86_opcode <= "XX";
        end if; 
    end process;


    grp_fu_86_p0_assign_proc : process(ap_CS_fsm_state1, grid_x, tmp_i_reg_629, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_86_p0 <= tmp_i_reg_629;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_86_p0 <= grid_x;
        else 
            grp_fu_86_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_86_p1_assign_proc : process(ap_CS_fsm_state1, edge_p1_x, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_86_p1 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_86_p1 <= edge_p1_x;
        else 
            grp_fu_86_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_92_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_92_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_92_opcode <= ap_const_lv2_0;
        else 
            grp_fu_92_opcode <= "XX";
        end if; 
    end process;


    grp_fu_92_p0_assign_proc : process(ap_CS_fsm_state1, edge_p2_x, tmp_i1_reg_640, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_92_p0 <= tmp_i1_reg_640;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_92_p0 <= edge_p2_x;
        else 
            grp_fu_92_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_92_p1_assign_proc : process(ap_CS_fsm_state1, edge_p1_x, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_92_p1 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_92_p1 <= edge_p1_x;
        else 
            grp_fu_92_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_98_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_98_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_98_opcode <= ap_const_lv2_0;
        else 
            grp_fu_98_opcode <= "XX";
        end if; 
    end process;


    grp_fu_98_p0_assign_proc : process(ap_CS_fsm_state1, grid_y, tmp_i5_reg_651, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_98_p0 <= tmp_i5_reg_651;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_98_p0 <= grid_y;
        else 
            grp_fu_98_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_98_p1_assign_proc : process(ap_CS_fsm_state1, edge_p1_y, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_98_p1 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_98_p1 <= edge_p1_y;
        else 
            grp_fu_98_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln27_1_fu_209_p2 <= "1" when (trunc_ln27_fu_181_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_2_fu_221_p2 <= "0" when (tmp_s_fu_189_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_3_fu_227_p2 <= "1" when (trunc_ln27_1_fu_199_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_fu_203_p2 <= "0" when (tmp_9_fu_171_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_1_fu_275_p2 <= "1" when (trunc_ln29_fu_265_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_269_p2 <= "0" when (tmp_6_fu_255_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_1_fu_377_p2 <= "1" when (trunc_ln39_fu_349_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_2_fu_389_p2 <= "0" when (tmp_1_fu_357_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_3_fu_395_p2 <= "1" when (trunc_ln39_1_fu_367_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_fu_371_p2 <= "0" when (tmp_fu_339_p4 = ap_const_lv8_FF) else "1";
    icmp_ln41_1_fu_443_p2 <= "1" when (trunc_ln41_fu_433_p1 = ap_const_lv23_0) else "0";
    icmp_ln41_fu_437_p2 <= "0" when (tmp_3_fu_423_p4 = ap_const_lv8_FF) else "1";
    icmp_ln62_1_fu_543_p2 <= "1" when (trunc_ln62_fu_516_p1 = ap_const_lv23_0) else "0";
    icmp_ln62_2_fu_549_p2 <= "0" when (tmp_12_fu_523_p4 = ap_const_lv8_FF) else "1";
    icmp_ln62_3_fu_555_p2 <= "1" when (trunc_ln62_1_fu_533_p1 = ap_const_lv23_0) else "0";
    icmp_ln62_fu_537_p2 <= "0" when (tmp_11_fu_506_p4 = ap_const_lv8_FF) else "1";
    max_4_fu_299_p3 <= 
        reg_161 when (and_ln29_1_fu_293_p2(0) = '1') else 
        reg_149;
    max_6_fu_319_p3 <= 
        reg_161 when (and_ln32_1_fu_313_p2(0) = '1') else 
        reg_155;
    max_fu_327_p3 <= 
        max_4_fu_299_p3 when (and_ln27_1_fu_245_p2(0) = '1') else 
        max_6_fu_319_p3;
    min_2_fu_467_p3 <= 
        reg_161 when (and_ln41_1_fu_461_p2(0) = '1') else 
        reg_149;
    min_4_fu_487_p3 <= 
        reg_161 when (and_ln44_1_fu_481_p2(0) = '1') else 
        reg_155;
    min_7_fu_495_p3 <= 
        min_2_fu_467_p3 when (and_ln39_1_fu_413_p2(0) = '1') else 
        min_4_fu_487_p3;
    or_ln27_1_fu_233_p2 <= (icmp_ln27_3_fu_227_p2 or icmp_ln27_2_fu_221_p2);
    or_ln27_fu_215_p2 <= (icmp_ln27_fu_203_p2 or icmp_ln27_1_fu_209_p2);
    or_ln29_fu_281_p2 <= (icmp_ln29_fu_269_p2 or icmp_ln29_1_fu_275_p2);
    or_ln39_1_fu_401_p2 <= (icmp_ln39_3_fu_395_p2 or icmp_ln39_2_fu_389_p2);
    or_ln39_fu_383_p2 <= (icmp_ln39_fu_371_p2 or icmp_ln39_1_fu_377_p2);
    or_ln41_fu_449_p2 <= (icmp_ln41_fu_437_p2 or icmp_ln41_1_fu_443_p2);
    or_ln62_1_fu_565_p2 <= (icmp_ln62_3_reg_704 or icmp_ln62_2_reg_699);
    or_ln62_fu_561_p2 <= (icmp_ln62_reg_689 or icmp_ln62_1_reg_694);
    tmp_11_fu_506_p4 <= bitcast_ln62_fu_503_p1(30 downto 23);
    tmp_12_fu_523_p4 <= bitcast_ln62_1_fu_520_p1(30 downto 23);
    tmp_1_fu_357_p4 <= bitcast_ln39_1_fu_353_p1(30 downto 23);
    tmp_3_fu_423_p4 <= bitcast_ln41_fu_419_p1(30 downto 23);
    tmp_6_fu_255_p4 <= bitcast_ln29_fu_251_p1(30 downto 23);
    tmp_9_fu_171_p4 <= bitcast_ln27_fu_167_p1(30 downto 23);
    tmp_fu_339_p4 <= bitcast_ln39_fu_335_p1(30 downto 23);
    tmp_s_fu_189_p4 <= bitcast_ln27_1_fu_185_p1(30 downto 23);
    trunc_ln27_1_fu_199_p1 <= bitcast_ln27_1_fu_185_p1(23 - 1 downto 0);
    trunc_ln27_fu_181_p1 <= bitcast_ln27_fu_167_p1(23 - 1 downto 0);
    trunc_ln29_fu_265_p1 <= bitcast_ln29_fu_251_p1(23 - 1 downto 0);
    trunc_ln39_1_fu_367_p1 <= bitcast_ln39_1_fu_353_p1(23 - 1 downto 0);
    trunc_ln39_fu_349_p1 <= bitcast_ln39_fu_335_p1(23 - 1 downto 0);
    trunc_ln41_fu_433_p1 <= bitcast_ln41_fu_419_p1(23 - 1 downto 0);
    trunc_ln62_1_fu_533_p1 <= bitcast_ln62_1_fu_520_p1(23 - 1 downto 0);
    trunc_ln62_fu_516_p1 <= bitcast_ln62_fu_503_p1(23 - 1 downto 0);
end behav;
