// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "honeybee.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic honeybee::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic honeybee::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> honeybee::ap_ST_fsm_state1 = "1";
const sc_lv<9> honeybee::ap_ST_fsm_state2 = "10";
const sc_lv<9> honeybee::ap_ST_fsm_state3 = "100";
const sc_lv<9> honeybee::ap_ST_fsm_state4 = "1000";
const sc_lv<9> honeybee::ap_ST_fsm_state5 = "10000";
const sc_lv<9> honeybee::ap_ST_fsm_state6 = "100000";
const sc_lv<9> honeybee::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> honeybee::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> honeybee::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> honeybee::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> honeybee::ap_const_lv32_1 = "1";
const sc_lv<32> honeybee::ap_const_lv32_6 = "110";
const sc_lv<32> honeybee::ap_const_lv32_8 = "1000";
const bool honeybee::ap_const_boolean_0 = false;
const sc_lv<2> honeybee::ap_const_lv2_0 = "00";
const sc_lv<4> honeybee::ap_const_lv4_0 = "0000";
const sc_lv<8> honeybee::ap_const_lv8_0 = "00000000";
const sc_lv<32> honeybee::ap_const_lv32_7 = "111";
const sc_lv<32> honeybee::ap_const_lv32_3F800000 = "111111100000000000000000000000";
const sc_lv<2> honeybee::ap_const_lv2_2 = "10";
const sc_lv<2> honeybee::ap_const_lv2_1 = "1";
const sc_lv<4> honeybee::ap_const_lv4_4 = "100";
const sc_lv<3> honeybee::ap_const_lv3_2 = "10";
const sc_lv<5> honeybee::ap_const_lv5_1 = "1";
const sc_lv<5> honeybee::ap_const_lv5_0 = "00000";
const sc_lv<3> honeybee::ap_const_lv3_1 = "1";
const sc_lv<8> honeybee::ap_const_lv8_1 = "1";
const sc_lv<3> honeybee::ap_const_lv3_3 = "11";
const sc_lv<32> honeybee::ap_const_lv32_5 = "101";
const sc_lv<1> honeybee::ap_const_lv1_1 = "1";
const bool honeybee::ap_const_boolean_1 = true;

honeybee::honeybee(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_segmentIntersectsGri_fu_133 = new segmentIntersectsGri("grp_segmentIntersectsGri_fu_133");
    grp_segmentIntersectsGri_fu_133->ap_clk(ap_clk);
    grp_segmentIntersectsGri_fu_133->ap_rst(ap_rst);
    grp_segmentIntersectsGri_fu_133->ap_start(grp_segmentIntersectsGri_fu_133_ap_start);
    grp_segmentIntersectsGri_fu_133->ap_done(grp_segmentIntersectsGri_fu_133_ap_done);
    grp_segmentIntersectsGri_fu_133->ap_idle(grp_segmentIntersectsGri_fu_133_ap_idle);
    grp_segmentIntersectsGri_fu_133->ap_ready(grp_segmentIntersectsGri_fu_133_ap_ready);
    grp_segmentIntersectsGri_fu_133->edge_p1_x(edge_p1_x);
    grp_segmentIntersectsGri_fu_133->edge_p1_y(edge_p1_y);
    grp_segmentIntersectsGri_fu_133->edge_p1_z(edge_p1_z);
    grp_segmentIntersectsGri_fu_133->edge_p2_x(edge_p2_x);
    grp_segmentIntersectsGri_fu_133->edge_p2_y(edge_p2_y);
    grp_segmentIntersectsGri_fu_133->edge_p2_z(edge_p2_z);
    grp_segmentIntersectsGri_fu_133->grid_x(ap_var_for_const0);
    grp_segmentIntersectsGri_fu_133->grid_y(ap_var_for_const0);
    grp_segmentIntersectsGri_fu_133->grid_z(grid_z_reg_420);
    grp_segmentIntersectsGri_fu_133->ap_return(grp_segmentIntersectsGri_fu_133_ap_return);
    grp_segmentIntersectsGri_fu_148 = new segmentIntersectsGri("grp_segmentIntersectsGri_fu_148");
    grp_segmentIntersectsGri_fu_148->ap_clk(ap_clk);
    grp_segmentIntersectsGri_fu_148->ap_rst(ap_rst);
    grp_segmentIntersectsGri_fu_148->ap_start(grp_segmentIntersectsGri_fu_148_ap_start);
    grp_segmentIntersectsGri_fu_148->ap_done(grp_segmentIntersectsGri_fu_148_ap_done);
    grp_segmentIntersectsGri_fu_148->ap_idle(grp_segmentIntersectsGri_fu_148_ap_idle);
    grp_segmentIntersectsGri_fu_148->ap_ready(grp_segmentIntersectsGri_fu_148_ap_ready);
    grp_segmentIntersectsGri_fu_148->edge_p1_x(edge_p1_x);
    grp_segmentIntersectsGri_fu_148->edge_p1_y(edge_p1_y);
    grp_segmentIntersectsGri_fu_148->edge_p1_z(edge_p1_z);
    grp_segmentIntersectsGri_fu_148->edge_p2_x(edge_p2_x);
    grp_segmentIntersectsGri_fu_148->edge_p2_y(edge_p2_y);
    grp_segmentIntersectsGri_fu_148->edge_p2_z(edge_p2_z);
    grp_segmentIntersectsGri_fu_148->grid_x(ap_var_for_const1);
    grp_segmentIntersectsGri_fu_148->grid_y(ap_var_for_const0);
    grp_segmentIntersectsGri_fu_148->grid_z(grid_z_reg_420);
    grp_segmentIntersectsGri_fu_148->ap_return(grp_segmentIntersectsGri_fu_148_ap_return);
    grp_segmentIntersectsGri_fu_163 = new segmentIntersectsGri("grp_segmentIntersectsGri_fu_163");
    grp_segmentIntersectsGri_fu_163->ap_clk(ap_clk);
    grp_segmentIntersectsGri_fu_163->ap_rst(ap_rst);
    grp_segmentIntersectsGri_fu_163->ap_start(grp_segmentIntersectsGri_fu_163_ap_start);
    grp_segmentIntersectsGri_fu_163->ap_done(grp_segmentIntersectsGri_fu_163_ap_done);
    grp_segmentIntersectsGri_fu_163->ap_idle(grp_segmentIntersectsGri_fu_163_ap_idle);
    grp_segmentIntersectsGri_fu_163->ap_ready(grp_segmentIntersectsGri_fu_163_ap_ready);
    grp_segmentIntersectsGri_fu_163->edge_p1_x(edge_p1_x);
    grp_segmentIntersectsGri_fu_163->edge_p1_y(edge_p1_y);
    grp_segmentIntersectsGri_fu_163->edge_p1_z(edge_p1_z);
    grp_segmentIntersectsGri_fu_163->edge_p2_x(edge_p2_x);
    grp_segmentIntersectsGri_fu_163->edge_p2_y(edge_p2_y);
    grp_segmentIntersectsGri_fu_163->edge_p2_z(edge_p2_z);
    grp_segmentIntersectsGri_fu_163->grid_x(ap_var_for_const0);
    grp_segmentIntersectsGri_fu_163->grid_y(ap_var_for_const1);
    grp_segmentIntersectsGri_fu_163->grid_z(grid_z_reg_420);
    grp_segmentIntersectsGri_fu_163->ap_return(grp_segmentIntersectsGri_fu_163_ap_return);
    grp_segmentIntersectsGri_fu_178 = new segmentIntersectsGri("grp_segmentIntersectsGri_fu_178");
    grp_segmentIntersectsGri_fu_178->ap_clk(ap_clk);
    grp_segmentIntersectsGri_fu_178->ap_rst(ap_rst);
    grp_segmentIntersectsGri_fu_178->ap_start(grp_segmentIntersectsGri_fu_178_ap_start);
    grp_segmentIntersectsGri_fu_178->ap_done(grp_segmentIntersectsGri_fu_178_ap_done);
    grp_segmentIntersectsGri_fu_178->ap_idle(grp_segmentIntersectsGri_fu_178_ap_idle);
    grp_segmentIntersectsGri_fu_178->ap_ready(grp_segmentIntersectsGri_fu_178_ap_ready);
    grp_segmentIntersectsGri_fu_178->edge_p1_x(edge_p1_x);
    grp_segmentIntersectsGri_fu_178->edge_p1_y(edge_p1_y);
    grp_segmentIntersectsGri_fu_178->edge_p1_z(edge_p1_z);
    grp_segmentIntersectsGri_fu_178->edge_p2_x(edge_p2_x);
    grp_segmentIntersectsGri_fu_178->edge_p2_y(edge_p2_y);
    grp_segmentIntersectsGri_fu_178->edge_p2_z(edge_p2_z);
    grp_segmentIntersectsGri_fu_178->grid_x(ap_var_for_const1);
    grp_segmentIntersectsGri_fu_178->grid_y(ap_var_for_const1);
    grp_segmentIntersectsGri_fu_178->grid_z(grid_z_reg_420);
    grp_segmentIntersectsGri_fu_178->ap_return(grp_segmentIntersectsGri_fu_178_ap_return);
    honeybee_sitofp_3hbi_U56 = new honeybee_sitofp_3hbi<1,6,32,32>("honeybee_sitofp_3hbi_U56");
    honeybee_sitofp_3hbi_U56->clk(ap_clk);
    honeybee_sitofp_3hbi_U56->reset(ap_rst);
    honeybee_sitofp_3hbi_U56->din0(grp_fu_193_p0);
    honeybee_sitofp_3hbi_U56->ce(ap_var_for_const2);
    honeybee_sitofp_3hbi_U56->dout(grp_fu_193_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state9_on_subcall_done);
    sensitive << ( grp_segmentIntersectsGri_fu_133_ap_done );
    sensitive << ( grp_segmentIntersectsGri_fu_148_ap_done );
    sensitive << ( grp_segmentIntersectsGri_fu_163_ap_done );
    sensitive << ( grp_segmentIntersectsGri_fu_178_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln152_fu_201_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln152_fu_201_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( collisions_0_reg_121 );
    sensitive << ( icmp_ln152_fu_201_p2 );

    SC_METHOD(thread_b_fu_213_p2);
    sensitive << ( b_0_reg_109 );

    SC_METHOD(thread_grp_fu_193_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( k_0_reg_98 );

    SC_METHOD(thread_grp_segmentIntersectsGri_fu_133_ap_start);
    sensitive << ( grp_segmentIntersectsGri_fu_133_ap_start_reg );

    SC_METHOD(thread_grp_segmentIntersectsGri_fu_148_ap_start);
    sensitive << ( grp_segmentIntersectsGri_fu_148_ap_start_reg );

    SC_METHOD(thread_grp_segmentIntersectsGri_fu_163_ap_start);
    sensitive << ( grp_segmentIntersectsGri_fu_163_ap_start_reg );

    SC_METHOD(thread_grp_segmentIntersectsGri_fu_178_ap_start);
    sensitive << ( grp_segmentIntersectsGri_fu_178_ap_start_reg );

    SC_METHOD(thread_icmp_ln152_fu_201_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( k_0_reg_98 );

    SC_METHOD(thread_k_fu_207_p2);
    sensitive << ( k_0_reg_98 );

    SC_METHOD(thread_or_ln158_1_fu_341_p2);
    sensitive << ( select_ln158_2_fu_281_p3 );
    sensitive << ( select_ln158_3_fu_305_p3 );

    SC_METHOD(thread_or_ln158_2_fu_347_p2);
    sensitive << ( or_ln158_1_fu_341_p2 );
    sensitive << ( tmp_fu_333_p3 );

    SC_METHOD(thread_or_ln158_3_fu_353_p2);
    sensitive << ( collisions_0_reg_121 );
    sensitive << ( or_ln158_2_fu_347_p2 );

    SC_METHOD(thread_or_ln158_fu_317_p2);
    sensitive << ( trunc_ln158_fu_313_p1 );
    sensitive << ( select_ln158_fu_243_p3 );

    SC_METHOD(thread_or_ln161_1_fu_251_p2);
    sensitive << ( trunc_ln152_fu_219_p1 );

    SC_METHOD(thread_or_ln161_2_fu_289_p2);
    sensitive << ( trunc_ln152_fu_219_p1 );

    SC_METHOD(thread_or_ln161_fu_223_p2);
    sensitive << ( trunc_ln152_fu_219_p1 );

    SC_METHOD(thread_select_ln158_1_fu_267_p3);
    sensitive << ( grp_segmentIntersectsGri_fu_148_ap_return );
    sensitive << ( shl_ln159_1_fu_261_p2 );

    SC_METHOD(thread_select_ln158_2_fu_281_p3);
    sensitive << ( grp_segmentIntersectsGri_fu_163_ap_return );
    sensitive << ( shl_ln159_2_fu_275_p2 );

    SC_METHOD(thread_select_ln158_3_fu_305_p3);
    sensitive << ( grp_segmentIntersectsGri_fu_178_ap_return );
    sensitive << ( shl_ln159_3_fu_299_p2 );

    SC_METHOD(thread_select_ln158_fu_243_p3);
    sensitive << ( grp_segmentIntersectsGri_fu_133_ap_return );
    sensitive << ( shl_ln159_fu_237_p2 );

    SC_METHOD(thread_shl_ln159_1_fu_261_p2);
    sensitive << ( zext_ln161_1_fu_257_p1 );

    SC_METHOD(thread_shl_ln159_2_fu_275_p2);
    sensitive << ( zext_ln161_fu_229_p1 );

    SC_METHOD(thread_shl_ln159_3_fu_299_p2);
    sensitive << ( zext_ln161_2_fu_295_p1 );

    SC_METHOD(thread_shl_ln159_fu_237_p2);
    sensitive << ( zext_ln152_1_fu_233_p1 );

    SC_METHOD(thread_tmp_62_fu_323_p4);
    sensitive << ( select_ln158_1_fu_267_p3 );

    SC_METHOD(thread_tmp_fu_333_p3);
    sensitive << ( tmp_62_fu_323_p4 );
    sensitive << ( or_ln158_fu_317_p2 );

    SC_METHOD(thread_trunc_ln152_fu_219_p1);
    sensitive << ( b_0_reg_109 );

    SC_METHOD(thread_trunc_ln158_fu_313_p1);
    sensitive << ( select_ln158_1_fu_267_p3 );

    SC_METHOD(thread_zext_ln152_1_fu_233_p1);
    sensitive << ( b_0_reg_109 );

    SC_METHOD(thread_zext_ln161_1_fu_257_p1);
    sensitive << ( or_ln161_1_fu_251_p2 );

    SC_METHOD(thread_zext_ln161_2_fu_295_p1);
    sensitive << ( or_ln161_2_fu_289_p2 );

    SC_METHOD(thread_zext_ln161_fu_229_p1);
    sensitive << ( or_ln161_fu_223_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_block_state9_on_subcall_done );
    sensitive << ( icmp_ln152_fu_201_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "000000001";
    grp_segmentIntersectsGri_fu_133_ap_start_reg = SC_LOGIC_0;
    grp_segmentIntersectsGri_fu_148_ap_start_reg = SC_LOGIC_0;
    grp_segmentIntersectsGri_fu_163_ap_start_reg = SC_LOGIC_0;
    grp_segmentIntersectsGri_fu_178_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "honeybee_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, edge_p1_x, "(port)edge_p1_x");
    sc_trace(mVcdFile, edge_p1_y, "(port)edge_p1_y");
    sc_trace(mVcdFile, edge_p1_z, "(port)edge_p1_z");
    sc_trace(mVcdFile, edge_p2_x, "(port)edge_p2_x");
    sc_trace(mVcdFile, edge_p2_y, "(port)edge_p2_y");
    sc_trace(mVcdFile, edge_p2_z, "(port)edge_p2_z");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, k_fu_207_p2, "k_fu_207_p2");
    sc_trace(mVcdFile, k_reg_415, "k_reg_415");
    sc_trace(mVcdFile, grp_fu_193_p1, "grp_fu_193_p1");
    sc_trace(mVcdFile, grid_z_reg_420, "grid_z_reg_420");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, b_fu_213_p2, "b_fu_213_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_133_ap_ready, "grp_segmentIntersectsGri_fu_133_ap_ready");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_133_ap_done, "grp_segmentIntersectsGri_fu_133_ap_done");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_148_ap_ready, "grp_segmentIntersectsGri_fu_148_ap_ready");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_148_ap_done, "grp_segmentIntersectsGri_fu_148_ap_done");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_163_ap_ready, "grp_segmentIntersectsGri_fu_163_ap_ready");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_163_ap_done, "grp_segmentIntersectsGri_fu_163_ap_done");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_178_ap_ready, "grp_segmentIntersectsGri_fu_178_ap_ready");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_178_ap_done, "grp_segmentIntersectsGri_fu_178_ap_done");
    sc_trace(mVcdFile, ap_block_state9_on_subcall_done, "ap_block_state9_on_subcall_done");
    sc_trace(mVcdFile, or_ln158_3_fu_353_p2, "or_ln158_3_fu_353_p2");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_133_ap_start, "grp_segmentIntersectsGri_fu_133_ap_start");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_133_ap_idle, "grp_segmentIntersectsGri_fu_133_ap_idle");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_133_ap_return, "grp_segmentIntersectsGri_fu_133_ap_return");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_148_ap_start, "grp_segmentIntersectsGri_fu_148_ap_start");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_148_ap_idle, "grp_segmentIntersectsGri_fu_148_ap_idle");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_148_ap_return, "grp_segmentIntersectsGri_fu_148_ap_return");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_163_ap_start, "grp_segmentIntersectsGri_fu_163_ap_start");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_163_ap_idle, "grp_segmentIntersectsGri_fu_163_ap_idle");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_163_ap_return, "grp_segmentIntersectsGri_fu_163_ap_return");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_178_ap_start, "grp_segmentIntersectsGri_fu_178_ap_start");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_178_ap_idle, "grp_segmentIntersectsGri_fu_178_ap_idle");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_178_ap_return, "grp_segmentIntersectsGri_fu_178_ap_return");
    sc_trace(mVcdFile, k_0_reg_98, "k_0_reg_98");
    sc_trace(mVcdFile, b_0_reg_109, "b_0_reg_109");
    sc_trace(mVcdFile, collisions_0_reg_121, "collisions_0_reg_121");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_133_ap_start_reg, "grp_segmentIntersectsGri_fu_133_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_148_ap_start_reg, "grp_segmentIntersectsGri_fu_148_ap_start_reg");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_163_ap_start_reg, "grp_segmentIntersectsGri_fu_163_ap_start_reg");
    sc_trace(mVcdFile, grp_segmentIntersectsGri_fu_178_ap_start_reg, "grp_segmentIntersectsGri_fu_178_ap_start_reg");
    sc_trace(mVcdFile, grp_fu_193_p0, "grp_fu_193_p0");
    sc_trace(mVcdFile, trunc_ln152_fu_219_p1, "trunc_ln152_fu_219_p1");
    sc_trace(mVcdFile, or_ln161_fu_223_p2, "or_ln161_fu_223_p2");
    sc_trace(mVcdFile, zext_ln152_1_fu_233_p1, "zext_ln152_1_fu_233_p1");
    sc_trace(mVcdFile, shl_ln159_fu_237_p2, "shl_ln159_fu_237_p2");
    sc_trace(mVcdFile, or_ln161_1_fu_251_p2, "or_ln161_1_fu_251_p2");
    sc_trace(mVcdFile, zext_ln161_1_fu_257_p1, "zext_ln161_1_fu_257_p1");
    sc_trace(mVcdFile, shl_ln159_1_fu_261_p2, "shl_ln159_1_fu_261_p2");
    sc_trace(mVcdFile, zext_ln161_fu_229_p1, "zext_ln161_fu_229_p1");
    sc_trace(mVcdFile, shl_ln159_2_fu_275_p2, "shl_ln159_2_fu_275_p2");
    sc_trace(mVcdFile, or_ln161_2_fu_289_p2, "or_ln161_2_fu_289_p2");
    sc_trace(mVcdFile, zext_ln161_2_fu_295_p1, "zext_ln161_2_fu_295_p1");
    sc_trace(mVcdFile, shl_ln159_3_fu_299_p2, "shl_ln159_3_fu_299_p2");
    sc_trace(mVcdFile, select_ln158_1_fu_267_p3, "select_ln158_1_fu_267_p3");
    sc_trace(mVcdFile, trunc_ln158_fu_313_p1, "trunc_ln158_fu_313_p1");
    sc_trace(mVcdFile, select_ln158_fu_243_p3, "select_ln158_fu_243_p3");
    sc_trace(mVcdFile, tmp_62_fu_323_p4, "tmp_62_fu_323_p4");
    sc_trace(mVcdFile, or_ln158_fu_317_p2, "or_ln158_fu_317_p2");
    sc_trace(mVcdFile, select_ln158_2_fu_281_p3, "select_ln158_2_fu_281_p3");
    sc_trace(mVcdFile, select_ln158_3_fu_305_p3, "select_ln158_3_fu_305_p3");
    sc_trace(mVcdFile, or_ln158_1_fu_341_p2, "or_ln158_1_fu_341_p2");
    sc_trace(mVcdFile, tmp_fu_333_p3, "tmp_fu_333_p3");
    sc_trace(mVcdFile, or_ln158_2_fu_347_p2, "or_ln158_2_fu_347_p2");
    sc_trace(mVcdFile, icmp_ln152_fu_201_p2, "icmp_ln152_fu_201_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("honeybee.hdltvin.dat");
    mHdltvoutHandle.open("honeybee.hdltvout.dat");
}

honeybee::~honeybee() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_segmentIntersectsGri_fu_133;
    delete grp_segmentIntersectsGri_fu_148;
    delete grp_segmentIntersectsGri_fu_163;
    delete grp_segmentIntersectsGri_fu_178;
    delete honeybee_sitofp_3hbi_U56;
}

void honeybee::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_logic_1;
}

void honeybee::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_0;
}

void honeybee::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_3F800000;
}

void honeybee::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_block_state9_on_subcall_done.read(), ap_const_boolean_0))) {
        b_0_reg_109 = b_fu_213_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        b_0_reg_109 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_block_state9_on_subcall_done.read(), ap_const_boolean_0))) {
        collisions_0_reg_121 = or_ln158_3_fu_353_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        collisions_0_reg_121 = ap_const_lv8_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_segmentIntersectsGri_fu_133_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            grp_segmentIntersectsGri_fu_133_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_segmentIntersectsGri_fu_133_ap_ready.read())) {
            grp_segmentIntersectsGri_fu_133_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_segmentIntersectsGri_fu_148_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            grp_segmentIntersectsGri_fu_148_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_segmentIntersectsGri_fu_148_ap_ready.read())) {
            grp_segmentIntersectsGri_fu_148_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_segmentIntersectsGri_fu_163_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            grp_segmentIntersectsGri_fu_163_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_segmentIntersectsGri_fu_163_ap_ready.read())) {
            grp_segmentIntersectsGri_fu_163_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_segmentIntersectsGri_fu_178_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            grp_segmentIntersectsGri_fu_178_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_segmentIntersectsGri_fu_178_ap_ready.read())) {
            grp_segmentIntersectsGri_fu_178_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_block_state9_on_subcall_done.read(), ap_const_boolean_0))) {
        k_0_reg_98 = k_reg_415.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        k_0_reg_98 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grid_z_reg_420 = grp_fu_193_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        k_reg_415 = k_fu_207_p2.read();
    }
}

void honeybee::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void honeybee::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void honeybee::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void honeybee::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void honeybee::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void honeybee::thread_ap_block_state9_on_subcall_done() {
    ap_block_state9_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_segmentIntersectsGri_fu_133_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_segmentIntersectsGri_fu_148_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_segmentIntersectsGri_fu_163_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_segmentIntersectsGri_fu_178_ap_done.read()));
}

void honeybee::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln152_fu_201_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void honeybee::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void honeybee::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln152_fu_201_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void honeybee::thread_ap_return() {
    ap_return = collisions_0_reg_121.read();
}

void honeybee::thread_b_fu_213_p2() {
    b_fu_213_p2 = (!ap_const_lv4_4.is_01() || !b_0_reg_109.read().is_01())? sc_lv<4>(): (sc_biguint<4>(ap_const_lv4_4) + sc_biguint<4>(b_0_reg_109.read()));
}

void honeybee::thread_grp_fu_193_p0() {
    grp_fu_193_p0 = esl_zext<32,2>(k_0_reg_98.read());
}

void honeybee::thread_grp_segmentIntersectsGri_fu_133_ap_start() {
    grp_segmentIntersectsGri_fu_133_ap_start = grp_segmentIntersectsGri_fu_133_ap_start_reg.read();
}

void honeybee::thread_grp_segmentIntersectsGri_fu_148_ap_start() {
    grp_segmentIntersectsGri_fu_148_ap_start = grp_segmentIntersectsGri_fu_148_ap_start_reg.read();
}

void honeybee::thread_grp_segmentIntersectsGri_fu_163_ap_start() {
    grp_segmentIntersectsGri_fu_163_ap_start = grp_segmentIntersectsGri_fu_163_ap_start_reg.read();
}

void honeybee::thread_grp_segmentIntersectsGri_fu_178_ap_start() {
    grp_segmentIntersectsGri_fu_178_ap_start = grp_segmentIntersectsGri_fu_178_ap_start_reg.read();
}

void honeybee::thread_icmp_ln152_fu_201_p2() {
    icmp_ln152_fu_201_p2 = (!k_0_reg_98.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_98.read() == ap_const_lv2_2);
}

void honeybee::thread_k_fu_207_p2() {
    k_fu_207_p2 = (!k_0_reg_98.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(k_0_reg_98.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void honeybee::thread_or_ln158_1_fu_341_p2() {
    or_ln158_1_fu_341_p2 = (select_ln158_2_fu_281_p3.read() | select_ln158_3_fu_305_p3.read());
}

void honeybee::thread_or_ln158_2_fu_347_p2() {
    or_ln158_2_fu_347_p2 = (or_ln158_1_fu_341_p2.read() | tmp_fu_333_p3.read());
}

void honeybee::thread_or_ln158_3_fu_353_p2() {
    or_ln158_3_fu_353_p2 = (collisions_0_reg_121.read() | or_ln158_2_fu_347_p2.read());
}

void honeybee::thread_or_ln158_fu_317_p2() {
    or_ln158_fu_317_p2 = (trunc_ln158_fu_313_p1.read() | select_ln158_fu_243_p3.read());
}

void honeybee::thread_or_ln161_1_fu_251_p2() {
    or_ln161_1_fu_251_p2 = (trunc_ln152_fu_219_p1.read() | ap_const_lv3_1);
}

void honeybee::thread_or_ln161_2_fu_289_p2() {
    or_ln161_2_fu_289_p2 = (trunc_ln152_fu_219_p1.read() | ap_const_lv3_3);
}

void honeybee::thread_or_ln161_fu_223_p2() {
    or_ln161_fu_223_p2 = (trunc_ln152_fu_219_p1.read() | ap_const_lv3_2);
}

void honeybee::thread_select_ln158_1_fu_267_p3() {
    select_ln158_1_fu_267_p3 = (!grp_segmentIntersectsGri_fu_148_ap_return.read()[0].is_01())? sc_lv<8>(): ((grp_segmentIntersectsGri_fu_148_ap_return.read()[0].to_bool())? shl_ln159_1_fu_261_p2.read(): ap_const_lv8_0);
}

void honeybee::thread_select_ln158_2_fu_281_p3() {
    select_ln158_2_fu_281_p3 = (!grp_segmentIntersectsGri_fu_163_ap_return.read()[0].is_01())? sc_lv<8>(): ((grp_segmentIntersectsGri_fu_163_ap_return.read()[0].to_bool())? shl_ln159_2_fu_275_p2.read(): ap_const_lv8_0);
}

void honeybee::thread_select_ln158_3_fu_305_p3() {
    select_ln158_3_fu_305_p3 = (!grp_segmentIntersectsGri_fu_178_ap_return.read()[0].is_01())? sc_lv<8>(): ((grp_segmentIntersectsGri_fu_178_ap_return.read()[0].to_bool())? shl_ln159_3_fu_299_p2.read(): ap_const_lv8_0);
}

void honeybee::thread_select_ln158_fu_243_p3() {
    select_ln158_fu_243_p3 = (!grp_segmentIntersectsGri_fu_133_ap_return.read()[0].is_01())? sc_lv<5>(): ((grp_segmentIntersectsGri_fu_133_ap_return.read()[0].to_bool())? shl_ln159_fu_237_p2.read(): ap_const_lv5_0);
}

void honeybee::thread_shl_ln159_1_fu_261_p2() {
    shl_ln159_1_fu_261_p2 = (!zext_ln161_1_fu_257_p1.read().is_01())? sc_lv<8>(): ap_const_lv8_1 << (unsigned short)zext_ln161_1_fu_257_p1.read().to_uint();
}

void honeybee::thread_shl_ln159_2_fu_275_p2() {
    shl_ln159_2_fu_275_p2 = (!zext_ln161_fu_229_p1.read().is_01())? sc_lv<8>(): ap_const_lv8_1 << (unsigned short)zext_ln161_fu_229_p1.read().to_uint();
}

void honeybee::thread_shl_ln159_3_fu_299_p2() {
    shl_ln159_3_fu_299_p2 = (!zext_ln161_2_fu_295_p1.read().is_01())? sc_lv<8>(): ap_const_lv8_1 << (unsigned short)zext_ln161_2_fu_295_p1.read().to_uint();
}

void honeybee::thread_shl_ln159_fu_237_p2() {
    shl_ln159_fu_237_p2 = (!zext_ln152_1_fu_233_p1.read().is_01())? sc_lv<5>(): ap_const_lv5_1 << (unsigned short)zext_ln152_1_fu_233_p1.read().to_uint();
}

void honeybee::thread_tmp_62_fu_323_p4() {
    tmp_62_fu_323_p4 = select_ln158_1_fu_267_p3.read().range(7, 5);
}

void honeybee::thread_tmp_fu_333_p3() {
    tmp_fu_333_p3 = esl_concat<3,5>(tmp_62_fu_323_p4.read(), or_ln158_fu_317_p2.read());
}

void honeybee::thread_trunc_ln152_fu_219_p1() {
    trunc_ln152_fu_219_p1 = b_0_reg_109.read().range(3-1, 0);
}

void honeybee::thread_trunc_ln158_fu_313_p1() {
    trunc_ln158_fu_313_p1 = select_ln158_1_fu_267_p3.read().range(5-1, 0);
}

void honeybee::thread_zext_ln152_1_fu_233_p1() {
    zext_ln152_1_fu_233_p1 = esl_zext<5,4>(b_0_reg_109.read());
}

void honeybee::thread_zext_ln161_1_fu_257_p1() {
    zext_ln161_1_fu_257_p1 = esl_zext<8,3>(or_ln161_1_fu_251_p2.read());
}

void honeybee::thread_zext_ln161_2_fu_295_p1() {
    zext_ln161_2_fu_295_p1 = esl_zext<8,3>(or_ln161_2_fu_289_p2.read());
}

void honeybee::thread_zext_ln161_fu_229_p1() {
    zext_ln161_fu_229_p1 = esl_zext<8,3>(or_ln161_fu_223_p2.read());
}

void honeybee::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln152_fu_201_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_block_state9_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXX";
            break;
    }
}

void honeybee::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p1_x\" :  \"" << edge_p1_x.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p1_y\" :  \"" << edge_p1_y.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p1_z\" :  \"" << edge_p1_z.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p2_x\" :  \"" << edge_p2_x.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p2_y\" :  \"" << edge_p2_y.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edge_p2_z\" :  \"" << edge_p2_z.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

