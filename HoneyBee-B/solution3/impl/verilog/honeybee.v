// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="honeybee,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.921200,HLS_SYN_LAT=517,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=136,HLS_SYN_FF=22753,HLS_SYN_LUT=51726,HLS_VERSION=2019_2}" *)

module honeybee (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        edge_p1_x,
        edge_p1_y,
        edge_p1_z,
        edge_p2_x,
        edge_p2_y,
        edge_p2_z,
        ap_return
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] edge_p1_x;
input  [31:0] edge_p1_y;
input  [31:0] edge_p1_z;
input  [31:0] edge_p2_x;
input  [31:0] edge_p2_y;
input  [31:0] edge_p2_z;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [1:0] k_fu_207_p2;
reg   [1:0] k_reg_415;
wire   [31:0] grp_fu_193_p1;
reg   [31:0] grid_z_reg_420;
wire    ap_CS_fsm_state7;
wire   [3:0] b_fu_213_p2;
wire    ap_CS_fsm_state9;
wire    grp_segmentIntersectsGri_fu_133_ap_ready;
wire    grp_segmentIntersectsGri_fu_133_ap_done;
wire    grp_segmentIntersectsGri_fu_148_ap_ready;
wire    grp_segmentIntersectsGri_fu_148_ap_done;
wire    grp_segmentIntersectsGri_fu_163_ap_ready;
wire    grp_segmentIntersectsGri_fu_163_ap_done;
wire    grp_segmentIntersectsGri_fu_178_ap_ready;
wire    grp_segmentIntersectsGri_fu_178_ap_done;
reg    ap_block_state9_on_subcall_done;
wire   [7:0] or_ln158_3_fu_353_p2;
wire    grp_segmentIntersectsGri_fu_133_ap_start;
wire    grp_segmentIntersectsGri_fu_133_ap_idle;
wire   [0:0] grp_segmentIntersectsGri_fu_133_ap_return;
wire    grp_segmentIntersectsGri_fu_148_ap_start;
wire    grp_segmentIntersectsGri_fu_148_ap_idle;
wire   [0:0] grp_segmentIntersectsGri_fu_148_ap_return;
wire    grp_segmentIntersectsGri_fu_163_ap_start;
wire    grp_segmentIntersectsGri_fu_163_ap_idle;
wire   [0:0] grp_segmentIntersectsGri_fu_163_ap_return;
wire    grp_segmentIntersectsGri_fu_178_ap_start;
wire    grp_segmentIntersectsGri_fu_178_ap_idle;
wire   [0:0] grp_segmentIntersectsGri_fu_178_ap_return;
reg   [1:0] k_0_reg_98;
reg   [3:0] b_0_reg_109;
reg   [7:0] collisions_0_reg_121;
reg    grp_segmentIntersectsGri_fu_133_ap_start_reg;
wire    ap_CS_fsm_state8;
reg    grp_segmentIntersectsGri_fu_148_ap_start_reg;
reg    grp_segmentIntersectsGri_fu_163_ap_start_reg;
reg    grp_segmentIntersectsGri_fu_178_ap_start_reg;
wire   [31:0] grp_fu_193_p0;
wire   [2:0] trunc_ln152_fu_219_p1;
wire   [2:0] or_ln161_fu_223_p2;
wire   [4:0] zext_ln152_1_fu_233_p1;
wire   [4:0] shl_ln159_fu_237_p2;
wire   [2:0] or_ln161_1_fu_251_p2;
wire   [7:0] zext_ln161_1_fu_257_p1;
wire   [7:0] shl_ln159_1_fu_261_p2;
wire   [7:0] zext_ln161_fu_229_p1;
wire   [7:0] shl_ln159_2_fu_275_p2;
wire   [2:0] or_ln161_2_fu_289_p2;
wire   [7:0] zext_ln161_2_fu_295_p1;
wire   [7:0] shl_ln159_3_fu_299_p2;
wire   [7:0] select_ln158_1_fu_267_p3;
wire   [4:0] trunc_ln158_fu_313_p1;
wire   [4:0] select_ln158_fu_243_p3;
wire   [2:0] tmp_62_fu_323_p4;
wire   [4:0] or_ln158_fu_317_p2;
wire   [7:0] select_ln158_2_fu_281_p3;
wire   [7:0] select_ln158_3_fu_305_p3;
wire   [7:0] or_ln158_1_fu_341_p2;
wire   [7:0] tmp_fu_333_p3;
wire   [7:0] or_ln158_2_fu_347_p2;
wire   [0:0] icmp_ln152_fu_201_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 grp_segmentIntersectsGri_fu_133_ap_start_reg = 1'b0;
#0 grp_segmentIntersectsGri_fu_148_ap_start_reg = 1'b0;
#0 grp_segmentIntersectsGri_fu_163_ap_start_reg = 1'b0;
#0 grp_segmentIntersectsGri_fu_178_ap_start_reg = 1'b0;
end

segmentIntersectsGri grp_segmentIntersectsGri_fu_133(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_segmentIntersectsGri_fu_133_ap_start),
    .ap_done(grp_segmentIntersectsGri_fu_133_ap_done),
    .ap_idle(grp_segmentIntersectsGri_fu_133_ap_idle),
    .ap_ready(grp_segmentIntersectsGri_fu_133_ap_ready),
    .edge_p1_x(edge_p1_x),
    .edge_p1_y(edge_p1_y),
    .edge_p1_z(edge_p1_z),
    .edge_p2_x(edge_p2_x),
    .edge_p2_y(edge_p2_y),
    .edge_p2_z(edge_p2_z),
    .grid_x(32'd0),
    .grid_y(32'd0),
    .grid_z(grid_z_reg_420),
    .ap_return(grp_segmentIntersectsGri_fu_133_ap_return)
);

segmentIntersectsGri grp_segmentIntersectsGri_fu_148(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_segmentIntersectsGri_fu_148_ap_start),
    .ap_done(grp_segmentIntersectsGri_fu_148_ap_done),
    .ap_idle(grp_segmentIntersectsGri_fu_148_ap_idle),
    .ap_ready(grp_segmentIntersectsGri_fu_148_ap_ready),
    .edge_p1_x(edge_p1_x),
    .edge_p1_y(edge_p1_y),
    .edge_p1_z(edge_p1_z),
    .edge_p2_x(edge_p2_x),
    .edge_p2_y(edge_p2_y),
    .edge_p2_z(edge_p2_z),
    .grid_x(32'd1065353216),
    .grid_y(32'd0),
    .grid_z(grid_z_reg_420),
    .ap_return(grp_segmentIntersectsGri_fu_148_ap_return)
);

segmentIntersectsGri grp_segmentIntersectsGri_fu_163(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_segmentIntersectsGri_fu_163_ap_start),
    .ap_done(grp_segmentIntersectsGri_fu_163_ap_done),
    .ap_idle(grp_segmentIntersectsGri_fu_163_ap_idle),
    .ap_ready(grp_segmentIntersectsGri_fu_163_ap_ready),
    .edge_p1_x(edge_p1_x),
    .edge_p1_y(edge_p1_y),
    .edge_p1_z(edge_p1_z),
    .edge_p2_x(edge_p2_x),
    .edge_p2_y(edge_p2_y),
    .edge_p2_z(edge_p2_z),
    .grid_x(32'd0),
    .grid_y(32'd1065353216),
    .grid_z(grid_z_reg_420),
    .ap_return(grp_segmentIntersectsGri_fu_163_ap_return)
);

segmentIntersectsGri grp_segmentIntersectsGri_fu_178(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_segmentIntersectsGri_fu_178_ap_start),
    .ap_done(grp_segmentIntersectsGri_fu_178_ap_done),
    .ap_idle(grp_segmentIntersectsGri_fu_178_ap_idle),
    .ap_ready(grp_segmentIntersectsGri_fu_178_ap_ready),
    .edge_p1_x(edge_p1_x),
    .edge_p1_y(edge_p1_y),
    .edge_p1_z(edge_p1_z),
    .edge_p2_x(edge_p2_x),
    .edge_p2_y(edge_p2_y),
    .edge_p2_z(edge_p2_z),
    .grid_x(32'd1065353216),
    .grid_y(32'd1065353216),
    .grid_z(grid_z_reg_420),
    .ap_return(grp_segmentIntersectsGri_fu_178_ap_return)
);

honeybee_sitofp_3hbi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_sitofp_3hbi_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_193_p0),
    .ce(1'b1),
    .dout(grp_fu_193_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_segmentIntersectsGri_fu_133_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            grp_segmentIntersectsGri_fu_133_ap_start_reg <= 1'b1;
        end else if ((grp_segmentIntersectsGri_fu_133_ap_ready == 1'b1)) begin
            grp_segmentIntersectsGri_fu_133_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_segmentIntersectsGri_fu_148_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            grp_segmentIntersectsGri_fu_148_ap_start_reg <= 1'b1;
        end else if ((grp_segmentIntersectsGri_fu_148_ap_ready == 1'b1)) begin
            grp_segmentIntersectsGri_fu_148_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_segmentIntersectsGri_fu_163_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            grp_segmentIntersectsGri_fu_163_ap_start_reg <= 1'b1;
        end else if ((grp_segmentIntersectsGri_fu_163_ap_ready == 1'b1)) begin
            grp_segmentIntersectsGri_fu_163_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_segmentIntersectsGri_fu_178_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            grp_segmentIntersectsGri_fu_178_ap_start_reg <= 1'b1;
        end else if ((grp_segmentIntersectsGri_fu_178_ap_ready == 1'b1)) begin
            grp_segmentIntersectsGri_fu_178_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state9_on_subcall_done) & (1'b1 == ap_CS_fsm_state9))) begin
        b_0_reg_109 <= b_fu_213_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_0_reg_109 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state9_on_subcall_done) & (1'b1 == ap_CS_fsm_state9))) begin
        collisions_0_reg_121 <= or_ln158_3_fu_353_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        collisions_0_reg_121 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state9_on_subcall_done) & (1'b1 == ap_CS_fsm_state9))) begin
        k_0_reg_98 <= k_reg_415;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_0_reg_98 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grid_z_reg_420 <= grp_fu_193_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_415 <= k_fu_207_p2;
    end
end

always @ (*) begin
    if (((icmp_ln152_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln152_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln152_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b0 == ap_block_state9_on_subcall_done) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state9_on_subcall_done = ((grp_segmentIntersectsGri_fu_178_ap_done == 1'b0) | (grp_segmentIntersectsGri_fu_163_ap_done == 1'b0) | (grp_segmentIntersectsGri_fu_148_ap_done == 1'b0) | (grp_segmentIntersectsGri_fu_133_ap_done == 1'b0));
end

assign ap_return = collisions_0_reg_121;

assign b_fu_213_p2 = (4'd4 + b_0_reg_109);

assign grp_fu_193_p0 = k_0_reg_98;

assign grp_segmentIntersectsGri_fu_133_ap_start = grp_segmentIntersectsGri_fu_133_ap_start_reg;

assign grp_segmentIntersectsGri_fu_148_ap_start = grp_segmentIntersectsGri_fu_148_ap_start_reg;

assign grp_segmentIntersectsGri_fu_163_ap_start = grp_segmentIntersectsGri_fu_163_ap_start_reg;

assign grp_segmentIntersectsGri_fu_178_ap_start = grp_segmentIntersectsGri_fu_178_ap_start_reg;

assign icmp_ln152_fu_201_p2 = ((k_0_reg_98 == 2'd2) ? 1'b1 : 1'b0);

assign k_fu_207_p2 = (k_0_reg_98 + 2'd1);

assign or_ln158_1_fu_341_p2 = (select_ln158_3_fu_305_p3 | select_ln158_2_fu_281_p3);

assign or_ln158_2_fu_347_p2 = (tmp_fu_333_p3 | or_ln158_1_fu_341_p2);

assign or_ln158_3_fu_353_p2 = (or_ln158_2_fu_347_p2 | collisions_0_reg_121);

assign or_ln158_fu_317_p2 = (trunc_ln158_fu_313_p1 | select_ln158_fu_243_p3);

assign or_ln161_1_fu_251_p2 = (trunc_ln152_fu_219_p1 | 3'd1);

assign or_ln161_2_fu_289_p2 = (trunc_ln152_fu_219_p1 | 3'd3);

assign or_ln161_fu_223_p2 = (trunc_ln152_fu_219_p1 | 3'd2);

assign select_ln158_1_fu_267_p3 = ((grp_segmentIntersectsGri_fu_148_ap_return[0:0] === 1'b1) ? shl_ln159_1_fu_261_p2 : 8'd0);

assign select_ln158_2_fu_281_p3 = ((grp_segmentIntersectsGri_fu_163_ap_return[0:0] === 1'b1) ? shl_ln159_2_fu_275_p2 : 8'd0);

assign select_ln158_3_fu_305_p3 = ((grp_segmentIntersectsGri_fu_178_ap_return[0:0] === 1'b1) ? shl_ln159_3_fu_299_p2 : 8'd0);

assign select_ln158_fu_243_p3 = ((grp_segmentIntersectsGri_fu_133_ap_return[0:0] === 1'b1) ? shl_ln159_fu_237_p2 : 5'd0);

assign shl_ln159_1_fu_261_p2 = 8'd1 << zext_ln161_1_fu_257_p1;

assign shl_ln159_2_fu_275_p2 = 8'd1 << zext_ln161_fu_229_p1;

assign shl_ln159_3_fu_299_p2 = 8'd1 << zext_ln161_2_fu_295_p1;

assign shl_ln159_fu_237_p2 = 5'd1 << zext_ln152_1_fu_233_p1;

assign tmp_62_fu_323_p4 = {{select_ln158_1_fu_267_p3[7:5]}};

assign tmp_fu_333_p3 = {{tmp_62_fu_323_p4}, {or_ln158_fu_317_p2}};

assign trunc_ln152_fu_219_p1 = b_0_reg_109[2:0];

assign trunc_ln158_fu_313_p1 = select_ln158_1_fu_267_p3[4:0];

assign zext_ln152_1_fu_233_p1 = b_0_reg_109;

assign zext_ln161_1_fu_257_p1 = or_ln161_1_fu_251_p2;

assign zext_ln161_2_fu_295_p1 = or_ln161_2_fu_289_p2;

assign zext_ln161_fu_229_p1 = or_ln161_fu_223_p2;

endmodule //honeybee
