-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity checkAxis_0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of checkAxis_0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_40400000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000010000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_FFFFFFFC : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_lineIntersectsPlane_fu_190_ap_ready : STD_LOGIC;
    signal grp_lineIntersectsPlane_fu_190_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal reg_246 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hls_fptosi_float_i_fu_218_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_257 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_pointOnSegment_fu_205_ap_ready : STD_LOGIC;
    signal grp_pointOnSegment_fu_205_ap_done : STD_LOGIC;
    signal grp_pointOnSegment_fu_205_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_p_hls_fptosi_float_i_fu_223_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln84_fu_265_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_reg_565 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_1_reg_569 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_2_reg_573 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_3_reg_577 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_504_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_584 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln138_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal returnCollisions_fu_515_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal collisions_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal collisions_ce0 : STD_LOGIC;
    signal collisions_we0 : STD_LOGIC;
    signal collisions_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_lineIntersectsPlane_fu_190_ap_start : STD_LOGIC;
    signal grp_lineIntersectsPlane_fu_190_ap_idle : STD_LOGIC;
    signal grp_lineIntersectsPlane_fu_190_plane : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lineIntersectsPlane_fu_190_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lineIntersectsPlane_fu_190_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lineIntersectsPlane_fu_190_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pointOnSegment_fu_205_ap_start : STD_LOGIC;
    signal grp_pointOnSegment_fu_205_ap_idle : STD_LOGIC;
    signal grp_p_hls_fptosi_float_i_fu_218_ap_ready : STD_LOGIC;
    signal grp_p_hls_fptosi_float_i_fu_223_ap_ready : STD_LOGIC;
    signal phi_ln84_reg_156 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln84_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal returnCollisions_0_reg_167 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_1_reg_179 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lineIntersectsPlane_fu_190_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_pointOnSegment_fu_205_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln84_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln122_fu_326_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln122_1_fu_377_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln122_2_fu_434_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln122_3_fu_491_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln80_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln121_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln80_18_fu_304_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_19_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln122_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln122_fu_320_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln121_fu_298_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln80_11_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln80_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_20_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln121_1_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln80_21_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln122_1_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln122_1_fu_371_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln121_1_fu_355_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln80_12_fu_384_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln80_5_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_22_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln121_2_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln80_6_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_23_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln122_2_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln122_2_fu_428_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln121_2_fu_406_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln80_13_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln80_7_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_24_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln121_3_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln80_8_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_25_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln122_3_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln122_3_fu_485_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln121_3_fu_463_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);

    component lineIntersectsPlane IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
        plane : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pointOnSegment IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_x : IN STD_LOGIC_VECTOR (31 downto 0);
        p_y : IN STD_LOGIC_VECTOR (31 downto 0);
        p_z : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component p_hls_fptosi_float_i IS
    port (
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component checkAxis_2_collihbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    collisions_U : component checkAxis_2_collihbi
    generic map (
        DataWidth => 64,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => collisions_address0,
        ce0 => collisions_ce0,
        we0 => collisions_we0,
        d0 => collisions_d0,
        q0 => collisions_q0);

    grp_lineIntersectsPlane_fu_190 : component lineIntersectsPlane
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lineIntersectsPlane_fu_190_ap_start,
        ap_done => grp_lineIntersectsPlane_fu_190_ap_done,
        ap_idle => grp_lineIntersectsPlane_fu_190_ap_idle,
        ap_ready => grp_lineIntersectsPlane_fu_190_ap_ready,
        edge_p1_x => edge_p1_x,
        edge_p1_y => edge_p1_y,
        edge_p1_z => edge_p1_z,
        edge_p2_x => edge_p2_x,
        edge_p2_y => edge_p2_y,
        edge_p2_z => edge_p2_z,
        plane => grp_lineIntersectsPlane_fu_190_plane,
        ap_return_0 => grp_lineIntersectsPlane_fu_190_ap_return_0,
        ap_return_1 => grp_lineIntersectsPlane_fu_190_ap_return_1,
        ap_return_2 => grp_lineIntersectsPlane_fu_190_ap_return_2);

    grp_pointOnSegment_fu_205 : component pointOnSegment
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pointOnSegment_fu_205_ap_start,
        ap_done => grp_pointOnSegment_fu_205_ap_done,
        ap_idle => grp_pointOnSegment_fu_205_ap_idle,
        ap_ready => grp_pointOnSegment_fu_205_ap_ready,
        p_x => reg_240,
        p_y => reg_252,
        p_z => reg_246,
        e_p1_x => edge_p1_x,
        e_p1_y => edge_p1_z,
        e_p1_z => edge_p1_y,
        e_p2_x => edge_p2_x,
        e_p2_y => edge_p2_z,
        e_p2_z => edge_p2_y,
        ap_return => grp_pointOnSegment_fu_205_ap_return);

    grp_p_hls_fptosi_float_i_fu_218 : component p_hls_fptosi_float_i
    port map (
        ap_ready => grp_p_hls_fptosi_float_i_fu_218_ap_ready,
        x => reg_240,
        ap_return => grp_p_hls_fptosi_float_i_fu_218_ap_return);

    grp_p_hls_fptosi_float_i_fu_223 : component p_hls_fptosi_float_i
    port map (
        ap_ready => grp_p_hls_fptosi_float_i_fu_223_ap_ready,
        x => reg_246,
        ap_return => grp_p_hls_fptosi_float_i_fu_223_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if (((icmp_ln138_fu_498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    ap_return_preg <= returnCollisions_0_reg_167;
                end if; 
            end if;
        end if;
    end process;


    grp_lineIntersectsPlane_fu_190_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lineIntersectsPlane_fu_190_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln84_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    grp_lineIntersectsPlane_fu_190_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lineIntersectsPlane_fu_190_ap_ready = ap_const_logic_1)) then 
                    grp_lineIntersectsPlane_fu_190_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pointOnSegment_fu_205_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pointOnSegment_fu_205_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_pointOnSegment_fu_205_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pointOnSegment_fu_205_ap_ready = ap_const_logic_1)) then 
                    grp_pointOnSegment_fu_205_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_1_reg_179 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_1_reg_179 <= i_reg_584;
            end if; 
        end if;
    end process;

    phi_ln84_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln84_fu_276_p2 = ap_const_lv1_0))) then 
                phi_ln84_reg_156 <= add_ln84_fu_265_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln84_reg_156 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    returnCollisions_0_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                returnCollisions_0_reg_167 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                returnCollisions_0_reg_167 <= returnCollisions_fu_515_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                i_reg_584 <= i_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_lineIntersectsPlane_fu_190_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((grp_lineIntersectsPlane_fu_190_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_lineIntersectsPlane_fu_190_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((grp_lineIntersectsPlane_fu_190_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
                reg_240 <= grp_lineIntersectsPlane_fu_190_ap_return_0;
                reg_246 <= grp_lineIntersectsPlane_fu_190_ap_return_1;
                reg_252 <= grp_lineIntersectsPlane_fu_190_ap_return_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_pointOnSegment_fu_205_ap_return = ap_const_lv1_1) and (grp_pointOnSegment_fu_205_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((grp_pointOnSegment_fu_205_ap_return = ap_const_lv1_1) and (grp_pointOnSegment_fu_205_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((grp_pointOnSegment_fu_205_ap_return = ap_const_lv1_1) and (grp_pointOnSegment_fu_205_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((grp_pointOnSegment_fu_205_ap_return = ap_const_lv1_1) and (grp_pointOnSegment_fu_205_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then
                reg_257 <= grp_p_hls_fptosi_float_i_fu_218_ap_return;
                reg_261 <= grp_p_hls_fptosi_float_i_fu_223_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_205_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_43_1_reg_569 <= grp_pointOnSegment_fu_205_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_205_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                tmp_43_2_reg_573 <= grp_pointOnSegment_fu_205_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_205_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                tmp_43_3_reg_577 <= grp_pointOnSegment_fu_205_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_205_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_s_reg_565 <= grp_pointOnSegment_fu_205_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_lineIntersectsPlane_fu_190_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state5, grp_pointOnSegment_fu_205_ap_done, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_state19, icmp_ln138_fu_498_p2, icmp_ln84_fu_276_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln84_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_lineIntersectsPlane_fu_190_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_pointOnSegment_fu_205_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_lineIntersectsPlane_fu_190_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_pointOnSegment_fu_205_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_lineIntersectsPlane_fu_190_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_pointOnSegment_fu_205_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_lineIntersectsPlane_fu_190_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_pointOnSegment_fu_205_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln138_fu_498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln80_18_fu_304_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFC) + signed(shl_ln80_fu_282_p2));
    add_ln80_19_fu_310_p2 <= std_logic_vector(unsigned(add_ln80_18_fu_304_p2) + unsigned(reg_257));
    add_ln80_20_fu_345_p2 <= std_logic_vector(unsigned(or_ln80_fu_339_p2) + unsigned(reg_257));
    add_ln80_21_fu_361_p2 <= std_logic_vector(unsigned(reg_257) + unsigned(shl_ln80_11_fu_333_p2));
    add_ln80_22_fu_396_p2 <= std_logic_vector(unsigned(or_ln80_5_fu_390_p2) + unsigned(reg_257));
    add_ln80_23_fu_418_p2 <= std_logic_vector(unsigned(or_ln80_6_fu_412_p2) + unsigned(reg_257));
    add_ln80_24_fu_453_p2 <= std_logic_vector(unsigned(or_ln80_7_fu_447_p2) + unsigned(reg_257));
    add_ln80_25_fu_475_p2 <= std_logic_vector(unsigned(or_ln80_8_fu_469_p2) + unsigned(reg_257));
    add_ln80_fu_288_p2 <= std_logic_vector(unsigned(reg_257) + unsigned(shl_ln80_fu_282_p2));
    add_ln84_fu_265_p2 <= std_logic_vector(unsigned(phi_ln84_reg_156) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19, icmp_ln138_fu_498_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln138_fu_498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19, icmp_ln138_fu_498_p2)
    begin
        if (((icmp_ln138_fu_498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state19, icmp_ln138_fu_498_p2, returnCollisions_0_reg_167, ap_return_preg)
    begin
        if (((icmp_ln138_fu_498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_return <= returnCollisions_0_reg_167;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    collisions_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state19, ap_CS_fsm_state18, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, zext_ln84_fu_271_p1, zext_ln139_fu_510_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            collisions_address0 <= zext_ln139_fu_510_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            collisions_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            collisions_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            collisions_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            collisions_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            collisions_address0 <= zext_ln84_fu_271_p1(2 - 1 downto 0);
        else 
            collisions_address0 <= "XX";
        end if; 
    end process;


    collisions_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state19, ap_CS_fsm_state18, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            collisions_ce0 <= ap_const_logic_1;
        else 
            collisions_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    collisions_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state18, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, or_ln122_fu_326_p2, or_ln122_1_fu_377_p2, or_ln122_2_fu_434_p2, or_ln122_3_fu_491_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            collisions_d0 <= or_ln122_3_fu_491_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            collisions_d0 <= or_ln122_2_fu_434_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            collisions_d0 <= or_ln122_1_fu_377_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            collisions_d0 <= or_ln122_fu_326_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            collisions_d0 <= ap_const_lv64_0;
        else 
            collisions_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    collisions_we0_assign_proc : process(ap_CS_fsm_state2, tmp_s_reg_565, tmp_43_1_reg_569, tmp_43_2_reg_573, tmp_43_3_reg_577, ap_CS_fsm_state18, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((tmp_43_2_reg_573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((tmp_43_1_reg_569 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((tmp_s_reg_565 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((tmp_43_3_reg_577 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            collisions_we0 <= ap_const_logic_1;
        else 
            collisions_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_lineIntersectsPlane_fu_190_ap_start <= grp_lineIntersectsPlane_fu_190_ap_start_reg;

    grp_lineIntersectsPlane_fu_190_plane_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_lineIntersectsPlane_fu_190_plane <= ap_const_lv32_40400000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_lineIntersectsPlane_fu_190_plane <= ap_const_lv32_40000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_lineIntersectsPlane_fu_190_plane <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_lineIntersectsPlane_fu_190_plane <= ap_const_lv32_0;
        else 
            grp_lineIntersectsPlane_fu_190_plane <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_pointOnSegment_fu_205_ap_start <= grp_pointOnSegment_fu_205_ap_start_reg;
    i_fu_504_p2 <= std_logic_vector(unsigned(i_1_reg_179) + unsigned(ap_const_lv3_1));
    icmp_ln138_fu_498_p2 <= "1" when (i_1_reg_179 = ap_const_lv3_4) else "0";
    icmp_ln84_fu_276_p2 <= "1" when (phi_ln84_reg_156 = ap_const_lv2_3) else "0";
    or_ln122_1_fu_377_p2 <= (shl_ln122_1_fu_371_p2 or shl_ln121_1_fu_355_p2);
    or_ln122_2_fu_434_p2 <= (shl_ln122_2_fu_428_p2 or shl_ln121_2_fu_406_p2);
    or_ln122_3_fu_491_p2 <= (shl_ln122_3_fu_485_p2 or shl_ln121_3_fu_463_p2);
    or_ln122_fu_326_p2 <= (shl_ln122_fu_320_p2 or shl_ln121_fu_298_p2);
    or_ln80_5_fu_390_p2 <= (shl_ln80_12_fu_384_p2 or ap_const_lv32_8);
    or_ln80_6_fu_412_p2 <= (shl_ln80_12_fu_384_p2 or ap_const_lv32_4);
    or_ln80_7_fu_447_p2 <= (shl_ln80_13_fu_441_p2 or ap_const_lv32_C);
    or_ln80_8_fu_469_p2 <= (shl_ln80_13_fu_441_p2 or ap_const_lv32_8);
    or_ln80_fu_339_p2 <= (shl_ln80_11_fu_333_p2 or ap_const_lv32_4);
    returnCollisions_fu_515_p2 <= (returnCollisions_0_reg_167 or collisions_q0);
    shl_ln121_1_fu_355_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln121_1_fu_351_p1(31-1 downto 0)))));
    shl_ln121_2_fu_406_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln121_2_fu_402_p1(31-1 downto 0)))));
    shl_ln121_3_fu_463_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln121_3_fu_459_p1(31-1 downto 0)))));
    shl_ln121_fu_298_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln121_fu_294_p1(31-1 downto 0)))));
    shl_ln122_1_fu_371_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln122_1_fu_367_p1(31-1 downto 0)))));
    shl_ln122_2_fu_428_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln122_2_fu_424_p1(31-1 downto 0)))));
    shl_ln122_3_fu_485_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln122_3_fu_481_p1(31-1 downto 0)))));
    shl_ln122_fu_320_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln122_fu_316_p1(31-1 downto 0)))));
    shl_ln80_11_fu_333_p2 <= std_logic_vector(shift_left(unsigned(reg_261),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln80_12_fu_384_p2 <= std_logic_vector(shift_left(unsigned(reg_261),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln80_13_fu_441_p2 <= std_logic_vector(shift_left(unsigned(reg_261),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln80_fu_282_p2 <= std_logic_vector(shift_left(unsigned(reg_261),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    zext_ln121_1_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_20_fu_345_p2),64));
    zext_ln121_2_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_22_fu_396_p2),64));
    zext_ln121_3_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_24_fu_453_p2),64));
    zext_ln121_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_fu_288_p2),64));
    zext_ln122_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_21_fu_361_p2),64));
    zext_ln122_2_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_23_fu_418_p2),64));
    zext_ln122_3_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_25_fu_475_p2),64));
    zext_ln122_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_19_fu_310_p2),64));
    zext_ln139_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_179),64));
    zext_ln84_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln84_reg_156),64));
end behav;
