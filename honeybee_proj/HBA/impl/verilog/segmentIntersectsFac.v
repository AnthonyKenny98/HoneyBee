// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module segmentIntersectsFac (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        edge_p1_x,
        edge_p1_y,
        edge_p1_z,
        edge_p2_x,
        edge_p2_y,
        edge_p2_z,
        face_x,
        face_y,
        face_z,
        ap_return
);

parameter    ap_ST_fsm_state1 = 51'd1;
parameter    ap_ST_fsm_state2 = 51'd2;
parameter    ap_ST_fsm_state3 = 51'd4;
parameter    ap_ST_fsm_state4 = 51'd8;
parameter    ap_ST_fsm_state5 = 51'd16;
parameter    ap_ST_fsm_state6 = 51'd32;
parameter    ap_ST_fsm_state7 = 51'd64;
parameter    ap_ST_fsm_state8 = 51'd128;
parameter    ap_ST_fsm_state9 = 51'd256;
parameter    ap_ST_fsm_state10 = 51'd512;
parameter    ap_ST_fsm_state11 = 51'd1024;
parameter    ap_ST_fsm_state12 = 51'd2048;
parameter    ap_ST_fsm_state13 = 51'd4096;
parameter    ap_ST_fsm_state14 = 51'd8192;
parameter    ap_ST_fsm_state15 = 51'd16384;
parameter    ap_ST_fsm_state16 = 51'd32768;
parameter    ap_ST_fsm_state17 = 51'd65536;
parameter    ap_ST_fsm_state18 = 51'd131072;
parameter    ap_ST_fsm_state19 = 51'd262144;
parameter    ap_ST_fsm_state20 = 51'd524288;
parameter    ap_ST_fsm_state21 = 51'd1048576;
parameter    ap_ST_fsm_state22 = 51'd2097152;
parameter    ap_ST_fsm_state23 = 51'd4194304;
parameter    ap_ST_fsm_state24 = 51'd8388608;
parameter    ap_ST_fsm_state25 = 51'd16777216;
parameter    ap_ST_fsm_state26 = 51'd33554432;
parameter    ap_ST_fsm_state27 = 51'd67108864;
parameter    ap_ST_fsm_state28 = 51'd134217728;
parameter    ap_ST_fsm_state29 = 51'd268435456;
parameter    ap_ST_fsm_state30 = 51'd536870912;
parameter    ap_ST_fsm_state31 = 51'd1073741824;
parameter    ap_ST_fsm_state32 = 51'd2147483648;
parameter    ap_ST_fsm_state33 = 51'd4294967296;
parameter    ap_ST_fsm_state34 = 51'd8589934592;
parameter    ap_ST_fsm_state35 = 51'd17179869184;
parameter    ap_ST_fsm_state36 = 51'd34359738368;
parameter    ap_ST_fsm_state37 = 51'd68719476736;
parameter    ap_ST_fsm_state38 = 51'd137438953472;
parameter    ap_ST_fsm_state39 = 51'd274877906944;
parameter    ap_ST_fsm_state40 = 51'd549755813888;
parameter    ap_ST_fsm_state41 = 51'd1099511627776;
parameter    ap_ST_fsm_state42 = 51'd2199023255552;
parameter    ap_ST_fsm_state43 = 51'd4398046511104;
parameter    ap_ST_fsm_state44 = 51'd8796093022208;
parameter    ap_ST_fsm_state45 = 51'd17592186044416;
parameter    ap_ST_fsm_state46 = 51'd35184372088832;
parameter    ap_ST_fsm_state47 = 51'd70368744177664;
parameter    ap_ST_fsm_state48 = 51'd140737488355328;
parameter    ap_ST_fsm_state49 = 51'd281474976710656;
parameter    ap_ST_fsm_state50 = 51'd562949953421312;
parameter    ap_ST_fsm_state51 = 51'd1125899906842624;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] edge_p1_x;
input  [31:0] edge_p1_y;
input  [31:0] edge_p1_z;
input  [31:0] edge_p2_x;
input  [31:0] edge_p2_y;
input  [31:0] edge_p2_z;
input  [31:0] face_x;
input  [31:0] face_y;
input  [31:0] face_z;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_88_p2;
reg   [31:0] reg_191;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state49;
wire   [31:0] grp_fu_94_p2;
reg   [31:0] reg_206;
wire   [31:0] grp_fu_100_p2;
reg   [31:0] reg_222;
wire   [31:0] grp_fu_120_p2;
reg   [31:0] reg_234;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state45;
wire   [31:0] grp_fu_124_p2;
reg   [31:0] reg_241;
wire   [31:0] grp_fu_128_p2;
reg   [31:0] reg_248;
wire   [31:0] grp_fu_132_p2;
reg   [31:0] reg_254;
reg   [31:0] Q_x_reg_1230;
wire    ap_CS_fsm_state4;
reg   [31:0] R_y_reg_1237;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_106_p2;
reg   [31:0] PR_x_reg_1251;
wire   [31:0] grp_fu_110_p2;
reg   [31:0] PR_y_reg_1257;
wire   [31:0] grp_fu_136_p2;
reg   [31:0] tmp_45_i_reg_1263;
wire   [31:0] grp_fu_140_p2;
reg   [31:0] tmp_46_i_reg_1268;
wire    ap_CS_fsm_state16;
reg   [31:0] tmp_31_i_reg_1315;
wire    ap_CS_fsm_state19;
reg   [31:0] tmp_33_i_reg_1321;
wire    ap_CS_fsm_state20;
reg   [31:0] tmp_36_i_reg_1349;
wire    ap_CS_fsm_state23;
wire   [31:0] grp_fu_147_p2;
reg   [31:0] T_reg_1355;
wire    ap_CS_fsm_state42;
wire   [31:0] p_a_fu_342_p3;
reg   [31:0] p_a_reg_1362;
wire   [31:0] p_a_1_fu_354_p3;
reg   [31:0] p_a_1_reg_1368;
wire   [31:0] p_a_2_fu_442_p3;
reg   [31:0] p_a_2_reg_1374;
wire   [31:0] p_a_3_fu_454_p3;
reg   [31:0] p_a_3_reg_1380;
wire   [31:0] p_a_4_fu_542_p3;
reg   [31:0] p_a_4_reg_1386;
wire   [31:0] p_a_5_fu_554_p3;
reg   [31:0] p_a_5_reg_1392;
wire   [0:0] icmp_ln54_4_fu_595_p2;
reg   [0:0] icmp_ln54_4_reg_1398;
wire    ap_CS_fsm_state50;
wire   [0:0] icmp_ln54_5_fu_601_p2;
reg   [0:0] icmp_ln54_5_reg_1403;
wire   [0:0] or_ln54_3_fu_619_p2;
reg   [0:0] or_ln54_3_reg_1408;
wire   [0:0] icmp_ln54_8_fu_642_p2;
reg   [0:0] icmp_ln54_8_reg_1416;
wire   [0:0] icmp_ln54_9_fu_648_p2;
reg   [0:0] icmp_ln54_9_reg_1421;
wire   [0:0] icmp_ln55_4_fu_689_p2;
reg   [0:0] icmp_ln55_4_reg_1426;
wire   [0:0] icmp_ln55_5_fu_695_p2;
reg   [0:0] icmp_ln55_5_reg_1431;
wire   [0:0] or_ln55_3_fu_713_p2;
reg   [0:0] or_ln55_3_reg_1436;
wire   [0:0] icmp_ln56_4_fu_754_p2;
reg   [0:0] icmp_ln56_4_reg_1444;
wire   [0:0] icmp_ln56_5_fu_760_p2;
reg   [0:0] icmp_ln56_5_reg_1449;
wire   [0:0] or_ln56_3_fu_778_p2;
reg   [0:0] or_ln56_3_reg_1454;
wire   [0:0] icmp_ln56_8_fu_801_p2;
reg   [0:0] icmp_ln56_8_reg_1460;
wire   [0:0] icmp_ln56_9_fu_807_p2;
reg   [0:0] icmp_ln56_9_reg_1465;
wire   [0:0] icmp_ln61_fu_830_p2;
reg   [0:0] icmp_ln61_reg_1470;
wire   [0:0] icmp_ln61_1_fu_836_p2;
reg   [0:0] icmp_ln61_1_reg_1475;
wire   [0:0] icmp_ln61_2_fu_859_p2;
reg   [0:0] icmp_ln61_2_reg_1480;
wire   [0:0] icmp_ln61_3_fu_865_p2;
reg   [0:0] icmp_ln61_3_reg_1485;
wire   [0:0] icmp_ln61_4_fu_888_p2;
reg   [0:0] icmp_ln61_4_reg_1490;
wire   [0:0] icmp_ln61_5_fu_894_p2;
reg   [0:0] icmp_ln61_5_reg_1495;
wire   [0:0] icmp_ln61_6_fu_917_p2;
reg   [0:0] icmp_ln61_6_reg_1500;
wire   [0:0] icmp_ln61_7_fu_923_p2;
reg   [0:0] icmp_ln61_7_reg_1505;
wire   [0:0] icmp_ln99_fu_946_p2;
reg   [0:0] icmp_ln99_reg_1510;
wire   [0:0] icmp_ln99_1_fu_952_p2;
reg   [0:0] icmp_ln99_1_reg_1515;
reg   [31:0] grp_fu_88_p0;
reg   [31:0] grp_fu_88_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state46;
reg   [31:0] grp_fu_94_p0;
reg   [31:0] grp_fu_94_p1;
reg   [31:0] grp_fu_100_p0;
reg   [31:0] grp_fu_100_p1;
reg   [31:0] grp_fu_120_p0;
reg   [31:0] grp_fu_120_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state43;
reg   [31:0] grp_fu_124_p0;
reg   [31:0] grp_fu_124_p1;
reg   [31:0] grp_fu_128_p0;
reg   [31:0] grp_fu_128_p1;
reg   [31:0] grp_fu_132_p0;
reg   [31:0] grp_fu_132_p1;
wire    ap_CS_fsm_state31;
reg   [31:0] grp_fu_151_p0;
reg   [31:0] grp_fu_151_p1;
wire    ap_CS_fsm_state48;
reg   [31:0] grp_fu_155_p0;
reg   [31:0] grp_fu_155_p1;
reg   [31:0] grp_fu_159_p0;
reg   [31:0] grp_fu_159_p1;
reg   [31:0] grp_fu_163_p0;
reg   [31:0] grp_fu_163_p1;
reg   [31:0] grp_fu_167_p0;
reg   [31:0] grp_fu_167_p1;
reg   [31:0] grp_fu_171_p0;
reg   [31:0] grp_fu_171_p1;
wire   [31:0] bitcast_ln54_fu_260_p1;
wire   [31:0] bitcast_ln54_1_fu_277_p1;
wire   [7:0] tmp_fu_263_p4;
wire   [22:0] trunc_ln54_fu_273_p1;
wire   [0:0] icmp_ln54_1_fu_300_p2;
wire   [0:0] icmp_ln54_fu_294_p2;
wire   [7:0] tmp_s_fu_280_p4;
wire   [22:0] trunc_ln54_1_fu_290_p1;
wire   [0:0] icmp_ln54_3_fu_318_p2;
wire   [0:0] icmp_ln54_2_fu_312_p2;
wire   [0:0] or_ln54_fu_306_p2;
wire   [0:0] or_ln54_1_fu_324_p2;
wire   [0:0] and_ln54_fu_330_p2;
wire   [0:0] grp_fu_151_p2;
wire   [0:0] and_ln54_1_fu_336_p2;
wire   [0:0] grp_fu_155_p2;
wire   [0:0] and_ln54_4_fu_348_p2;
wire   [31:0] bitcast_ln55_fu_360_p1;
wire   [31:0] bitcast_ln55_1_fu_377_p1;
wire   [7:0] tmp_30_fu_363_p4;
wire   [22:0] trunc_ln55_fu_373_p1;
wire   [0:0] icmp_ln55_1_fu_400_p2;
wire   [0:0] icmp_ln55_fu_394_p2;
wire   [7:0] tmp_31_fu_380_p4;
wire   [22:0] trunc_ln55_1_fu_390_p1;
wire   [0:0] icmp_ln55_3_fu_418_p2;
wire   [0:0] icmp_ln55_2_fu_412_p2;
wire   [0:0] or_ln55_fu_406_p2;
wire   [0:0] or_ln55_1_fu_424_p2;
wire   [0:0] and_ln55_fu_430_p2;
wire   [0:0] grp_fu_159_p2;
wire   [0:0] and_ln55_1_fu_436_p2;
wire   [0:0] grp_fu_163_p2;
wire   [0:0] and_ln55_4_fu_448_p2;
wire   [31:0] bitcast_ln56_fu_460_p1;
wire   [31:0] bitcast_ln56_1_fu_477_p1;
wire   [7:0] tmp_37_fu_463_p4;
wire   [22:0] trunc_ln56_fu_473_p1;
wire   [0:0] icmp_ln56_1_fu_500_p2;
wire   [0:0] icmp_ln56_fu_494_p2;
wire   [7:0] tmp_38_fu_480_p4;
wire   [22:0] trunc_ln56_1_fu_490_p1;
wire   [0:0] icmp_ln56_3_fu_518_p2;
wire   [0:0] icmp_ln56_2_fu_512_p2;
wire   [0:0] or_ln56_fu_506_p2;
wire   [0:0] or_ln56_1_fu_524_p2;
wire   [0:0] and_ln56_fu_530_p2;
wire   [0:0] grp_fu_167_p2;
wire   [0:0] and_ln56_1_fu_536_p2;
wire   [0:0] grp_fu_171_p2;
wire   [0:0] and_ln56_2_fu_548_p2;
wire   [31:0] bitcast_ln54_2_fu_560_p1;
wire   [31:0] bitcast_ln54_3_fu_577_p1;
wire   [7:0] tmp_24_fu_563_p4;
wire   [22:0] trunc_ln54_2_fu_573_p1;
wire   [7:0] tmp_25_fu_581_p4;
wire   [22:0] trunc_ln54_3_fu_591_p1;
wire   [0:0] icmp_ln54_7_fu_613_p2;
wire   [0:0] icmp_ln54_6_fu_607_p2;
wire   [31:0] bitcast_ln54_4_fu_625_p1;
wire   [7:0] tmp_28_fu_628_p4;
wire   [22:0] trunc_ln54_4_fu_638_p1;
wire   [31:0] bitcast_ln55_2_fu_654_p1;
wire   [31:0] bitcast_ln55_3_fu_671_p1;
wire   [7:0] tmp_33_fu_657_p4;
wire   [22:0] trunc_ln55_2_fu_667_p1;
wire   [7:0] tmp_34_fu_675_p4;
wire   [22:0] trunc_ln55_3_fu_685_p1;
wire   [0:0] icmp_ln55_7_fu_707_p2;
wire   [0:0] icmp_ln55_6_fu_701_p2;
wire   [31:0] bitcast_ln56_2_fu_719_p1;
wire   [31:0] bitcast_ln56_3_fu_736_p1;
wire   [7:0] tmp_41_fu_722_p4;
wire   [22:0] trunc_ln56_2_fu_732_p1;
wire   [7:0] tmp_42_fu_740_p4;
wire   [22:0] trunc_ln56_3_fu_750_p1;
wire   [0:0] icmp_ln56_7_fu_772_p2;
wire   [0:0] icmp_ln56_6_fu_766_p2;
wire   [31:0] bitcast_ln56_4_fu_784_p1;
wire   [7:0] tmp_44_fu_787_p4;
wire   [22:0] trunc_ln56_4_fu_797_p1;
wire   [31:0] bitcast_ln61_fu_813_p1;
wire   [7:0] tmp_46_fu_816_p4;
wire   [22:0] trunc_ln61_fu_826_p1;
wire   [31:0] bitcast_ln61_1_fu_842_p1;
wire   [7:0] tmp_48_fu_845_p4;
wire   [22:0] trunc_ln61_1_fu_855_p1;
wire   [31:0] bitcast_ln61_2_fu_871_p1;
wire   [7:0] tmp_50_fu_874_p4;
wire   [22:0] trunc_ln61_2_fu_884_p1;
wire   [31:0] bitcast_ln61_3_fu_900_p1;
wire   [7:0] tmp_52_fu_903_p4;
wire   [22:0] trunc_ln61_3_fu_913_p1;
wire   [31:0] bitcast_ln99_fu_929_p1;
wire   [7:0] tmp_54_fu_932_p4;
wire   [22:0] trunc_ln99_fu_942_p1;
wire    ap_CS_fsm_state51;
wire   [0:0] or_ln54_2_fu_958_p2;
wire   [0:0] and_ln54_2_fu_962_p2;
wire   [0:0] and_ln54_3_fu_967_p2;
wire   [0:0] or_ln54_4_fu_979_p2;
wire   [0:0] and_ln54_5_fu_983_p2;
wire   [0:0] and_ln54_6_fu_988_p2;
wire   [0:0] or_ln55_2_fu_1000_p2;
wire   [0:0] and_ln55_2_fu_1004_p2;
wire   [0:0] and_ln55_3_fu_1009_p2;
wire   [0:0] or_ln56_2_fu_1021_p2;
wire   [0:0] and_ln56_3_fu_1025_p2;
wire   [0:0] xor_ln54_fu_973_p2;
wire   [0:0] xor_ln54_1_fu_994_p2;
wire   [0:0] or_ln54_6_fu_1042_p2;
wire   [0:0] xor_ln55_fu_1015_p2;
wire   [0:0] or_ln56_4_fu_1060_p2;
wire   [0:0] and_ln56_5_fu_1064_p2;
wire   [0:0] or_ln61_fu_1075_p2;
wire   [0:0] and_ln61_fu_1079_p2;
wire   [0:0] or_ln61_1_fu_1090_p2;
wire   [0:0] and_ln61_2_fu_1094_p2;
wire   [0:0] grp_fu_175_p2;
wire   [0:0] or_ln61_2_fu_1105_p2;
wire   [0:0] and_ln61_4_fu_1109_p2;
wire   [0:0] grp_fu_179_p2;
wire   [0:0] or_ln61_3_fu_1120_p2;
wire   [0:0] and_ln61_6_fu_1124_p2;
wire   [0:0] grp_fu_183_p2;
wire   [0:0] and_ln61_1_fu_1084_p2;
wire   [0:0] and_ln61_3_fu_1099_p2;
wire   [0:0] and_ln61_5_fu_1114_p2;
wire   [0:0] and_ln61_7_fu_1129_p2;
wire   [0:0] and_ln61_9_fu_1141_p2;
wire   [0:0] and_ln61_8_fu_1135_p2;
wire   [0:0] and_ln56_4_fu_1030_p2;
wire   [0:0] or_ln54_5_fu_1036_p2;
wire   [0:0] or_ln55_4_fu_1048_p2;
wire   [0:0] and_ln99_2_fu_1159_p2;
wire   [0:0] and_ln99_1_fu_1153_p2;
wire   [0:0] or_ln99_fu_1171_p2;
wire   [0:0] and_ln99_4_fu_1175_p2;
wire   [0:0] grp_fu_187_p2;
wire   [0:0] and_ln56_6_fu_1069_p2;
wire   [0:0] and_ln99_5_fu_1180_p2;
wire   [0:0] or_ln55_5_fu_1054_p2;
wire   [0:0] and_ln99_6_fu_1186_p2;
wire   [0:0] and_ln61_10_fu_1147_p2;
wire   [0:0] or_ln99_1_fu_1192_p2;
wire   [0:0] and_ln99_7_fu_1198_p2;
wire   [0:0] and_ln99_3_fu_1165_p2;
reg   [1:0] grp_fu_88_opcode;
reg   [1:0] grp_fu_94_opcode;
reg   [1:0] grp_fu_100_opcode;
reg   [4:0] grp_fu_151_opcode;
reg   [4:0] grp_fu_155_opcode;
reg   [4:0] grp_fu_159_opcode;
reg   [4:0] grp_fu_163_opcode;
reg   [4:0] grp_fu_167_opcode;
reg   [4:0] grp_fu_171_opcode;
wire   [0:0] and_ln99_fu_1204_p2;
reg   [0:0] ap_return_preg;
reg   [50:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 51'd1;
#0 ap_return_preg = 1'd0;
end

honeybee_faddfsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_faddfsubbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_88_p0),
    .din1(grp_fu_88_p1),
    .opcode(grp_fu_88_opcode),
    .ce(1'b1),
    .dout(grp_fu_88_p2)
);

honeybee_faddfsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_faddfsubbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_94_p0),
    .din1(grp_fu_94_p1),
    .opcode(grp_fu_94_opcode),
    .ce(1'b1),
    .dout(grp_fu_94_p2)
);

honeybee_faddfsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_faddfsubbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_100_p0),
    .din1(grp_fu_100_p1),
    .opcode(grp_fu_100_opcode),
    .ce(1'b1),
    .dout(grp_fu_100_p2)
);

honeybee_fsub_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32ncud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(face_x),
    .din1(face_x),
    .ce(1'b1),
    .dout(grp_fu_106_p2)
);

honeybee_fsub_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fsub_32ncud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(face_y),
    .din1(R_y_reg_1237),
    .ce(1'b1),
    .dout(grp_fu_110_p2)
);

honeybee_fmul_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fmul_32ndEe_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_120_p0),
    .din1(grp_fu_120_p1),
    .ce(1'b1),
    .dout(grp_fu_120_p2)
);

honeybee_fmul_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fmul_32ndEe_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_124_p0),
    .din1(grp_fu_124_p1),
    .ce(1'b1),
    .dout(grp_fu_124_p2)
);

honeybee_fmul_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fmul_32ndEe_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_128_p0),
    .din1(grp_fu_128_p1),
    .ce(1'b1),
    .dout(grp_fu_128_p2)
);

honeybee_fmul_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fmul_32ndEe_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_132_p0),
    .din1(grp_fu_132_p1),
    .ce(1'b1),
    .dout(grp_fu_132_p2)
);

honeybee_fmul_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fmul_32ndEe_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_191),
    .din1(PR_y_reg_1257),
    .ce(1'b1),
    .dout(grp_fu_136_p2)
);

honeybee_fmul_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fmul_32ndEe_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_206),
    .din1(PR_x_reg_1251),
    .ce(1'b1),
    .dout(grp_fu_140_p2)
);

honeybee_fdiv_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32neOg_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_191),
    .din1(reg_206),
    .ce(1'b1),
    .dout(grp_fu_147_p2)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_151_p0),
    .din1(grp_fu_151_p1),
    .ce(1'b1),
    .opcode(grp_fu_151_opcode),
    .dout(grp_fu_151_p2)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_155_p0),
    .din1(grp_fu_155_p1),
    .ce(1'b1),
    .opcode(grp_fu_155_opcode),
    .dout(grp_fu_155_p2)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_159_p0),
    .din1(grp_fu_159_p1),
    .ce(1'b1),
    .opcode(grp_fu_159_opcode),
    .dout(grp_fu_159_p2)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_163_p0),
    .din1(grp_fu_163_p1),
    .ce(1'b1),
    .opcode(grp_fu_163_opcode),
    .dout(grp_fu_163_p2)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_167_p0),
    .din1(grp_fu_167_p1),
    .ce(1'b1),
    .opcode(grp_fu_167_opcode),
    .dout(grp_fu_167_p2)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_171_p0),
    .din1(grp_fu_171_p1),
    .ce(1'b1),
    .opcode(grp_fu_171_opcode),
    .dout(grp_fu_171_p2)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(Q_x_reg_1230),
    .din1(reg_191),
    .ce(1'b1),
    .opcode(5'd3),
    .dout(grp_fu_175_p2)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_206),
    .din1(face_y),
    .ce(1'b1),
    .opcode(5'd3),
    .dout(grp_fu_179_p2)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(R_y_reg_1237),
    .din1(reg_206),
    .ce(1'b1),
    .opcode(5'd3),
    .dout(grp_fu_183_p2)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_a_3_reg_1380),
    .din1(reg_206),
    .ce(1'b1),
    .opcode(5'd3),
    .dout(grp_fu_187_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state51)) begin
            ap_return_preg <= and_ln99_fu_1204_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        PR_x_reg_1251 <= grp_fu_106_p2;
        PR_y_reg_1257 <= grp_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Q_x_reg_1230 <= grp_fu_88_p2;
        R_y_reg_1237 <= grp_fu_94_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        T_reg_1355 <= grp_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        icmp_ln54_4_reg_1398 <= icmp_ln54_4_fu_595_p2;
        icmp_ln54_5_reg_1403 <= icmp_ln54_5_fu_601_p2;
        icmp_ln54_8_reg_1416 <= icmp_ln54_8_fu_642_p2;
        icmp_ln54_9_reg_1421 <= icmp_ln54_9_fu_648_p2;
        icmp_ln55_4_reg_1426 <= icmp_ln55_4_fu_689_p2;
        icmp_ln55_5_reg_1431 <= icmp_ln55_5_fu_695_p2;
        icmp_ln56_4_reg_1444 <= icmp_ln56_4_fu_754_p2;
        icmp_ln56_5_reg_1449 <= icmp_ln56_5_fu_760_p2;
        icmp_ln56_8_reg_1460 <= icmp_ln56_8_fu_801_p2;
        icmp_ln56_9_reg_1465 <= icmp_ln56_9_fu_807_p2;
        icmp_ln61_1_reg_1475 <= icmp_ln61_1_fu_836_p2;
        icmp_ln61_2_reg_1480 <= icmp_ln61_2_fu_859_p2;
        icmp_ln61_3_reg_1485 <= icmp_ln61_3_fu_865_p2;
        icmp_ln61_4_reg_1490 <= icmp_ln61_4_fu_888_p2;
        icmp_ln61_5_reg_1495 <= icmp_ln61_5_fu_894_p2;
        icmp_ln61_6_reg_1500 <= icmp_ln61_6_fu_917_p2;
        icmp_ln61_7_reg_1505 <= icmp_ln61_7_fu_923_p2;
        icmp_ln61_reg_1470 <= icmp_ln61_fu_830_p2;
        icmp_ln99_1_reg_1515 <= icmp_ln99_1_fu_952_p2;
        icmp_ln99_reg_1510 <= icmp_ln99_fu_946_p2;
        or_ln54_3_reg_1408 <= or_ln54_3_fu_619_p2;
        or_ln55_3_reg_1436 <= or_ln55_3_fu_713_p2;
        or_ln56_3_reg_1454 <= or_ln56_3_fu_778_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        p_a_1_reg_1368 <= p_a_1_fu_354_p3;
        p_a_2_reg_1374 <= p_a_2_fu_442_p3;
        p_a_3_reg_1380 <= p_a_3_fu_454_p3;
        p_a_4_reg_1386 <= p_a_4_fu_542_p3;
        p_a_5_reg_1392 <= p_a_5_fu_554_p3;
        p_a_reg_1362 <= p_a_fu_342_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_191 <= grp_fu_88_p2;
        reg_206 <= grp_fu_94_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_222 <= grp_fu_100_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_234 <= grp_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_241 <= grp_fu_124_p2;
        reg_248 <= grp_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_254 <= grp_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_31_i_reg_1315 <= grp_fu_88_p2;
        tmp_33_i_reg_1321 <= grp_fu_94_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_36_i_reg_1349 <= grp_fu_88_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_45_i_reg_1263 <= grp_fu_136_p2;
        tmp_46_i_reg_1268 <= grp_fu_140_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        ap_return = and_ln99_fu_1204_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_100_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_100_opcode = 2'd0;
    end else begin
        grp_fu_100_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_100_p0 = reg_248;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_100_p0 = tmp_45_i_reg_1263;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_100_p0 = face_z;
    end else begin
        grp_fu_100_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_100_p1 = edge_p1_z;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_100_p1 = reg_254;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_100_p1 = tmp_46_i_reg_1268;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_100_p1 = face_z;
    end else begin
        grp_fu_100_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_120_p0 = tmp_31_i_reg_1315;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_120_p0 = tmp_36_i_reg_1349;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_120_p0 = reg_222;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_120_p0 = reg_191;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_120_p0 = reg_206;
    end else begin
        grp_fu_120_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_120_p1 = T_reg_1355;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_120_p1 = face_z;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_120_p1 = face_x;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_120_p1 = reg_222;
    end else begin
        grp_fu_120_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_124_p0 = tmp_33_i_reg_1321;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_124_p0 = reg_206;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_124_p0 = reg_222;
    end else begin
        grp_fu_124_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_124_p1 = T_reg_1355;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_124_p1 = edge_p1_z;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_124_p1 = face_y;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_124_p1 = PR_y_reg_1257;
    end else begin
        grp_fu_124_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_128_p0 = tmp_36_i_reg_1349;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_128_p0 = tmp_31_i_reg_1315;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_128_p0 = reg_191;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_128_p0 = reg_222;
    end else begin
        grp_fu_128_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_128_p1 = T_reg_1355;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_128_p1 = reg_191;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_128_p1 = edge_p1_x;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_128_p1 = PR_x_reg_1251;
    end else begin
        grp_fu_128_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_132_p0 = tmp_33_i_reg_1321;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_132_p0 = reg_206;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_132_p0 = reg_191;
    end else begin
        grp_fu_132_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_132_p1 = reg_206;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_132_p1 = edge_p1_y;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_132_p1 = reg_222;
    end else begin
        grp_fu_132_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_151_opcode = 5'd5;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_151_opcode = 5'd4;
    end else begin
        grp_fu_151_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_151_p0 = p_a_reg_1362;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_151_p0 = edge_p1_x;
    end else begin
        grp_fu_151_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_151_p1 = reg_191;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_151_p1 = edge_p2_x;
    end else begin
        grp_fu_151_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_155_opcode = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_155_opcode = 5'd2;
    end else begin
        grp_fu_155_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_155_p0 = p_a_1_reg_1368;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_155_p0 = edge_p1_x;
    end else begin
        grp_fu_155_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_155_p1 = reg_191;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_155_p1 = edge_p2_x;
    end else begin
        grp_fu_155_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_159_opcode = 5'd5;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_159_opcode = 5'd4;
    end else begin
        grp_fu_159_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_159_p0 = p_a_2_reg_1374;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_159_p0 = edge_p1_y;
    end else begin
        grp_fu_159_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_159_p1 = reg_206;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_159_p1 = edge_p2_y;
    end else begin
        grp_fu_159_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_163_opcode = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_163_opcode = 5'd2;
    end else begin
        grp_fu_163_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_163_p0 = p_a_5_reg_1392;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_163_p0 = edge_p1_y;
    end else begin
        grp_fu_163_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_163_p1 = reg_222;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_163_p1 = edge_p2_y;
    end else begin
        grp_fu_163_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_167_opcode = 5'd5;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_167_opcode = 5'd4;
    end else begin
        grp_fu_167_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_167_p0 = p_a_4_reg_1386;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_167_p0 = edge_p1_z;
    end else begin
        grp_fu_167_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_167_p1 = reg_222;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_167_p1 = edge_p2_z;
    end else begin
        grp_fu_167_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_171_opcode = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_171_opcode = 5'd2;
    end else begin
        grp_fu_171_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_171_p0 = reg_191;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_171_p0 = edge_p1_z;
    end else begin
        grp_fu_171_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_171_p1 = face_x;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_171_p1 = edge_p2_z;
    end else begin
        grp_fu_171_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_88_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_88_opcode = 2'd0;
    end else begin
        grp_fu_88_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_88_p0 = reg_191;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_88_p0 = edge_p2_z;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_88_p0 = edge_p2_x;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_88_p0 = reg_234;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_88_p0 = face_x;
    end else begin
        grp_fu_88_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_88_p1 = reg_206;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_88_p1 = reg_234;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_88_p1 = edge_p1_z;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_88_p1 = edge_p1_x;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_88_p1 = reg_241;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_88_p1 = Q_x_reg_1230;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_88_p1 = 32'd1065353216;
    end else begin
        grp_fu_88_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_94_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_94_opcode = 2'd0;
    end else begin
        grp_fu_94_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_94_p0 = reg_241;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_94_p0 = reg_222;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_94_p0 = reg_206;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_94_p0 = edge_p2_y;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_94_p0 = reg_248;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_94_p0 = face_y;
    end else begin
        grp_fu_94_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_94_p1 = reg_234;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_94_p1 = reg_241;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_94_p1 = edge_p1_y;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_94_p1 = reg_254;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_94_p1 = face_y;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_94_p1 = 32'd1065353216;
    end else begin
        grp_fu_94_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln54_1_fu_336_p2 = (grp_fu_151_p2 & and_ln54_fu_330_p2);

assign and_ln54_2_fu_962_p2 = (or_ln54_3_reg_1408 & or_ln54_2_fu_958_p2);

assign and_ln54_3_fu_967_p2 = (grp_fu_151_p2 & and_ln54_2_fu_962_p2);

assign and_ln54_4_fu_348_p2 = (grp_fu_155_p2 & and_ln54_fu_330_p2);

assign and_ln54_5_fu_983_p2 = (or_ln54_4_fu_979_p2 & or_ln54_3_reg_1408);

assign and_ln54_6_fu_988_p2 = (grp_fu_155_p2 & and_ln54_5_fu_983_p2);

assign and_ln54_fu_330_p2 = (or_ln54_fu_306_p2 & or_ln54_1_fu_324_p2);

assign and_ln55_1_fu_436_p2 = (grp_fu_159_p2 & and_ln55_fu_430_p2);

assign and_ln55_2_fu_1004_p2 = (or_ln55_3_reg_1436 & or_ln55_2_fu_1000_p2);

assign and_ln55_3_fu_1009_p2 = (grp_fu_159_p2 & and_ln55_2_fu_1004_p2);

assign and_ln55_4_fu_448_p2 = (grp_fu_163_p2 & and_ln55_fu_430_p2);

assign and_ln55_fu_430_p2 = (or_ln55_fu_406_p2 & or_ln55_1_fu_424_p2);

assign and_ln56_1_fu_536_p2 = (grp_fu_167_p2 & and_ln56_fu_530_p2);

assign and_ln56_2_fu_548_p2 = (grp_fu_171_p2 & and_ln56_fu_530_p2);

assign and_ln56_3_fu_1025_p2 = (or_ln56_3_reg_1454 & or_ln56_2_fu_1021_p2);

assign and_ln56_4_fu_1030_p2 = (grp_fu_163_p2 & and_ln56_3_fu_1025_p2);

assign and_ln56_5_fu_1064_p2 = (or_ln56_4_fu_1060_p2 & or_ln56_3_reg_1454);

assign and_ln56_6_fu_1069_p2 = (grp_fu_167_p2 & and_ln56_5_fu_1064_p2);

assign and_ln56_fu_530_p2 = (or_ln56_fu_506_p2 & or_ln56_1_fu_524_p2);

assign and_ln61_10_fu_1147_p2 = (and_ln61_9_fu_1141_p2 & and_ln61_8_fu_1135_p2);

assign and_ln61_1_fu_1084_p2 = (grp_fu_171_p2 & and_ln61_fu_1079_p2);

assign and_ln61_2_fu_1094_p2 = (or_ln61_1_fu_1090_p2 & or_ln54_3_reg_1408);

assign and_ln61_3_fu_1099_p2 = (grp_fu_175_p2 & and_ln61_2_fu_1094_p2);

assign and_ln61_4_fu_1109_p2 = (or_ln61_2_fu_1105_p2 & or_ln55_3_reg_1436);

assign and_ln61_5_fu_1114_p2 = (grp_fu_179_p2 & and_ln61_4_fu_1109_p2);

assign and_ln61_6_fu_1124_p2 = (or_ln61_3_fu_1120_p2 & or_ln55_3_reg_1436);

assign and_ln61_7_fu_1129_p2 = (grp_fu_183_p2 & and_ln61_6_fu_1124_p2);

assign and_ln61_8_fu_1135_p2 = (and_ln61_3_fu_1099_p2 & and_ln61_1_fu_1084_p2);

assign and_ln61_9_fu_1141_p2 = (and_ln61_7_fu_1129_p2 & and_ln61_5_fu_1114_p2);

assign and_ln61_fu_1079_p2 = (or_ln61_fu_1075_p2 & or_ln54_3_reg_1408);

assign and_ln99_1_fu_1153_p2 = (and_ln56_4_fu_1030_p2 & and_ln54_3_fu_967_p2);

assign and_ln99_2_fu_1159_p2 = (or_ln55_4_fu_1048_p2 & or_ln54_5_fu_1036_p2);

assign and_ln99_3_fu_1165_p2 = (and_ln99_2_fu_1159_p2 & and_ln99_1_fu_1153_p2);

assign and_ln99_4_fu_1175_p2 = (or_ln99_fu_1171_p2 & or_ln55_3_reg_1436);

assign and_ln99_5_fu_1180_p2 = (grp_fu_187_p2 & and_ln99_4_fu_1175_p2);

assign and_ln99_6_fu_1186_p2 = (and_ln99_5_fu_1180_p2 & and_ln56_6_fu_1069_p2);

assign and_ln99_7_fu_1198_p2 = (or_ln99_1_fu_1192_p2 & and_ln61_10_fu_1147_p2);

assign and_ln99_fu_1204_p2 = (and_ln99_7_fu_1198_p2 & and_ln99_3_fu_1165_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln54_1_fu_277_p1 = edge_p2_x;

assign bitcast_ln54_2_fu_560_p1 = p_a_reg_1362;

assign bitcast_ln54_3_fu_577_p1 = reg_191;

assign bitcast_ln54_4_fu_625_p1 = p_a_1_reg_1368;

assign bitcast_ln54_fu_260_p1 = edge_p1_x;

assign bitcast_ln55_1_fu_377_p1 = edge_p2_y;

assign bitcast_ln55_2_fu_654_p1 = p_a_2_reg_1374;

assign bitcast_ln55_3_fu_671_p1 = reg_206;

assign bitcast_ln55_fu_360_p1 = edge_p1_y;

assign bitcast_ln56_1_fu_477_p1 = edge_p2_z;

assign bitcast_ln56_2_fu_719_p1 = p_a_5_reg_1392;

assign bitcast_ln56_3_fu_736_p1 = reg_222;

assign bitcast_ln56_4_fu_784_p1 = p_a_4_reg_1386;

assign bitcast_ln56_fu_460_p1 = edge_p1_z;

assign bitcast_ln61_1_fu_842_p1 = Q_x_reg_1230;

assign bitcast_ln61_2_fu_871_p1 = face_y;

assign bitcast_ln61_3_fu_900_p1 = R_y_reg_1237;

assign bitcast_ln61_fu_813_p1 = face_x;

assign bitcast_ln99_fu_929_p1 = p_a_3_reg_1380;

assign icmp_ln54_1_fu_300_p2 = ((trunc_ln54_fu_273_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln54_2_fu_312_p2 = ((tmp_s_fu_280_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln54_3_fu_318_p2 = ((trunc_ln54_1_fu_290_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln54_4_fu_595_p2 = ((tmp_24_fu_563_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln54_5_fu_601_p2 = ((trunc_ln54_2_fu_573_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln54_6_fu_607_p2 = ((tmp_25_fu_581_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln54_7_fu_613_p2 = ((trunc_ln54_3_fu_591_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln54_8_fu_642_p2 = ((tmp_28_fu_628_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln54_9_fu_648_p2 = ((trunc_ln54_4_fu_638_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_294_p2 = ((tmp_fu_263_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln55_1_fu_400_p2 = ((trunc_ln55_fu_373_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln55_2_fu_412_p2 = ((tmp_31_fu_380_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln55_3_fu_418_p2 = ((trunc_ln55_1_fu_390_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln55_4_fu_689_p2 = ((tmp_33_fu_657_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln55_5_fu_695_p2 = ((trunc_ln55_2_fu_667_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln55_6_fu_701_p2 = ((tmp_34_fu_675_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln55_7_fu_707_p2 = ((trunc_ln55_3_fu_685_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_394_p2 = ((tmp_30_fu_363_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln56_1_fu_500_p2 = ((trunc_ln56_fu_473_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln56_2_fu_512_p2 = ((tmp_38_fu_480_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln56_3_fu_518_p2 = ((trunc_ln56_1_fu_490_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln56_4_fu_754_p2 = ((tmp_41_fu_722_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln56_5_fu_760_p2 = ((trunc_ln56_2_fu_732_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln56_6_fu_766_p2 = ((tmp_42_fu_740_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln56_7_fu_772_p2 = ((trunc_ln56_3_fu_750_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln56_8_fu_801_p2 = ((tmp_44_fu_787_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln56_9_fu_807_p2 = ((trunc_ln56_4_fu_797_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_494_p2 = ((tmp_37_fu_463_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln61_1_fu_836_p2 = ((trunc_ln61_fu_826_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln61_2_fu_859_p2 = ((tmp_48_fu_845_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln61_3_fu_865_p2 = ((trunc_ln61_1_fu_855_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln61_4_fu_888_p2 = ((tmp_50_fu_874_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln61_5_fu_894_p2 = ((trunc_ln61_2_fu_884_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln61_6_fu_917_p2 = ((tmp_52_fu_903_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln61_7_fu_923_p2 = ((trunc_ln61_3_fu_913_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_830_p2 = ((tmp_46_fu_816_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln99_1_fu_952_p2 = ((trunc_ln99_fu_942_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_946_p2 = ((tmp_54_fu_932_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln54_1_fu_324_p2 = (icmp_ln54_3_fu_318_p2 | icmp_ln54_2_fu_312_p2);

assign or_ln54_2_fu_958_p2 = (icmp_ln54_5_reg_1403 | icmp_ln54_4_reg_1398);

assign or_ln54_3_fu_619_p2 = (icmp_ln54_7_fu_613_p2 | icmp_ln54_6_fu_607_p2);

assign or_ln54_4_fu_979_p2 = (icmp_ln54_9_reg_1421 | icmp_ln54_8_reg_1416);

assign or_ln54_5_fu_1036_p2 = (xor_ln54_fu_973_p2 | and_ln54_6_fu_988_p2);

assign or_ln54_6_fu_1042_p2 = (xor_ln54_fu_973_p2 | xor_ln54_1_fu_994_p2);

assign or_ln54_fu_306_p2 = (icmp_ln54_fu_294_p2 | icmp_ln54_1_fu_300_p2);

assign or_ln55_1_fu_424_p2 = (icmp_ln55_3_fu_418_p2 | icmp_ln55_2_fu_412_p2);

assign or_ln55_2_fu_1000_p2 = (icmp_ln55_5_reg_1431 | icmp_ln55_4_reg_1426);

assign or_ln55_3_fu_713_p2 = (icmp_ln55_7_fu_707_p2 | icmp_ln55_6_fu_701_p2);

assign or_ln55_4_fu_1048_p2 = (or_ln54_6_fu_1042_p2 | and_ln55_3_fu_1009_p2);

assign or_ln55_5_fu_1054_p2 = (xor_ln55_fu_1015_p2 | or_ln54_6_fu_1042_p2);

assign or_ln55_fu_406_p2 = (icmp_ln55_fu_394_p2 | icmp_ln55_1_fu_400_p2);

assign or_ln56_1_fu_524_p2 = (icmp_ln56_3_fu_518_p2 | icmp_ln56_2_fu_512_p2);

assign or_ln56_2_fu_1021_p2 = (icmp_ln56_5_reg_1449 | icmp_ln56_4_reg_1444);

assign or_ln56_3_fu_778_p2 = (icmp_ln56_7_fu_772_p2 | icmp_ln56_6_fu_766_p2);

assign or_ln56_4_fu_1060_p2 = (icmp_ln56_9_reg_1465 | icmp_ln56_8_reg_1460);

assign or_ln56_fu_506_p2 = (icmp_ln56_fu_494_p2 | icmp_ln56_1_fu_500_p2);

assign or_ln61_1_fu_1090_p2 = (icmp_ln61_3_reg_1485 | icmp_ln61_2_reg_1480);

assign or_ln61_2_fu_1105_p2 = (icmp_ln61_5_reg_1495 | icmp_ln61_4_reg_1490);

assign or_ln61_3_fu_1120_p2 = (icmp_ln61_7_reg_1505 | icmp_ln61_6_reg_1500);

assign or_ln61_fu_1075_p2 = (icmp_ln61_reg_1470 | icmp_ln61_1_reg_1475);

assign or_ln99_1_fu_1192_p2 = (or_ln55_5_fu_1054_p2 | and_ln99_6_fu_1186_p2);

assign or_ln99_fu_1171_p2 = (icmp_ln99_reg_1510 | icmp_ln99_1_reg_1515);

assign p_a_1_fu_354_p3 = ((and_ln54_4_fu_348_p2[0:0] === 1'b1) ? edge_p1_x : edge_p2_x);

assign p_a_2_fu_442_p3 = ((and_ln55_1_fu_436_p2[0:0] === 1'b1) ? edge_p1_y : edge_p2_y);

assign p_a_3_fu_454_p3 = ((and_ln55_4_fu_448_p2[0:0] === 1'b1) ? edge_p1_y : edge_p2_y);

assign p_a_4_fu_542_p3 = ((and_ln56_1_fu_536_p2[0:0] === 1'b1) ? edge_p1_z : edge_p2_z);

assign p_a_5_fu_554_p3 = ((and_ln56_2_fu_548_p2[0:0] === 1'b1) ? edge_p1_z : edge_p2_z);

assign p_a_fu_342_p3 = ((and_ln54_1_fu_336_p2[0:0] === 1'b1) ? edge_p1_x : edge_p2_x);

assign tmp_24_fu_563_p4 = {{bitcast_ln54_2_fu_560_p1[30:23]}};

assign tmp_25_fu_581_p4 = {{bitcast_ln54_3_fu_577_p1[30:23]}};

assign tmp_28_fu_628_p4 = {{bitcast_ln54_4_fu_625_p1[30:23]}};

assign tmp_30_fu_363_p4 = {{bitcast_ln55_fu_360_p1[30:23]}};

assign tmp_31_fu_380_p4 = {{bitcast_ln55_1_fu_377_p1[30:23]}};

assign tmp_33_fu_657_p4 = {{bitcast_ln55_2_fu_654_p1[30:23]}};

assign tmp_34_fu_675_p4 = {{bitcast_ln55_3_fu_671_p1[30:23]}};

assign tmp_37_fu_463_p4 = {{bitcast_ln56_fu_460_p1[30:23]}};

assign tmp_38_fu_480_p4 = {{bitcast_ln56_1_fu_477_p1[30:23]}};

assign tmp_41_fu_722_p4 = {{bitcast_ln56_2_fu_719_p1[30:23]}};

assign tmp_42_fu_740_p4 = {{bitcast_ln56_3_fu_736_p1[30:23]}};

assign tmp_44_fu_787_p4 = {{bitcast_ln56_4_fu_784_p1[30:23]}};

assign tmp_46_fu_816_p4 = {{bitcast_ln61_fu_813_p1[30:23]}};

assign tmp_48_fu_845_p4 = {{bitcast_ln61_1_fu_842_p1[30:23]}};

assign tmp_50_fu_874_p4 = {{bitcast_ln61_2_fu_871_p1[30:23]}};

assign tmp_52_fu_903_p4 = {{bitcast_ln61_3_fu_900_p1[30:23]}};

assign tmp_54_fu_932_p4 = {{bitcast_ln99_fu_929_p1[30:23]}};

assign tmp_fu_263_p4 = {{bitcast_ln54_fu_260_p1[30:23]}};

assign tmp_s_fu_280_p4 = {{bitcast_ln54_1_fu_277_p1[30:23]}};

assign trunc_ln54_1_fu_290_p1 = bitcast_ln54_1_fu_277_p1[22:0];

assign trunc_ln54_2_fu_573_p1 = bitcast_ln54_2_fu_560_p1[22:0];

assign trunc_ln54_3_fu_591_p1 = bitcast_ln54_3_fu_577_p1[22:0];

assign trunc_ln54_4_fu_638_p1 = bitcast_ln54_4_fu_625_p1[22:0];

assign trunc_ln54_fu_273_p1 = bitcast_ln54_fu_260_p1[22:0];

assign trunc_ln55_1_fu_390_p1 = bitcast_ln55_1_fu_377_p1[22:0];

assign trunc_ln55_2_fu_667_p1 = bitcast_ln55_2_fu_654_p1[22:0];

assign trunc_ln55_3_fu_685_p1 = bitcast_ln55_3_fu_671_p1[22:0];

assign trunc_ln55_fu_373_p1 = bitcast_ln55_fu_360_p1[22:0];

assign trunc_ln56_1_fu_490_p1 = bitcast_ln56_1_fu_477_p1[22:0];

assign trunc_ln56_2_fu_732_p1 = bitcast_ln56_2_fu_719_p1[22:0];

assign trunc_ln56_3_fu_750_p1 = bitcast_ln56_3_fu_736_p1[22:0];

assign trunc_ln56_4_fu_797_p1 = bitcast_ln56_4_fu_784_p1[22:0];

assign trunc_ln56_fu_473_p1 = bitcast_ln56_fu_460_p1[22:0];

assign trunc_ln61_1_fu_855_p1 = bitcast_ln61_1_fu_842_p1[22:0];

assign trunc_ln61_2_fu_884_p1 = bitcast_ln61_2_fu_871_p1[22:0];

assign trunc_ln61_3_fu_913_p1 = bitcast_ln61_3_fu_900_p1[22:0];

assign trunc_ln61_fu_826_p1 = bitcast_ln61_fu_813_p1[22:0];

assign trunc_ln99_fu_942_p1 = bitcast_ln99_fu_929_p1[22:0];

assign xor_ln54_1_fu_994_p2 = (1'd1 ^ and_ln54_6_fu_988_p2);

assign xor_ln54_fu_973_p2 = (1'd1 ^ and_ln54_3_fu_967_p2);

assign xor_ln55_fu_1015_p2 = (1'd1 ^ and_ln55_3_fu_1009_p2);

endmodule //segmentIntersectsFac
