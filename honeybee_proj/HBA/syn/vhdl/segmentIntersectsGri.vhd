-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity segmentIntersectsGri is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
    grid_x : IN STD_LOGIC_VECTOR (31 downto 0);
    grid_y : IN STD_LOGIC_VECTOR (31 downto 0);
    grid_z : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of segmentIntersectsGri is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_2_reg_959 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_reg_975 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal or_ln11_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_reg_1055 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_1_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_1_reg_1061 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_2_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_2_reg_1067 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_3_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_3_reg_1073 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_4_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_4_reg_1079 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_5_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_5_reg_1085 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_6_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_6_reg_1091 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_7_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_7_reg_1097 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_8_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_8_reg_1103 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_9_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_9_reg_1109 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_10_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_10_reg_1115 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_11_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_11_reg_1121 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_segmentIntersectsFac_fu_88_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal f1_reg_1127 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_segmentIntersectsFac_fu_88_ap_ready : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_88_ap_done : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_107_ap_ready : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_107_ap_done : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_126_ap_ready : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_126_ap_done : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_145_ap_ready : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_145_ap_done : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_164_ap_ready : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_164_ap_done : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_183_ap_ready : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_183_ap_done : STD_LOGIC;
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal grp_segmentIntersectsFac_fu_107_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal f2_reg_1132 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_segmentIntersectsFac_fu_126_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal f3_reg_1137 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_segmentIntersectsFac_fu_145_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal f4_reg_1142 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_segmentIntersectsFac_fu_164_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal f5_reg_1147 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_segmentIntersectsFac_fu_183_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal f6_reg_1152 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_1157 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln141_5_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln141_5_reg_1162 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_segmentIntersectsFac_fu_88_ap_start : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_88_ap_idle : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_107_ap_start : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_107_ap_idle : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_126_ap_start : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_126_ap_idle : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_145_ap_start : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_145_ap_idle : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_164_ap_start : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_164_ap_idle : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_183_ap_start : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_183_ap_idle : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_88_ap_start_reg : STD_LOGIC := '0';
    signal grp_segmentIntersectsFac_fu_107_ap_start_reg : STD_LOGIC := '0';
    signal grp_segmentIntersectsFac_fu_126_ap_start_reg : STD_LOGIC := '0';
    signal grp_segmentIntersectsFac_fu_145_ap_start_reg : STD_LOGIC := '0';
    signal grp_segmentIntersectsFac_fu_164_ap_start_reg : STD_LOGIC := '0';
    signal grp_segmentIntersectsFac_fu_183_ap_start_reg : STD_LOGIC := '0';
    signal bitcast_ln11_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln11_1_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_283_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_fu_293_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_1_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_301_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_1_fu_311_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_3_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_2_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_2_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_354_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_2_fu_364_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_5_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_4_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_3_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln11_4_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_389_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_3_fu_399_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_7_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_6_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_407_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_4_fu_417_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_9_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_8_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_5_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_460_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_5_fu_470_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_11_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_10_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_6_fu_492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln11_7_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_495_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_6_fu_505_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_13_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_12_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_513_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_7_fu_523_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_15_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_14_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_8_fu_563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_566_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_8_fu_576_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_17_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_16_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_9_fu_598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_602_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_9_fu_612_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_19_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_18_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_10_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_638_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_10_fu_648_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_21_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_20_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_11_fu_670_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_674_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_11_fu_684_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_23_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_22_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_2_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_4_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_6_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_8_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_1_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_3_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_7_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_9_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln141_2_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_5_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln141_3_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln141_1_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_10_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_11_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln141_4_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_12_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_14_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_16_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_18_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_20_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_13_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_15_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_19_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_21_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_23_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_17_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_24_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_22_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln141_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_25_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal and_ln11_26_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_27_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_1_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bothEndPointsInGrid_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_4_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_3_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_5_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_2_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_220_ce : STD_LOGIC;
    signal grp_fu_225_ce : STD_LOGIC;
    signal grp_fu_230_ce : STD_LOGIC;
    signal grp_fu_235_ce : STD_LOGIC;
    signal grp_fu_240_ce : STD_LOGIC;
    signal grp_fu_245_ce : STD_LOGIC;
    signal grp_fu_250_ce : STD_LOGIC;
    signal grp_fu_255_ce : STD_LOGIC;
    signal grp_fu_260_ce : STD_LOGIC;
    signal grp_fu_265_ce : STD_LOGIC;
    signal grp_fu_270_ce : STD_LOGIC;
    signal grp_fu_275_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component segmentIntersectsFac IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
        face_x : IN STD_LOGIC_VECTOR (31 downto 0);
        face_y : IN STD_LOGIC_VECTOR (31 downto 0);
        face_z : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component honeybee_fadd_32ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fcmp_32nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_segmentIntersectsFac_fu_88 : component segmentIntersectsFac
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_segmentIntersectsFac_fu_88_ap_start,
        ap_done => grp_segmentIntersectsFac_fu_88_ap_done,
        ap_idle => grp_segmentIntersectsFac_fu_88_ap_idle,
        ap_ready => grp_segmentIntersectsFac_fu_88_ap_ready,
        edge_p1_x => edge_p1_x,
        edge_p1_y => edge_p1_y,
        edge_p1_z => edge_p1_z,
        edge_p2_x => edge_p2_x,
        edge_p2_y => edge_p2_y,
        edge_p2_z => edge_p2_z,
        face_x => grid_x,
        face_y => grid_y,
        face_z => grid_z,
        ap_return => grp_segmentIntersectsFac_fu_88_ap_return);

    grp_segmentIntersectsFac_fu_107 : component segmentIntersectsFac
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_segmentIntersectsFac_fu_107_ap_start,
        ap_done => grp_segmentIntersectsFac_fu_107_ap_done,
        ap_idle => grp_segmentIntersectsFac_fu_107_ap_idle,
        ap_ready => grp_segmentIntersectsFac_fu_107_ap_ready,
        edge_p1_x => edge_p1_x,
        edge_p1_y => edge_p1_y,
        edge_p1_z => edge_p1_z,
        edge_p2_x => edge_p2_x,
        edge_p2_y => edge_p2_y,
        edge_p2_z => edge_p2_z,
        face_x => grid_x,
        face_y => grid_y,
        face_z => p_2_reg_959,
        ap_return => grp_segmentIntersectsFac_fu_107_ap_return);

    grp_segmentIntersectsFac_fu_126 : component segmentIntersectsFac
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_segmentIntersectsFac_fu_126_ap_start,
        ap_done => grp_segmentIntersectsFac_fu_126_ap_done,
        ap_idle => grp_segmentIntersectsFac_fu_126_ap_idle,
        ap_ready => grp_segmentIntersectsFac_fu_126_ap_ready,
        edge_p1_x => edge_p1_x,
        edge_p1_y => edge_p1_z,
        edge_p1_z => edge_p1_y,
        edge_p2_x => edge_p2_x,
        edge_p2_y => edge_p2_z,
        edge_p2_z => edge_p2_y,
        face_x => grid_x,
        face_y => grid_z,
        face_z => grid_y,
        ap_return => grp_segmentIntersectsFac_fu_126_ap_return);

    grp_segmentIntersectsFac_fu_145 : component segmentIntersectsFac
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_segmentIntersectsFac_fu_145_ap_start,
        ap_done => grp_segmentIntersectsFac_fu_145_ap_done,
        ap_idle => grp_segmentIntersectsFac_fu_145_ap_idle,
        ap_ready => grp_segmentIntersectsFac_fu_145_ap_ready,
        edge_p1_x => edge_p1_x,
        edge_p1_y => edge_p1_z,
        edge_p1_z => edge_p1_y,
        edge_p2_x => edge_p2_x,
        edge_p2_y => edge_p2_z,
        edge_p2_z => edge_p2_y,
        face_x => grid_x,
        face_y => grid_z,
        face_z => p_s_reg_967,
        ap_return => grp_segmentIntersectsFac_fu_145_ap_return);

    grp_segmentIntersectsFac_fu_164 : component segmentIntersectsFac
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_segmentIntersectsFac_fu_164_ap_start,
        ap_done => grp_segmentIntersectsFac_fu_164_ap_done,
        ap_idle => grp_segmentIntersectsFac_fu_164_ap_idle,
        ap_ready => grp_segmentIntersectsFac_fu_164_ap_ready,
        edge_p1_x => edge_p1_z,
        edge_p1_y => edge_p1_y,
        edge_p1_z => edge_p1_x,
        edge_p2_x => edge_p2_z,
        edge_p2_y => edge_p2_y,
        edge_p2_z => edge_p2_x,
        face_x => grid_z,
        face_y => grid_y,
        face_z => grid_x,
        ap_return => grp_segmentIntersectsFac_fu_164_ap_return);

    grp_segmentIntersectsFac_fu_183 : component segmentIntersectsFac
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_segmentIntersectsFac_fu_183_ap_start,
        ap_done => grp_segmentIntersectsFac_fu_183_ap_done,
        ap_idle => grp_segmentIntersectsFac_fu_183_ap_idle,
        ap_ready => grp_segmentIntersectsFac_fu_183_ap_ready,
        edge_p1_x => edge_p1_z,
        edge_p1_y => edge_p1_y,
        edge_p1_z => edge_p1_x,
        edge_p2_x => edge_p2_z,
        edge_p2_y => edge_p2_y,
        edge_p2_z => edge_p2_x,
        face_x => grid_z,
        face_y => grid_y,
        face_z => p_1_reg_975,
        ap_return => grp_segmentIntersectsFac_fu_183_ap_return);

    honeybee_fadd_32ng8j_U37 : component honeybee_fadd_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grid_z,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_202_p2);

    honeybee_fadd_32ng8j_U38 : component honeybee_fadd_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grid_y,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_208_p2);

    honeybee_fadd_32ng8j_U39 : component honeybee_fadd_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grid_x,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_214_p2);

    honeybee_fcmp_32nfYi_U40 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grid_x,
        din1 => edge_p1_x,
        ce => grp_fu_220_ce,
        opcode => ap_const_lv5_5,
        dout => grp_fu_220_p2);

    honeybee_fcmp_32nfYi_U41 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_1_reg_975,
        din1 => edge_p1_x,
        ce => grp_fu_225_ce,
        opcode => ap_const_lv5_3,
        dout => grp_fu_225_p2);

    honeybee_fcmp_32nfYi_U42 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grid_y,
        din1 => edge_p1_y,
        ce => grp_fu_230_ce,
        opcode => ap_const_lv5_5,
        dout => grp_fu_230_p2);

    honeybee_fcmp_32nfYi_U43 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_s_reg_967,
        din1 => edge_p1_y,
        ce => grp_fu_235_ce,
        opcode => ap_const_lv5_3,
        dout => grp_fu_235_p2);

    honeybee_fcmp_32nfYi_U44 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grid_z,
        din1 => edge_p1_z,
        ce => grp_fu_240_ce,
        opcode => ap_const_lv5_5,
        dout => grp_fu_240_p2);

    honeybee_fcmp_32nfYi_U45 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_2_reg_959,
        din1 => edge_p1_z,
        ce => grp_fu_245_ce,
        opcode => ap_const_lv5_3,
        dout => grp_fu_245_p2);

    honeybee_fcmp_32nfYi_U46 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grid_x,
        din1 => edge_p2_x,
        ce => grp_fu_250_ce,
        opcode => ap_const_lv5_5,
        dout => grp_fu_250_p2);

    honeybee_fcmp_32nfYi_U47 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_1_reg_975,
        din1 => edge_p2_x,
        ce => grp_fu_255_ce,
        opcode => ap_const_lv5_3,
        dout => grp_fu_255_p2);

    honeybee_fcmp_32nfYi_U48 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grid_y,
        din1 => edge_p2_y,
        ce => grp_fu_260_ce,
        opcode => ap_const_lv5_5,
        dout => grp_fu_260_p2);

    honeybee_fcmp_32nfYi_U49 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_s_reg_967,
        din1 => edge_p2_y,
        ce => grp_fu_265_ce,
        opcode => ap_const_lv5_3,
        dout => grp_fu_265_p2);

    honeybee_fcmp_32nfYi_U50 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grid_z,
        din1 => edge_p2_z,
        ce => grp_fu_270_ce,
        opcode => ap_const_lv5_5,
        dout => grp_fu_270_p2);

    honeybee_fcmp_32nfYi_U51 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_2_reg_959,
        din1 => edge_p2_z,
        ce => grp_fu_275_ce,
        opcode => ap_const_lv5_3,
        dout => grp_fu_275_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_segmentIntersectsFac_fu_107_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_segmentIntersectsFac_fu_107_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_segmentIntersectsFac_fu_107_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_segmentIntersectsFac_fu_107_ap_ready = ap_const_logic_1)) then 
                    grp_segmentIntersectsFac_fu_107_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_segmentIntersectsFac_fu_126_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_segmentIntersectsFac_fu_126_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_segmentIntersectsFac_fu_126_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_segmentIntersectsFac_fu_126_ap_ready = ap_const_logic_1)) then 
                    grp_segmentIntersectsFac_fu_126_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_segmentIntersectsFac_fu_145_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_segmentIntersectsFac_fu_145_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_segmentIntersectsFac_fu_145_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_segmentIntersectsFac_fu_145_ap_ready = ap_const_logic_1)) then 
                    grp_segmentIntersectsFac_fu_145_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_segmentIntersectsFac_fu_164_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_segmentIntersectsFac_fu_164_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_segmentIntersectsFac_fu_164_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_segmentIntersectsFac_fu_164_ap_ready = ap_const_logic_1)) then 
                    grp_segmentIntersectsFac_fu_164_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_segmentIntersectsFac_fu_183_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_segmentIntersectsFac_fu_183_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_segmentIntersectsFac_fu_183_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_segmentIntersectsFac_fu_183_ap_ready = ap_const_logic_1)) then 
                    grp_segmentIntersectsFac_fu_183_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_segmentIntersectsFac_fu_88_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_segmentIntersectsFac_fu_88_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_segmentIntersectsFac_fu_88_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_segmentIntersectsFac_fu_88_ap_ready = ap_const_logic_1)) then 
                    grp_segmentIntersectsFac_fu_88_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
                and_ln141_5_reg_1162 <= and_ln141_5_fu_870_p2;
                f1_reg_1127 <= grp_segmentIntersectsFac_fu_88_ap_return;
                f2_reg_1132 <= grp_segmentIntersectsFac_fu_107_ap_return;
                f3_reg_1137 <= grp_segmentIntersectsFac_fu_126_ap_return;
                f4_reg_1142 <= grp_segmentIntersectsFac_fu_145_ap_return;
                f5_reg_1147 <= grp_segmentIntersectsFac_fu_164_ap_return;
                f6_reg_1152 <= grp_segmentIntersectsFac_fu_183_ap_return;
                tmp_22_reg_1157 <= grp_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                or_ln11_10_reg_1115 <= or_ln11_10_fu_664_p2;
                or_ln11_11_reg_1121 <= or_ln11_11_fu_700_p2;
                or_ln11_1_reg_1061 <= or_ln11_1_fu_345_p2;
                or_ln11_2_reg_1067 <= or_ln11_2_fu_380_p2;
                or_ln11_3_reg_1073 <= or_ln11_3_fu_433_p2;
                or_ln11_4_reg_1079 <= or_ln11_4_fu_451_p2;
                or_ln11_5_reg_1085 <= or_ln11_5_fu_486_p2;
                or_ln11_6_reg_1091 <= or_ln11_6_fu_539_p2;
                or_ln11_7_reg_1097 <= or_ln11_7_fu_557_p2;
                or_ln11_8_reg_1103 <= or_ln11_8_fu_592_p2;
                or_ln11_9_reg_1109 <= or_ln11_9_fu_628_p2;
                or_ln11_reg_1055 <= or_ln11_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_1_reg_975 <= grp_fu_214_p2;
                p_2_reg_959 <= grp_fu_202_p2;
                p_s_reg_967 <= grp_fu_208_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    and_ln11_10_fu_780_p2 <= (or_ln11_8_reg_1103 and or_ln11_7_reg_1097);
    and_ln11_11_fu_784_p2 <= (grp_fu_245_p2 and and_ln11_10_fu_780_p2);
    and_ln11_12_fu_796_p2 <= (or_ln11_reg_1055 and or_ln11_9_reg_1109);
    and_ln11_13_fu_800_p2 <= (grp_fu_250_p2 and and_ln11_12_fu_796_p2);
    and_ln11_14_fu_806_p2 <= (or_ln11_9_reg_1109 and or_ln11_2_reg_1067);
    and_ln11_15_fu_810_p2 <= (grp_fu_255_p2 and and_ln11_14_fu_806_p2);
    and_ln11_16_fu_816_p2 <= (or_ln11_3_reg_1073 and or_ln11_10_reg_1115);
    and_ln11_17_fu_820_p2 <= (grp_fu_260_p2 and and_ln11_16_fu_816_p2);
    and_ln11_18_fu_826_p2 <= (or_ln11_5_reg_1085 and or_ln11_10_reg_1115);
    and_ln11_19_fu_830_p2 <= (grp_fu_265_p2 and and_ln11_18_fu_826_p2);
    and_ln11_1_fu_710_p2 <= (grp_fu_220_p2 and and_ln11_fu_706_p2);
    and_ln11_20_fu_836_p2 <= (or_ln11_6_reg_1091 and or_ln11_11_reg_1121);
    and_ln11_21_fu_840_p2 <= (grp_fu_270_p2 and and_ln11_20_fu_836_p2);
    and_ln11_22_fu_846_p2 <= (and_ln11_15_fu_810_p2 and and_ln11_13_fu_800_p2);
    and_ln11_23_fu_852_p2 <= (and_ln11_21_fu_840_p2 and and_ln11_19_fu_830_p2);
    and_ln11_24_fu_858_p2 <= (and_ln11_23_fu_852_p2 and and_ln11_17_fu_820_p2);
    and_ln11_25_fu_864_p2 <= (and_ln11_24_fu_858_p2 and and_ln11_22_fu_846_p2);
    and_ln11_26_fu_876_p2 <= (or_ln11_8_reg_1103 and or_ln11_11_reg_1121);
    and_ln11_27_fu_880_p2 <= (tmp_22_reg_1157 and and_ln11_26_fu_876_p2);
    and_ln11_2_fu_716_p2 <= (or_ln11_2_reg_1067 and or_ln11_1_reg_1061);
    and_ln11_3_fu_720_p2 <= (grp_fu_225_p2 and and_ln11_2_fu_716_p2);
    and_ln11_4_fu_726_p2 <= (or_ln11_4_reg_1079 and or_ln11_3_reg_1073);
    and_ln11_5_fu_730_p2 <= (grp_fu_230_p2 and and_ln11_4_fu_726_p2);
    and_ln11_6_fu_736_p2 <= (or_ln11_5_reg_1085 and or_ln11_4_reg_1079);
    and_ln11_7_fu_740_p2 <= (grp_fu_235_p2 and and_ln11_6_fu_736_p2);
    and_ln11_8_fu_746_p2 <= (or_ln11_7_reg_1097 and or_ln11_6_reg_1091);
    and_ln11_9_fu_750_p2 <= (grp_fu_240_p2 and and_ln11_8_fu_746_p2);
    and_ln11_fu_706_p2 <= (or_ln11_reg_1055 and or_ln11_1_reg_1061);
    and_ln141_1_fu_756_p2 <= (and_ln11_3_fu_720_p2 and and_ln11_1_fu_710_p2);
    and_ln141_2_fu_762_p2 <= (and_ln11_9_fu_750_p2 and and_ln11_7_fu_740_p2);
    and_ln141_3_fu_768_p2 <= (and_ln141_2_fu_762_p2 and and_ln11_5_fu_730_p2);
    and_ln141_4_fu_774_p2 <= (and_ln141_3_fu_768_p2 and and_ln141_1_fu_756_p2);
    and_ln141_5_fu_870_p2 <= (and_ln141_fu_790_p2 and and_ln11_25_fu_864_p2);
    and_ln141_fu_790_p2 <= (and_ln141_4_fu_774_p2 and and_ln11_11_fu_784_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state6_on_subcall_done_assign_proc : process(grp_segmentIntersectsFac_fu_88_ap_done, grp_segmentIntersectsFac_fu_107_ap_done, grp_segmentIntersectsFac_fu_126_ap_done, grp_segmentIntersectsFac_fu_145_ap_done, grp_segmentIntersectsFac_fu_164_ap_done, grp_segmentIntersectsFac_fu_183_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((grp_segmentIntersectsFac_fu_183_ap_done = ap_const_logic_0) or (grp_segmentIntersectsFac_fu_164_ap_done = ap_const_logic_0) or (grp_segmentIntersectsFac_fu_145_ap_done = ap_const_logic_0) or (grp_segmentIntersectsFac_fu_126_ap_done = ap_const_logic_0) or (grp_segmentIntersectsFac_fu_107_ap_done = ap_const_logic_0) or (grp_segmentIntersectsFac_fu_88_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (or_ln143_5_fu_908_p2 or or_ln143_2_fu_894_p2);
    bitcast_ln11_10_fu_634_p1 <= edge_p2_y;
    bitcast_ln11_11_fu_670_p1 <= edge_p2_z;
    bitcast_ln11_1_fu_297_p1 <= edge_p1_x;
    bitcast_ln11_2_fu_351_p1 <= p_1_reg_975;
    bitcast_ln11_3_fu_386_p1 <= grid_y;
    bitcast_ln11_4_fu_403_p1 <= edge_p1_y;
    bitcast_ln11_5_fu_457_p1 <= p_s_reg_967;
    bitcast_ln11_6_fu_492_p1 <= grid_z;
    bitcast_ln11_7_fu_509_p1 <= edge_p1_z;
    bitcast_ln11_8_fu_563_p1 <= p_2_reg_959;
    bitcast_ln11_9_fu_598_p1 <= edge_p2_x;
    bitcast_ln11_fu_280_p1 <= grid_x;
    bothEndPointsInGrid_fu_885_p2 <= (and_ln141_5_reg_1162 and and_ln11_27_fu_880_p2);

    grp_fu_220_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done)))) then 
            grp_fu_220_ce <= ap_const_logic_1;
        else 
            grp_fu_220_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_225_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done)))) then 
            grp_fu_225_ce <= ap_const_logic_1;
        else 
            grp_fu_225_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_230_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done)))) then 
            grp_fu_230_ce <= ap_const_logic_1;
        else 
            grp_fu_230_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_235_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done)))) then 
            grp_fu_235_ce <= ap_const_logic_1;
        else 
            grp_fu_235_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_240_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done)))) then 
            grp_fu_240_ce <= ap_const_logic_1;
        else 
            grp_fu_240_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_245_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done)))) then 
            grp_fu_245_ce <= ap_const_logic_1;
        else 
            grp_fu_245_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_250_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done)))) then 
            grp_fu_250_ce <= ap_const_logic_1;
        else 
            grp_fu_250_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_255_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done)))) then 
            grp_fu_255_ce <= ap_const_logic_1;
        else 
            grp_fu_255_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_260_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done)))) then 
            grp_fu_260_ce <= ap_const_logic_1;
        else 
            grp_fu_260_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_265_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done)))) then 
            grp_fu_265_ce <= ap_const_logic_1;
        else 
            grp_fu_265_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_270_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done)))) then 
            grp_fu_270_ce <= ap_const_logic_1;
        else 
            grp_fu_270_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_275_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done)))) then 
            grp_fu_275_ce <= ap_const_logic_1;
        else 
            grp_fu_275_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_segmentIntersectsFac_fu_107_ap_start <= grp_segmentIntersectsFac_fu_107_ap_start_reg;
    grp_segmentIntersectsFac_fu_126_ap_start <= grp_segmentIntersectsFac_fu_126_ap_start_reg;
    grp_segmentIntersectsFac_fu_145_ap_start <= grp_segmentIntersectsFac_fu_145_ap_start_reg;
    grp_segmentIntersectsFac_fu_164_ap_start <= grp_segmentIntersectsFac_fu_164_ap_start_reg;
    grp_segmentIntersectsFac_fu_183_ap_start <= grp_segmentIntersectsFac_fu_183_ap_start_reg;
    grp_segmentIntersectsFac_fu_88_ap_start <= grp_segmentIntersectsFac_fu_88_ap_start_reg;
    icmp_ln11_10_fu_474_p2 <= "0" when (tmp_9_fu_460_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_11_fu_480_p2 <= "1" when (trunc_ln11_5_fu_470_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_12_fu_527_p2 <= "0" when (tmp_4_fu_495_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_13_fu_533_p2 <= "1" when (trunc_ln11_6_fu_505_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_14_fu_545_p2 <= "0" when (tmp_10_fu_513_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_15_fu_551_p2 <= "1" when (trunc_ln11_7_fu_523_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_16_fu_580_p2 <= "0" when (tmp_12_fu_566_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_17_fu_586_p2 <= "1" when (trunc_ln11_8_fu_576_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_18_fu_616_p2 <= "0" when (tmp_14_fu_602_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_19_fu_622_p2 <= "1" when (trunc_ln11_9_fu_612_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_1_fu_321_p2 <= "1" when (trunc_ln11_fu_293_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_20_fu_652_p2 <= "0" when (tmp_17_fu_638_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_21_fu_658_p2 <= "1" when (trunc_ln11_10_fu_648_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_22_fu_688_p2 <= "0" when (tmp_20_fu_674_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_23_fu_694_p2 <= "1" when (trunc_ln11_11_fu_684_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_2_fu_333_p2 <= "0" when (tmp_1_fu_301_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_3_fu_339_p2 <= "1" when (trunc_ln11_1_fu_311_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_4_fu_368_p2 <= "0" when (tmp_3_fu_354_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_5_fu_374_p2 <= "1" when (trunc_ln11_2_fu_364_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_6_fu_421_p2 <= "0" when (tmp_6_fu_389_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_7_fu_427_p2 <= "1" when (trunc_ln11_3_fu_399_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_8_fu_439_p2 <= "0" when (tmp_7_fu_407_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_9_fu_445_p2 <= "1" when (trunc_ln11_4_fu_417_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_fu_315_p2 <= "0" when (tmp_fu_283_p4 = ap_const_lv8_FF) else "1";
    or_ln11_10_fu_664_p2 <= (icmp_ln11_21_fu_658_p2 or icmp_ln11_20_fu_652_p2);
    or_ln11_11_fu_700_p2 <= (icmp_ln11_23_fu_694_p2 or icmp_ln11_22_fu_688_p2);
    or_ln11_1_fu_345_p2 <= (icmp_ln11_3_fu_339_p2 or icmp_ln11_2_fu_333_p2);
    or_ln11_2_fu_380_p2 <= (icmp_ln11_5_fu_374_p2 or icmp_ln11_4_fu_368_p2);
    or_ln11_3_fu_433_p2 <= (icmp_ln11_7_fu_427_p2 or icmp_ln11_6_fu_421_p2);
    or_ln11_4_fu_451_p2 <= (icmp_ln11_9_fu_445_p2 or icmp_ln11_8_fu_439_p2);
    or_ln11_5_fu_486_p2 <= (icmp_ln11_11_fu_480_p2 or icmp_ln11_10_fu_474_p2);
    or_ln11_6_fu_539_p2 <= (icmp_ln11_13_fu_533_p2 or icmp_ln11_12_fu_527_p2);
    or_ln11_7_fu_557_p2 <= (icmp_ln11_15_fu_551_p2 or icmp_ln11_14_fu_545_p2);
    or_ln11_8_fu_592_p2 <= (icmp_ln11_17_fu_586_p2 or icmp_ln11_16_fu_580_p2);
    or_ln11_9_fu_628_p2 <= (icmp_ln11_19_fu_622_p2 or icmp_ln11_18_fu_616_p2);
    or_ln11_fu_327_p2 <= (icmp_ln11_fu_315_p2 or icmp_ln11_1_fu_321_p2);
    or_ln143_1_fu_890_p2 <= (f3_reg_1137 or f2_reg_1132);
    or_ln143_2_fu_894_p2 <= (or_ln143_1_fu_890_p2 or f1_reg_1127);
    or_ln143_3_fu_899_p2 <= (f6_reg_1152 or f4_reg_1142);
    or_ln143_4_fu_903_p2 <= (f5_reg_1147 or bothEndPointsInGrid_fu_885_p2);
    or_ln143_5_fu_908_p2 <= (or_ln143_4_fu_903_p2 or or_ln143_3_fu_899_p2);
    tmp_10_fu_513_p4 <= bitcast_ln11_7_fu_509_p1(30 downto 23);
    tmp_12_fu_566_p4 <= bitcast_ln11_8_fu_563_p1(30 downto 23);
    tmp_14_fu_602_p4 <= bitcast_ln11_9_fu_598_p1(30 downto 23);
    tmp_17_fu_638_p4 <= bitcast_ln11_10_fu_634_p1(30 downto 23);
    tmp_1_fu_301_p4 <= bitcast_ln11_1_fu_297_p1(30 downto 23);
    tmp_20_fu_674_p4 <= bitcast_ln11_11_fu_670_p1(30 downto 23);
    tmp_3_fu_354_p4 <= bitcast_ln11_2_fu_351_p1(30 downto 23);
    tmp_4_fu_495_p4 <= bitcast_ln11_6_fu_492_p1(30 downto 23);
    tmp_6_fu_389_p4 <= bitcast_ln11_3_fu_386_p1(30 downto 23);
    tmp_7_fu_407_p4 <= bitcast_ln11_4_fu_403_p1(30 downto 23);
    tmp_9_fu_460_p4 <= bitcast_ln11_5_fu_457_p1(30 downto 23);
    tmp_fu_283_p4 <= bitcast_ln11_fu_280_p1(30 downto 23);
    trunc_ln11_10_fu_648_p1 <= bitcast_ln11_10_fu_634_p1(23 - 1 downto 0);
    trunc_ln11_11_fu_684_p1 <= bitcast_ln11_11_fu_670_p1(23 - 1 downto 0);
    trunc_ln11_1_fu_311_p1 <= bitcast_ln11_1_fu_297_p1(23 - 1 downto 0);
    trunc_ln11_2_fu_364_p1 <= bitcast_ln11_2_fu_351_p1(23 - 1 downto 0);
    trunc_ln11_3_fu_399_p1 <= bitcast_ln11_3_fu_386_p1(23 - 1 downto 0);
    trunc_ln11_4_fu_417_p1 <= bitcast_ln11_4_fu_403_p1(23 - 1 downto 0);
    trunc_ln11_5_fu_470_p1 <= bitcast_ln11_5_fu_457_p1(23 - 1 downto 0);
    trunc_ln11_6_fu_505_p1 <= bitcast_ln11_6_fu_492_p1(23 - 1 downto 0);
    trunc_ln11_7_fu_523_p1 <= bitcast_ln11_7_fu_509_p1(23 - 1 downto 0);
    trunc_ln11_8_fu_576_p1 <= bitcast_ln11_8_fu_563_p1(23 - 1 downto 0);
    trunc_ln11_9_fu_612_p1 <= bitcast_ln11_9_fu_598_p1(23 - 1 downto 0);
    trunc_ln11_fu_293_p1 <= bitcast_ln11_fu_280_p1(23 - 1 downto 0);
end behav;
