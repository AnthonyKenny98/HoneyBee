-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity honeybee is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of honeybee is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "honeybee,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z030i-fbg484-2L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.321400,HLS_SYN_LAT=7325,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=142,HLS_SYN_FF=21049,HLS_SYN_LUT=42197,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bitcast_ln11_1_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln11_1_reg_1068 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_3_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_3_reg_1073 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_3_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln11_3_reg_1078 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_6_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_6_reg_1083 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_5_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln11_5_reg_1088 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_7_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_7_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_7_fu_311_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln11_7_reg_1098 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_11_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_11_reg_1103 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_9_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln11_9_reg_1108 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_14_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_14_reg_1113 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_11_fu_339_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln11_11_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_15_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_15_reg_1123 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln155_fu_358_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_fu_369_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_1136 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grid_z_reg_1141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_2_i_reg_1154 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal b_fu_375_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal b_reg_1162 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal bitcast_ln11_8_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln11_8_reg_1167 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_17_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_17_reg_1172 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1177 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_10_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln11_10_reg_1182 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_19_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_19_reg_1187 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_1192 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_reg_1197 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_1202 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln156_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_fu_418_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_1215 : STD_LOGIC_VECTOR (2 downto 0);
    signal grid_y_reg_1220 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_i_reg_1232 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln164_fu_424_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln164_reg_1240 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal bitcast_ln11_4_fu_430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln11_4_reg_1245 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_9_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_9_reg_1250 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_1255 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_6_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln11_6_reg_1260 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_13_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_13_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_reg_1270 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_1275 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_reg_1280 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln157_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_fu_467_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1293 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln11_1_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_1_reg_1298 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_3_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_3_reg_1304 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_4_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_4_reg_1310 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_7_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_7_reg_1315 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln141_1_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln141_1_reg_1320 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_8_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_8_reg_1325 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_9_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_9_reg_1331 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_10_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_10_reg_1337 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_11_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_11_reg_1342 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_23_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_23_reg_1347 : STD_LOGIC_VECTOR (0 downto 0);
    signal grid_x_reg_1352 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal or_ln11_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_reg_1365 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_segmentIntersectsFac_fu_177_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal f1_reg_1371 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_segmentIntersectsFac_fu_177_ap_ready : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_177_ap_done : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_190_ap_ready : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_190_ap_done : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_203_ap_ready : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_203_ap_done : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_216_ap_ready : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_216_ap_done : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_229_ap_ready : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_229_ap_done : STD_LOGIC;
    signal ap_block_state27_on_subcall_done : BOOLEAN;
    signal grp_segmentIntersectsFac_fu_190_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal f2_reg_1376 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_segmentIntersectsFac_fu_203_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal f3_reg_1381 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_segmentIntersectsFac_fu_216_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal f4_reg_1386 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_segmentIntersectsFac_fu_229_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal f5_reg_1391 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_reg_1396 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_reg_1401 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_i_reg_1406 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal or_ln11_2_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_2_reg_1414 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal f6_reg_1420 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal or_ln143_3_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_3_reg_1425 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln164_1_fu_982_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_segmentIntersectsFac_fu_177_ap_start : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_177_ap_idle : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_177_edge_p1_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_segmentIntersectsFac_fu_177_edge_p1_z : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_segmentIntersectsFac_fu_177_edge_p2_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_segmentIntersectsFac_fu_177_edge_p2_z : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_segmentIntersectsFac_fu_177_face_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_segmentIntersectsFac_fu_177_face_z : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_segmentIntersectsFac_fu_190_ap_start : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_190_ap_idle : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_203_ap_start : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_203_ap_idle : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_216_ap_start : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_216_ap_idle : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_229_ap_start : STD_LOGIC;
    signal grp_segmentIntersectsFac_fu_229_ap_idle : STD_LOGIC;
    signal k_0_reg_110 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln156_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_0_reg_121 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_reg_133 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_1_reg_144 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_reg_155 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_2_reg_166 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_segmentIntersectsFac_fu_177_ap_start_reg : STD_LOGIC := '0';
    signal grp_segmentIntersectsFac_fu_190_ap_start_reg : STD_LOGIC := '0';
    signal grp_segmentIntersectsFac_fu_203_ap_start_reg : STD_LOGIC := '0';
    signal grp_segmentIntersectsFac_fu_216_ap_start_reg : STD_LOGIC := '0';
    signal grp_segmentIntersectsFac_fu_229_ap_start_reg : STD_LOGIC := '0';
    signal collisions_1_fu_70 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_fu_976_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln155_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_242_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_247_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_250_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_254_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_258_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_262_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln11_fu_273_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln11_1_fu_287_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln11_2_fu_301_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln11_3_fu_315_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln11_4_fu_329_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln11_5_fu_343_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln11_6_fu_384_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln11_7_fu_397_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln11_8_fu_433_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln11_9_fu_446_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_42_fu_473_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln11_2_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_493_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln11_8_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_502_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln11_10_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_533_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln11_12_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_5_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_6_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_564_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln11_16_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_573_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln11_18_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_6_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_8_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_7_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_9_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_621_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln11_20_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_641_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln11_21_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_661_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln11_22_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_18_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_692_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln11_23_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_20_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_19_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_21_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_fu_729_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_732_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_10_fu_742_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_1_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_2_fu_764_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_767_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_11_fu_777_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_5_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_4_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_2_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_4_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_1_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_3_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_5_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln141_2_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln141_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_10_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_11_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln141_3_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_12_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_14_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_16_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_13_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_15_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_17_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_24_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_22_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_26_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln141_4_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_25_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln141_5_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_27_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bothEndPointsInGrid_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_2_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_4_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_1_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln157_1_fu_954_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln143_5_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln162_fu_958_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln161_fu_964_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln161_fu_972_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_242_ce : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_250_ce : STD_LOGIC;
    signal grp_fu_250_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_254_ce : STD_LOGIC;
    signal grp_fu_254_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);

    component segmentIntersectsFac IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
        face_x : IN STD_LOGIC_VECTOR (31 downto 0);
        face_y : IN STD_LOGIC_VECTOR (31 downto 0);
        face_z : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component honeybee_fadd_32ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_sitofp_3hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fcmp_32nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_segmentIntersectsFac_fu_177 : component segmentIntersectsFac
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_segmentIntersectsFac_fu_177_ap_start,
        ap_done => grp_segmentIntersectsFac_fu_177_ap_done,
        ap_idle => grp_segmentIntersectsFac_fu_177_ap_idle,
        ap_ready => grp_segmentIntersectsFac_fu_177_ap_ready,
        edge_p1_x => grp_segmentIntersectsFac_fu_177_edge_p1_x,
        edge_p1_y => edge_p1_y,
        edge_p1_z => grp_segmentIntersectsFac_fu_177_edge_p1_z,
        edge_p2_x => grp_segmentIntersectsFac_fu_177_edge_p2_x,
        edge_p2_y => edge_p2_y,
        edge_p2_z => grp_segmentIntersectsFac_fu_177_edge_p2_z,
        face_x => grp_segmentIntersectsFac_fu_177_face_x,
        face_y => grid_y_reg_1220,
        face_z => grp_segmentIntersectsFac_fu_177_face_z,
        ap_return => grp_segmentIntersectsFac_fu_177_ap_return);

    grp_segmentIntersectsFac_fu_190 : component segmentIntersectsFac
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_segmentIntersectsFac_fu_190_ap_start,
        ap_done => grp_segmentIntersectsFac_fu_190_ap_done,
        ap_idle => grp_segmentIntersectsFac_fu_190_ap_idle,
        ap_ready => grp_segmentIntersectsFac_fu_190_ap_ready,
        edge_p1_x => edge_p1_x,
        edge_p1_y => edge_p1_y,
        edge_p1_z => edge_p1_z,
        edge_p2_x => edge_p2_x,
        edge_p2_y => edge_p2_y,
        edge_p2_z => edge_p2_z,
        face_x => grid_x_reg_1352,
        face_y => grid_y_reg_1220,
        face_z => p_2_i_reg_1154,
        ap_return => grp_segmentIntersectsFac_fu_190_ap_return);

    grp_segmentIntersectsFac_fu_203 : component segmentIntersectsFac
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_segmentIntersectsFac_fu_203_ap_start,
        ap_done => grp_segmentIntersectsFac_fu_203_ap_done,
        ap_idle => grp_segmentIntersectsFac_fu_203_ap_idle,
        ap_ready => grp_segmentIntersectsFac_fu_203_ap_ready,
        edge_p1_x => edge_p1_x,
        edge_p1_y => edge_p1_z,
        edge_p1_z => edge_p1_y,
        edge_p2_x => edge_p2_x,
        edge_p2_y => edge_p2_z,
        edge_p2_z => edge_p2_y,
        face_x => grid_x_reg_1352,
        face_y => grid_z_reg_1141,
        face_z => grid_y_reg_1220,
        ap_return => grp_segmentIntersectsFac_fu_203_ap_return);

    grp_segmentIntersectsFac_fu_216 : component segmentIntersectsFac
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_segmentIntersectsFac_fu_216_ap_start,
        ap_done => grp_segmentIntersectsFac_fu_216_ap_done,
        ap_idle => grp_segmentIntersectsFac_fu_216_ap_idle,
        ap_ready => grp_segmentIntersectsFac_fu_216_ap_ready,
        edge_p1_x => edge_p1_x,
        edge_p1_y => edge_p1_z,
        edge_p1_z => edge_p1_y,
        edge_p2_x => edge_p2_x,
        edge_p2_y => edge_p2_z,
        edge_p2_z => edge_p2_y,
        face_x => grid_x_reg_1352,
        face_y => grid_z_reg_1141,
        face_z => p_i_reg_1232,
        ap_return => grp_segmentIntersectsFac_fu_216_ap_return);

    grp_segmentIntersectsFac_fu_229 : component segmentIntersectsFac
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_segmentIntersectsFac_fu_229_ap_start,
        ap_done => grp_segmentIntersectsFac_fu_229_ap_done,
        ap_idle => grp_segmentIntersectsFac_fu_229_ap_idle,
        ap_ready => grp_segmentIntersectsFac_fu_229_ap_ready,
        edge_p1_x => edge_p1_z,
        edge_p1_y => edge_p1_y,
        edge_p1_z => edge_p1_x,
        edge_p2_x => edge_p2_z,
        edge_p2_y => edge_p2_y,
        edge_p2_z => edge_p2_x,
        face_x => grid_z_reg_1141,
        face_y => grid_y_reg_1220,
        face_z => grid_x_reg_1352,
        ap_return => grp_segmentIntersectsFac_fu_229_ap_return);

    honeybee_fadd_32ng8j_U37 : component honeybee_fadd_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_242_p0,
        din1 => ap_const_lv32_3F800000,
        ce => grp_fu_242_ce,
        dout => grp_fu_242_p2);

    honeybee_sitofp_3hbi_U38 : component honeybee_sitofp_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_247_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_247_p1);

    honeybee_fcmp_32nfYi_U39 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_250_p0,
        din1 => grp_fu_250_p1,
        ce => grp_fu_250_ce,
        opcode => grp_fu_250_opcode,
        dout => grp_fu_250_p2);

    honeybee_fcmp_32nfYi_U40 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_254_p0,
        din1 => grp_fu_254_p1,
        ce => grp_fu_254_ce,
        opcode => grp_fu_254_opcode,
        dout => grp_fu_254_p2);

    honeybee_fcmp_32nfYi_U41 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_258_p0,
        din1 => grp_fu_258_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_258_p2);

    honeybee_fcmp_32nfYi_U42 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_262_p0,
        din1 => grp_fu_262_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_3,
        dout => grp_fu_262_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_segmentIntersectsFac_fu_177_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_segmentIntersectsFac_fu_177_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                    grp_segmentIntersectsFac_fu_177_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_segmentIntersectsFac_fu_177_ap_ready = ap_const_logic_1)) then 
                    grp_segmentIntersectsFac_fu_177_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_segmentIntersectsFac_fu_190_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_segmentIntersectsFac_fu_190_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    grp_segmentIntersectsFac_fu_190_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_segmentIntersectsFac_fu_190_ap_ready = ap_const_logic_1)) then 
                    grp_segmentIntersectsFac_fu_190_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_segmentIntersectsFac_fu_203_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_segmentIntersectsFac_fu_203_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    grp_segmentIntersectsFac_fu_203_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_segmentIntersectsFac_fu_203_ap_ready = ap_const_logic_1)) then 
                    grp_segmentIntersectsFac_fu_203_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_segmentIntersectsFac_fu_216_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_segmentIntersectsFac_fu_216_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    grp_segmentIntersectsFac_fu_216_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_segmentIntersectsFac_fu_216_ap_ready = ap_const_logic_1)) then 
                    grp_segmentIntersectsFac_fu_216_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_segmentIntersectsFac_fu_229_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_segmentIntersectsFac_fu_229_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    grp_segmentIntersectsFac_fu_229_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_segmentIntersectsFac_fu_229_ap_ready = ap_const_logic_1)) then 
                    grp_segmentIntersectsFac_fu_229_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    b_0_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln156_fu_412_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                b_0_reg_121 <= b_reg_1162;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                b_0_reg_121 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    b_1_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln157_fu_461_p2 = ap_const_lv1_1))) then 
                b_1_reg_144 <= add_ln164_reg_1240;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                b_1_reg_144 <= b_0_reg_121;
            end if; 
        end if;
    end process;

    b_2_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                b_2_reg_166 <= add_ln164_1_fu_982_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                b_2_reg_166 <= b_1_reg_144;
            end if; 
        end if;
    end process;

    collisions_1_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                collisions_1_fu_70 <= collisions_fu_976_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                collisions_1_fu_70 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_0_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i_0_reg_155 <= i_reg_1293;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_0_reg_155 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln157_fu_461_p2 = ap_const_lv1_1))) then 
                j_0_reg_133 <= j_reg_1215;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_0_reg_133 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_0_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln156_fu_412_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                k_0_reg_110 <= k_reg_1136;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_0_reg_110 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln164_reg_1240 <= add_ln164_fu_424_p2;
                bitcast_ln11_4_reg_1245 <= bitcast_ln11_4_fu_430_p1;
                bitcast_ln11_6_reg_1260 <= bitcast_ln11_6_fu_443_p1;
                icmp_ln11_13_reg_1265 <= icmp_ln11_13_fu_450_p2;
                icmp_ln11_9_reg_1250 <= icmp_ln11_9_fu_437_p2;
                tmp_37_reg_1255 <= grp_fu_250_p2;
                tmp_38_reg_1270 <= grp_fu_254_p2;
                tmp_39_reg_1275 <= grp_fu_258_p2;
                tmp_40_reg_1280 <= grp_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln157_fu_461_p2 = ap_const_lv1_0))) then
                and_ln11_23_reg_1347 <= and_ln11_23_fu_723_p2;
                and_ln141_1_reg_1320 <= and_ln141_1_fu_615_p2;
                or_ln11_10_reg_1337 <= or_ln11_10_fu_676_p2;
                or_ln11_11_reg_1342 <= or_ln11_11_fu_707_p2;
                or_ln11_1_reg_1298 <= or_ln11_1_fu_488_p2;
                or_ln11_3_reg_1304 <= or_ln11_3_fu_517_p2;
                or_ln11_4_reg_1310 <= or_ln11_4_fu_528_p2;
                or_ln11_7_reg_1315 <= or_ln11_7_fu_599_p2;
                or_ln11_8_reg_1325 <= or_ln11_8_fu_636_p2;
                or_ln11_9_reg_1331 <= or_ln11_9_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                b_reg_1162 <= b_fu_375_p2;
                bitcast_ln11_10_reg_1182 <= bitcast_ln11_10_fu_394_p1;
                bitcast_ln11_8_reg_1167 <= bitcast_ln11_8_fu_381_p1;
                icmp_ln11_17_reg_1172 <= icmp_ln11_17_fu_388_p2;
                icmp_ln11_19_reg_1187 <= icmp_ln11_19_fu_401_p2;
                tmp_34_reg_1192 <= grp_fu_254_p2;
                tmp_35_reg_1197 <= grp_fu_258_p2;
                tmp_36_reg_1202 <= grp_fu_262_p2;
                tmp_s_reg_1177 <= grp_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bitcast_ln11_11_reg_1118 <= bitcast_ln11_11_fu_339_p1;
                bitcast_ln11_1_reg_1068 <= bitcast_ln11_1_fu_269_p1;
                bitcast_ln11_3_reg_1078 <= bitcast_ln11_3_fu_283_p1;
                bitcast_ln11_5_reg_1088 <= bitcast_ln11_5_fu_297_p1;
                bitcast_ln11_7_reg_1098 <= bitcast_ln11_7_fu_311_p1;
                bitcast_ln11_9_reg_1108 <= bitcast_ln11_9_fu_325_p1;
                icmp_ln11_11_reg_1103 <= icmp_ln11_11_fu_319_p2;
                icmp_ln11_14_reg_1113 <= icmp_ln11_14_fu_333_p2;
                icmp_ln11_15_reg_1123 <= icmp_ln11_15_fu_347_p2;
                icmp_ln11_3_reg_1073 <= icmp_ln11_3_fu_277_p2;
                icmp_ln11_6_reg_1083 <= icmp_ln11_6_fu_291_p2;
                icmp_ln11_7_reg_1093 <= icmp_ln11_7_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state27_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                f1_reg_1371 <= grp_segmentIntersectsFac_fu_177_ap_return;
                f2_reg_1376 <= grp_segmentIntersectsFac_fu_190_ap_return;
                f3_reg_1381 <= grp_segmentIntersectsFac_fu_203_ap_return;
                f4_reg_1386 <= grp_segmentIntersectsFac_fu_216_ap_return;
                f5_reg_1391 <= grp_segmentIntersectsFac_fu_229_ap_return;
                tmp_43_reg_1396 <= grp_fu_250_p2;
                tmp_53_reg_1401 <= grp_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_segmentIntersectsFac_fu_177_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                f6_reg_1420 <= grp_segmentIntersectsFac_fu_177_ap_return;
                or_ln143_3_reg_1425 <= or_ln143_3_fu_925_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                grid_x_reg_1352 <= grp_fu_247_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                grid_y_reg_1220 <= grp_fu_247_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                grid_z_reg_1141 <= grp_fu_247_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                i_reg_1293 <= i_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                j_reg_1215 <= j_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_reg_1136 <= k_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                or_ln11_2_reg_1414 <= or_ln11_2_fu_793_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                or_ln11_reg_1365 <= or_ln11_fu_758_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                p_1_i_reg_1406 <= grp_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_2_i_reg_1154 <= grp_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                p_i_reg_1232 <= grp_fu_242_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state22, icmp_ln157_fu_461_p2, ap_CS_fsm_state27, grp_segmentIntersectsFac_fu_177_ap_done, ap_block_state27_on_subcall_done, ap_CS_fsm_state31, icmp_ln156_fu_412_p2, icmp_ln155_fu_363_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln155_fu_363_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln156_fu_412_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln157_fu_461_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_boolean_0 = ap_block_state27_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((grp_segmentIntersectsFac_fu_177_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln164_1_fu_982_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(b_2_reg_166));
    add_ln164_fu_424_p2 <= std_logic_vector(unsigned(ap_const_lv7_4) + unsigned(b_1_reg_144));
    and_ln11_10_fu_844_p2 <= (or_ln11_8_reg_1325 and or_ln11_7_reg_1315);
    and_ln11_11_fu_848_p2 <= (tmp_34_reg_1192 and and_ln11_10_fu_844_p2);
    and_ln11_12_fu_859_p2 <= (or_ln11_reg_1365 and or_ln11_9_reg_1331);
    and_ln11_13_fu_863_p2 <= (tmp_53_reg_1401 and and_ln11_12_fu_859_p2);
    and_ln11_14_fu_868_p2 <= (or_ln11_9_reg_1331 and or_ln11_2_reg_1414);
    and_ln11_15_fu_872_p2 <= (grp_fu_254_p2 and and_ln11_14_fu_868_p2);
    and_ln11_16_fu_878_p2 <= (or_ln11_3_reg_1304 and or_ln11_10_reg_1337);
    and_ln11_17_fu_882_p2 <= (tmp_39_reg_1275 and and_ln11_16_fu_878_p2);
    and_ln11_18_fu_681_p2 <= (or_ln11_5_fu_548_p2 and or_ln11_10_fu_676_p2);
    and_ln11_19_fu_687_p2 <= (tmp_40_reg_1280 and and_ln11_18_fu_681_p2);
    and_ln11_1_fu_803_p2 <= (tmp_43_reg_1396 and and_ln11_fu_799_p2);
    and_ln11_20_fu_712_p2 <= (or_ln11_6_fu_588_p2 and or_ln11_11_fu_707_p2);
    and_ln11_21_fu_718_p2 <= (tmp_35_reg_1197 and and_ln11_20_fu_712_p2);
    and_ln11_22_fu_887_p2 <= (and_ln11_15_fu_872_p2 and and_ln11_13_fu_863_p2);
    and_ln11_23_fu_723_p2 <= (and_ln11_21_fu_718_p2 and and_ln11_19_fu_687_p2);
    and_ln11_24_fu_893_p2 <= (and_ln11_23_reg_1347 and and_ln11_17_fu_882_p2);
    and_ln11_25_fu_898_p2 <= (and_ln11_24_fu_893_p2 and and_ln11_22_fu_887_p2);
    and_ln11_26_fu_904_p2 <= (or_ln11_8_reg_1325 and or_ln11_11_reg_1342);
    and_ln11_27_fu_908_p2 <= (tmp_36_reg_1202 and and_ln11_26_fu_904_p2);
    and_ln11_2_fu_808_p2 <= (or_ln11_2_reg_1414 and or_ln11_1_reg_1298);
    and_ln11_3_fu_812_p2 <= (grp_fu_250_p2 and and_ln11_2_fu_808_p2);
    and_ln11_4_fu_818_p2 <= (or_ln11_4_reg_1310 and or_ln11_3_reg_1304);
    and_ln11_5_fu_822_p2 <= (tmp_37_reg_1255 and and_ln11_4_fu_818_p2);
    and_ln11_6_fu_553_p2 <= (or_ln11_5_fu_548_p2 and or_ln11_4_fu_528_p2);
    and_ln11_7_fu_559_p2 <= (tmp_38_reg_1270 and and_ln11_6_fu_553_p2);
    and_ln11_8_fu_604_p2 <= (or_ln11_7_fu_599_p2 and or_ln11_6_fu_588_p2);
    and_ln11_9_fu_610_p2 <= (tmp_s_reg_1177 and and_ln11_8_fu_604_p2);
    and_ln11_fu_799_p2 <= (or_ln11_reg_1365 and or_ln11_1_reg_1298);
    and_ln141_1_fu_615_p2 <= (and_ln11_9_fu_610_p2 and and_ln11_7_fu_559_p2);
    and_ln141_2_fu_833_p2 <= (and_ln141_1_reg_1320 and and_ln11_5_fu_822_p2);
    and_ln141_3_fu_838_p2 <= (and_ln141_fu_827_p2 and and_ln141_2_fu_833_p2);
    and_ln141_4_fu_853_p2 <= (and_ln141_3_fu_838_p2 and and_ln11_11_fu_848_p2);
    and_ln141_5_fu_913_p2 <= (and_ln141_4_fu_853_p2 and and_ln11_25_fu_898_p2);
    and_ln141_fu_827_p2 <= (and_ln11_3_fu_812_p2 and and_ln11_1_fu_803_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state27_on_subcall_done_assign_proc : process(grp_segmentIntersectsFac_fu_177_ap_done, grp_segmentIntersectsFac_fu_190_ap_done, grp_segmentIntersectsFac_fu_203_ap_done, grp_segmentIntersectsFac_fu_216_ap_done, grp_segmentIntersectsFac_fu_229_ap_done)
    begin
                ap_block_state27_on_subcall_done <= ((grp_segmentIntersectsFac_fu_229_ap_done = ap_const_logic_0) or (grp_segmentIntersectsFac_fu_216_ap_done = ap_const_logic_0) or (grp_segmentIntersectsFac_fu_203_ap_done = ap_const_logic_0) or (grp_segmentIntersectsFac_fu_190_ap_done = ap_const_logic_0) or (grp_segmentIntersectsFac_fu_177_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln155_fu_363_p2)
    begin
        if (((icmp_ln155_fu_363_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln155_fu_363_p2)
    begin
        if (((icmp_ln155_fu_363_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= collisions_1_fu_70;
    b_fu_375_p2 <= std_logic_vector(unsigned(ap_const_lv7_10) + unsigned(b_0_reg_121));
    bitcast_ln11_10_fu_394_p1 <= p_2_i_reg_1154;
    bitcast_ln11_11_fu_339_p1 <= edge_p2_z;
    bitcast_ln11_1_fu_269_p1 <= edge_p1_x;
    bitcast_ln11_2_fu_764_p1 <= p_1_i_reg_1406;
    bitcast_ln11_3_fu_283_p1 <= edge_p1_y;
    bitcast_ln11_4_fu_430_p1 <= grid_y_reg_1220;
    bitcast_ln11_5_fu_297_p1 <= edge_p1_z;
    bitcast_ln11_6_fu_443_p1 <= p_i_reg_1232;
    bitcast_ln11_7_fu_311_p1 <= edge_p2_x;
    bitcast_ln11_8_fu_381_p1 <= grid_z_reg_1141;
    bitcast_ln11_9_fu_325_p1 <= edge_p2_y;
    bitcast_ln11_fu_729_p1 <= grid_x_reg_1352;
    bothEndPointsInGrid_fu_919_p2 <= (and_ln141_5_fu_913_p2 and and_ln11_27_fu_908_p2);
    collisions_fu_976_p2 <= (sext_ln161_fu_972_p1 or collisions_1_fu_70);

    grp_fu_242_ce_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_block_state27_on_subcall_done, ap_CS_fsm_state29, ap_CS_fsm_state6, ap_CS_fsm_state16, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_boolean_0 = ap_block_state27_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
            grp_fu_242_ce <= ap_const_logic_1;
        else 
            grp_fu_242_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_242_p0_assign_proc : process(grid_z_reg_1141, grid_y_reg_1220, grid_x_reg_1352, ap_CS_fsm_state26, ap_CS_fsm_state6, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_242_p0 <= grid_x_reg_1352;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_242_p0 <= grid_y_reg_1220;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_242_p0 <= grid_z_reg_1141;
        else 
            grp_fu_242_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_247_p0_assign_proc : process(zext_ln155_fu_358_p1, ap_CS_fsm_state2, zext_ln156_fu_407_p1, ap_CS_fsm_state12, zext_ln157_fu_456_p1, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_247_p0 <= zext_ln157_fu_456_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_247_p0 <= zext_ln156_fu_407_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_247_p0 <= zext_ln155_fu_358_p1;
        else 
            grp_fu_247_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_250_ce_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state27, grp_segmentIntersectsFac_fu_177_ap_done, ap_block_state27_on_subcall_done, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((grp_segmentIntersectsFac_fu_177_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_boolean_0 = ap_block_state27_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
            grp_fu_250_ce <= ap_const_logic_1;
        else 
            grp_fu_250_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_250_opcode_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_250_opcode <= ap_const_lv5_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_fu_250_opcode <= ap_const_lv5_5;
        else 
            grp_fu_250_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_250_p0_assign_proc : process(grid_z_reg_1141, grid_y_reg_1220, grid_x_reg_1352, ap_CS_fsm_state26, p_1_i_reg_1406, ap_CS_fsm_state30, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_250_p0 <= p_1_i_reg_1406;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_250_p0 <= grid_x_reg_1352;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_250_p0 <= grid_y_reg_1220;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_250_p0 <= grid_z_reg_1141;
        else 
            grp_fu_250_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_250_p1_assign_proc : process(edge_p1_x, edge_p1_y, edge_p1_z, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_fu_250_p1 <= edge_p1_x;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_250_p1 <= edge_p1_y;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_250_p1 <= edge_p1_z;
        else 
            grp_fu_250_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_254_ce_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state27, grp_segmentIntersectsFac_fu_177_ap_done, ap_block_state27_on_subcall_done, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((grp_segmentIntersectsFac_fu_177_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_boolean_0 = ap_block_state27_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
            grp_fu_254_ce <= ap_const_logic_1;
        else 
            grp_fu_254_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_254_opcode_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_254_opcode <= ap_const_lv5_5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_254_opcode <= ap_const_lv5_3;
        else 
            grp_fu_254_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_254_p0_assign_proc : process(p_2_i_reg_1154, p_i_reg_1232, grid_x_reg_1352, ap_CS_fsm_state26, p_1_i_reg_1406, ap_CS_fsm_state30, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_254_p0 <= p_1_i_reg_1406;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_254_p0 <= grid_x_reg_1352;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_254_p0 <= p_i_reg_1232;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_254_p0 <= p_2_i_reg_1154;
        else 
            grp_fu_254_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_254_p1_assign_proc : process(edge_p1_y, edge_p1_z, edge_p2_x, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_fu_254_p1 <= edge_p2_x;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_254_p1 <= edge_p1_y;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_254_p1 <= edge_p1_z;
        else 
            grp_fu_254_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_258_p0_assign_proc : process(grid_z_reg_1141, grid_y_reg_1220, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_258_p0 <= grid_y_reg_1220;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_258_p0 <= grid_z_reg_1141;
        else 
            grp_fu_258_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_258_p1_assign_proc : process(edge_p2_y, edge_p2_z, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_258_p1 <= edge_p2_y;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_258_p1 <= edge_p2_z;
        else 
            grp_fu_258_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_262_p0_assign_proc : process(p_2_i_reg_1154, p_i_reg_1232, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_262_p0 <= p_i_reg_1232;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_262_p0 <= p_2_i_reg_1154;
        else 
            grp_fu_262_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_262_p1_assign_proc : process(edge_p2_y, edge_p2_z, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_262_p1 <= edge_p2_y;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_262_p1 <= edge_p2_z;
        else 
            grp_fu_262_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_segmentIntersectsFac_fu_177_ap_start <= grp_segmentIntersectsFac_fu_177_ap_start_reg;

    grp_segmentIntersectsFac_fu_177_edge_p1_x_assign_proc : process(edge_p1_x, edge_p1_z, ap_CS_fsm_state27, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_segmentIntersectsFac_fu_177_edge_p1_x <= edge_p1_z;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_segmentIntersectsFac_fu_177_edge_p1_x <= edge_p1_x;
        else 
            grp_segmentIntersectsFac_fu_177_edge_p1_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_segmentIntersectsFac_fu_177_edge_p1_z_assign_proc : process(edge_p1_x, edge_p1_z, ap_CS_fsm_state27, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_segmentIntersectsFac_fu_177_edge_p1_z <= edge_p1_x;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_segmentIntersectsFac_fu_177_edge_p1_z <= edge_p1_z;
        else 
            grp_segmentIntersectsFac_fu_177_edge_p1_z <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_segmentIntersectsFac_fu_177_edge_p2_x_assign_proc : process(edge_p2_x, edge_p2_z, ap_CS_fsm_state27, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_segmentIntersectsFac_fu_177_edge_p2_x <= edge_p2_z;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_segmentIntersectsFac_fu_177_edge_p2_x <= edge_p2_x;
        else 
            grp_segmentIntersectsFac_fu_177_edge_p2_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_segmentIntersectsFac_fu_177_edge_p2_z_assign_proc : process(edge_p2_x, edge_p2_z, ap_CS_fsm_state27, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_segmentIntersectsFac_fu_177_edge_p2_z <= edge_p2_x;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_segmentIntersectsFac_fu_177_edge_p2_z <= edge_p2_z;
        else 
            grp_segmentIntersectsFac_fu_177_edge_p2_z <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_segmentIntersectsFac_fu_177_face_x_assign_proc : process(grid_z_reg_1141, grid_x_reg_1352, ap_CS_fsm_state27, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_segmentIntersectsFac_fu_177_face_x <= grid_z_reg_1141;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_segmentIntersectsFac_fu_177_face_x <= grid_x_reg_1352;
        else 
            grp_segmentIntersectsFac_fu_177_face_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_segmentIntersectsFac_fu_177_face_z_assign_proc : process(grid_z_reg_1141, ap_CS_fsm_state27, p_1_i_reg_1406, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_segmentIntersectsFac_fu_177_face_z <= p_1_i_reg_1406;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_segmentIntersectsFac_fu_177_face_z <= grid_z_reg_1141;
        else 
            grp_segmentIntersectsFac_fu_177_face_z <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_segmentIntersectsFac_fu_190_ap_start <= grp_segmentIntersectsFac_fu_190_ap_start_reg;
    grp_segmentIntersectsFac_fu_203_ap_start <= grp_segmentIntersectsFac_fu_203_ap_start_reg;
    grp_segmentIntersectsFac_fu_216_ap_start <= grp_segmentIntersectsFac_fu_216_ap_start_reg;
    grp_segmentIntersectsFac_fu_229_ap_start <= grp_segmentIntersectsFac_fu_229_ap_start_reg;
    i_fu_467_p2 <= std_logic_vector(unsigned(i_0_reg_155) + unsigned(ap_const_lv3_1));
    icmp_ln11_10_fu_522_p2 <= "0" when (tmp_47_fu_502_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_11_fu_319_p2 <= "1" when (trunc_ln11_3_fu_315_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_12_fu_542_p2 <= "0" when (tmp_48_fu_533_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_13_fu_450_p2 <= "1" when (trunc_ln11_9_fu_446_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_14_fu_333_p2 <= "1" when (trunc_ln11_4_fu_329_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_15_fu_347_p2 <= "1" when (trunc_ln11_5_fu_343_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_16_fu_582_p2 <= "0" when (tmp_49_fu_564_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_17_fu_388_p2 <= "1" when (trunc_ln11_6_fu_384_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_18_fu_593_p2 <= "0" when (tmp_50_fu_573_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_19_fu_401_p2 <= "1" when (trunc_ln11_7_fu_397_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_1_fu_752_p2 <= "1" when (trunc_ln11_10_fu_742_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_20_fu_630_p2 <= "0" when (tmp_51_fu_621_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_21_fu_650_p2 <= "0" when (tmp_52_fu_641_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_22_fu_670_p2 <= "0" when (tmp_55_fu_661_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_23_fu_701_p2 <= "0" when (tmp_56_fu_692_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_2_fu_482_p2 <= "0" when (tmp_42_fu_473_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_3_fu_277_p2 <= "1" when (trunc_ln11_fu_273_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_4_fu_781_p2 <= "0" when (tmp_44_fu_767_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_5_fu_787_p2 <= "1" when (trunc_ln11_11_fu_777_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_6_fu_291_p2 <= "1" when (trunc_ln11_1_fu_287_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_7_fu_305_p2 <= "1" when (trunc_ln11_2_fu_301_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_8_fu_511_p2 <= "0" when (tmp_46_fu_493_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_9_fu_437_p2 <= "1" when (trunc_ln11_8_fu_433_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_fu_746_p2 <= "0" when (tmp_41_fu_732_p4 = ap_const_lv8_FF) else "1";
    icmp_ln155_fu_363_p2 <= "1" when (k_0_reg_110 = ap_const_lv3_4) else "0";
    icmp_ln156_fu_412_p2 <= "1" when (j_0_reg_133 = ap_const_lv3_4) else "0";
    icmp_ln157_fu_461_p2 <= "1" when (i_0_reg_155 = ap_const_lv3_4) else "0";
    j_fu_418_p2 <= std_logic_vector(unsigned(j_0_reg_133) + unsigned(ap_const_lv3_1));
    k_fu_369_p2 <= std_logic_vector(unsigned(k_0_reg_110) + unsigned(ap_const_lv3_1));
    or_ln11_10_fu_676_p2 <= (icmp_ln11_22_fu_670_p2 or icmp_ln11_14_reg_1113);
    or_ln11_11_fu_707_p2 <= (icmp_ln11_23_fu_701_p2 or icmp_ln11_15_reg_1123);
    or_ln11_1_fu_488_p2 <= (icmp_ln11_3_reg_1073 or icmp_ln11_2_fu_482_p2);
    or_ln11_2_fu_793_p2 <= (icmp_ln11_5_fu_787_p2 or icmp_ln11_4_fu_781_p2);
    or_ln11_3_fu_517_p2 <= (icmp_ln11_9_reg_1250 or icmp_ln11_8_fu_511_p2);
    or_ln11_4_fu_528_p2 <= (icmp_ln11_6_reg_1083 or icmp_ln11_10_fu_522_p2);
    or_ln11_5_fu_548_p2 <= (icmp_ln11_13_reg_1265 or icmp_ln11_12_fu_542_p2);
    or_ln11_6_fu_588_p2 <= (icmp_ln11_17_reg_1172 or icmp_ln11_16_fu_582_p2);
    or_ln11_7_fu_599_p2 <= (icmp_ln11_7_reg_1093 or icmp_ln11_18_fu_593_p2);
    or_ln11_8_fu_636_p2 <= (icmp_ln11_20_fu_630_p2 or icmp_ln11_19_reg_1187);
    or_ln11_9_fu_656_p2 <= (icmp_ln11_21_fu_650_p2 or icmp_ln11_11_reg_1103);
    or_ln11_fu_758_p2 <= (icmp_ln11_fu_746_p2 or icmp_ln11_1_fu_752_p2);
    or_ln143_1_fu_934_p2 <= (or_ln143_fu_930_p2 or f1_reg_1371);
    or_ln143_2_fu_939_p2 <= (f6_reg_1420 or f4_reg_1386);
    or_ln143_3_fu_925_p2 <= (f5_reg_1391 or bothEndPointsInGrid_fu_919_p2);
    or_ln143_4_fu_943_p2 <= (or_ln143_3_reg_1425 or or_ln143_2_fu_939_p2);
    or_ln143_5_fu_948_p2 <= (or_ln143_4_fu_943_p2 or or_ln143_1_fu_934_p2);
    or_ln143_fu_930_p2 <= (f3_reg_1381 or f2_reg_1376);
    select_ln161_fu_964_p3 <= 
        shl_ln162_fu_958_p2 when (or_ln143_5_fu_948_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln161_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln161_fu_964_p3),64));

    shl_ln162_fu_958_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & zext_ln157_1_fu_954_p1(31-1 downto 0)))));
    tmp_41_fu_732_p4 <= bitcast_ln11_fu_729_p1(30 downto 23);
    tmp_42_fu_473_p4 <= bitcast_ln11_1_reg_1068(30 downto 23);
    tmp_44_fu_767_p4 <= bitcast_ln11_2_fu_764_p1(30 downto 23);
    tmp_46_fu_493_p4 <= bitcast_ln11_4_reg_1245(30 downto 23);
    tmp_47_fu_502_p4 <= bitcast_ln11_3_reg_1078(30 downto 23);
    tmp_48_fu_533_p4 <= bitcast_ln11_6_reg_1260(30 downto 23);
    tmp_49_fu_564_p4 <= bitcast_ln11_8_reg_1167(30 downto 23);
    tmp_50_fu_573_p4 <= bitcast_ln11_5_reg_1088(30 downto 23);
    tmp_51_fu_621_p4 <= bitcast_ln11_10_reg_1182(30 downto 23);
    tmp_52_fu_641_p4 <= bitcast_ln11_7_reg_1098(30 downto 23);
    tmp_55_fu_661_p4 <= bitcast_ln11_9_reg_1108(30 downto 23);
    tmp_56_fu_692_p4 <= bitcast_ln11_11_reg_1118(30 downto 23);
    trunc_ln11_10_fu_742_p1 <= bitcast_ln11_fu_729_p1(23 - 1 downto 0);
    trunc_ln11_11_fu_777_p1 <= bitcast_ln11_2_fu_764_p1(23 - 1 downto 0);
    trunc_ln11_1_fu_287_p1 <= bitcast_ln11_3_fu_283_p1(23 - 1 downto 0);
    trunc_ln11_2_fu_301_p1 <= bitcast_ln11_5_fu_297_p1(23 - 1 downto 0);
    trunc_ln11_3_fu_315_p1 <= bitcast_ln11_7_fu_311_p1(23 - 1 downto 0);
    trunc_ln11_4_fu_329_p1 <= bitcast_ln11_9_fu_325_p1(23 - 1 downto 0);
    trunc_ln11_5_fu_343_p1 <= bitcast_ln11_11_fu_339_p1(23 - 1 downto 0);
    trunc_ln11_6_fu_384_p1 <= bitcast_ln11_8_fu_381_p1(23 - 1 downto 0);
    trunc_ln11_7_fu_397_p1 <= bitcast_ln11_10_fu_394_p1(23 - 1 downto 0);
    trunc_ln11_8_fu_433_p1 <= bitcast_ln11_4_fu_430_p1(23 - 1 downto 0);
    trunc_ln11_9_fu_446_p1 <= bitcast_ln11_6_fu_443_p1(23 - 1 downto 0);
    trunc_ln11_fu_273_p1 <= bitcast_ln11_1_fu_269_p1(23 - 1 downto 0);
    zext_ln155_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_110),32));
    zext_ln156_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_133),32));
    zext_ln157_1_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_2_reg_166),32));
    zext_ln157_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_155),32));
end behav;
