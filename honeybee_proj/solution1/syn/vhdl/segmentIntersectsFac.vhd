-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity segmentIntersectsFac is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
    face_x : IN STD_LOGIC_VECTOR (31 downto 0);
    face_y : IN STD_LOGIC_VECTOR (31 downto 0);
    face_z : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of segmentIntersectsFac is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (50 downto 0) := "000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (50 downto 0) := "000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (50 downto 0) := "000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (50 downto 0) := "000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (50 downto 0) := "000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (50 downto 0) := "000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (50 downto 0) := "000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (50 downto 0) := "000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (50 downto 0) := "000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (50 downto 0) := "001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (50 downto 0) := "010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (50 downto 0) := "100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_88_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_94_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_241 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_128_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal Q_x_reg_1230 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal R_y_reg_1237 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_106_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal PR_x_reg_1251 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal PR_y_reg_1257 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_i_reg_1263 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_i_reg_1268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_31_i_reg_1315 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_33_i_reg_1321 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_36_i_reg_1349 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_reg_1355 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal p_a_fu_342_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_a_reg_1362 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_a_1_fu_354_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_a_1_reg_1368 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_a_2_fu_442_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_a_2_reg_1374 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_a_3_fu_454_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_a_3_reg_1380 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_a_4_fu_542_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_a_4_reg_1386 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_a_5_fu_554_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_a_5_reg_1392 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln54_4_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_4_reg_1398 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal icmp_ln54_5_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_5_reg_1403 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_3_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_3_reg_1408 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_8_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_8_reg_1416 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_9_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_9_reg_1421 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_4_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_4_reg_1426 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_5_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_5_reg_1431 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_3_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_3_reg_1436 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_4_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_4_reg_1444 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_5_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_5_reg_1449 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_3_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_3_reg_1454 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_8_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_8_reg_1460 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_9_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_9_reg_1465 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_1470 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_1_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_1_reg_1475 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_2_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_2_reg_1480 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_3_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_3_reg_1485 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_4_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_4_reg_1490 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_5_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_5_reg_1495 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_6_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_6_reg_1500 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_7_fu_923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_7_reg_1505 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1510 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_1_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_1_reg_1515 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_88_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_88_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_94_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_94_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_100_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_100_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_120_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_120_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_124_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_128_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_128_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_132_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_151_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_155_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_155_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_159_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_159_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_163_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_163_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_167_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln54_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln54_1_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_263_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_fu_273_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln54_1_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_280_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_1_fu_290_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln54_3_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_2_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_1_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_1_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_4_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln55_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln55_1_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_363_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln55_fu_373_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln55_1_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_380_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln55_1_fu_390_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln55_3_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_2_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_1_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln55_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln55_1_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln55_4_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln56_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln56_1_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_463_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln56_fu_473_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln56_1_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_480_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln56_1_fu_490_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln56_3_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_2_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_1_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_1_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_2_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln54_2_fu_560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln54_3_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_563_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_2_fu_573_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_4_fu_581_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_3_fu_591_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln54_7_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_6_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln54_4_fu_625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_628_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_4_fu_638_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln55_2_fu_654_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln55_3_fu_671_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_657_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln55_2_fu_667_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_12_fu_675_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln55_3_fu_685_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln55_7_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_6_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln56_2_fu_719_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln56_3_fu_736_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_722_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln56_2_fu_732_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_20_fu_740_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln56_3_fu_750_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln56_7_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_6_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln56_4_fu_784_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_787_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln56_4_fu_797_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln61_fu_813_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_816_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln61_fu_826_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln61_1_fu_842_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_845_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln61_1_fu_855_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln61_2_fu_871_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_874_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln61_2_fu_884_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln61_3_fu_900_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_903_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln61_3_fu_913_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln99_fu_929_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_932_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln99_fu_942_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal or_ln54_2_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_2_fu_962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_3_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_4_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_5_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_6_fu_988_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_2_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln55_2_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln55_3_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_2_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_3_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln54_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln54_1_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_6_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln55_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_4_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_5_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln61_fu_1075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln61_1_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_2_fu_1094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln61_2_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_4_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln61_3_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_6_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_1_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_3_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_5_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_7_fu_1129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_9_fu_1141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_8_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_4_fu_1030_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_5_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_4_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln99_2_fu_1159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln99_1_fu_1153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln99_fu_1171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln99_4_fu_1175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_6_fu_1069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln99_5_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_5_fu_1054_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln99_6_fu_1186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_10_fu_1147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln99_1_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln99_7_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln99_3_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_88_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_94_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_100_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_151_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_155_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_159_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_163_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_167_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_171_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln99_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (50 downto 0);

    component honeybee_faddfsubbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fsub_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fmul_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fdiv_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_fcmp_32nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    honeybee_faddfsubbkb_U1 : component honeybee_faddfsubbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_88_p0,
        din1 => grp_fu_88_p1,
        opcode => grp_fu_88_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_88_p2);

    honeybee_faddfsubbkb_U2 : component honeybee_faddfsubbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_94_p0,
        din1 => grp_fu_94_p1,
        opcode => grp_fu_94_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_94_p2);

    honeybee_faddfsubbkb_U3 : component honeybee_faddfsubbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_100_p0,
        din1 => grp_fu_100_p1,
        opcode => grp_fu_100_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_100_p2);

    honeybee_fsub_32ncud_U4 : component honeybee_fsub_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => face_x,
        din1 => face_x,
        ce => ap_const_logic_1,
        dout => grp_fu_106_p2);

    honeybee_fsub_32ncud_U5 : component honeybee_fsub_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => face_y,
        din1 => R_y_reg_1237,
        ce => ap_const_logic_1,
        dout => grp_fu_110_p2);

    honeybee_fmul_32ndEe_U6 : component honeybee_fmul_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_120_p0,
        din1 => grp_fu_120_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_120_p2);

    honeybee_fmul_32ndEe_U7 : component honeybee_fmul_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_124_p0,
        din1 => grp_fu_124_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_124_p2);

    honeybee_fmul_32ndEe_U8 : component honeybee_fmul_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_128_p0,
        din1 => grp_fu_128_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_128_p2);

    honeybee_fmul_32ndEe_U9 : component honeybee_fmul_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_132_p0,
        din1 => grp_fu_132_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_132_p2);

    honeybee_fmul_32ndEe_U10 : component honeybee_fmul_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_191,
        din1 => PR_y_reg_1257,
        ce => ap_const_logic_1,
        dout => grp_fu_136_p2);

    honeybee_fmul_32ndEe_U11 : component honeybee_fmul_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_206,
        din1 => PR_x_reg_1251,
        ce => ap_const_logic_1,
        dout => grp_fu_140_p2);

    honeybee_fdiv_32neOg_U12 : component honeybee_fdiv_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_191,
        din1 => reg_206,
        ce => ap_const_logic_1,
        dout => grp_fu_147_p2);

    honeybee_fcmp_32nfYi_U13 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_151_p0,
        din1 => grp_fu_151_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_151_opcode,
        dout => grp_fu_151_p2);

    honeybee_fcmp_32nfYi_U14 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_155_p0,
        din1 => grp_fu_155_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_155_opcode,
        dout => grp_fu_155_p2);

    honeybee_fcmp_32nfYi_U15 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_159_p0,
        din1 => grp_fu_159_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_159_opcode,
        dout => grp_fu_159_p2);

    honeybee_fcmp_32nfYi_U16 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_163_p0,
        din1 => grp_fu_163_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_163_opcode,
        dout => grp_fu_163_p2);

    honeybee_fcmp_32nfYi_U17 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_167_p0,
        din1 => grp_fu_167_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_167_opcode,
        dout => grp_fu_167_p2);

    honeybee_fcmp_32nfYi_U18 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_171_p0,
        din1 => grp_fu_171_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_171_opcode,
        dout => grp_fu_171_p2);

    honeybee_fcmp_32nfYi_U19 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Q_x_reg_1230,
        din1 => reg_191,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_3,
        dout => grp_fu_175_p2);

    honeybee_fcmp_32nfYi_U20 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_206,
        din1 => face_y,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_3,
        dout => grp_fu_179_p2);

    honeybee_fcmp_32nfYi_U21 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => R_y_reg_1237,
        din1 => reg_206,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_3,
        dout => grp_fu_183_p2);

    honeybee_fcmp_32nfYi_U22 : component honeybee_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_a_3_reg_1380,
        din1 => reg_206,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_3,
        dout => grp_fu_187_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                    ap_return_preg <= and_ln99_fu_1204_p2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                PR_x_reg_1251 <= grp_fu_106_p2;
                PR_y_reg_1257 <= grp_fu_110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                Q_x_reg_1230 <= grp_fu_88_p2;
                R_y_reg_1237 <= grp_fu_94_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                T_reg_1355 <= grp_fu_147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                icmp_ln54_4_reg_1398 <= icmp_ln54_4_fu_595_p2;
                icmp_ln54_5_reg_1403 <= icmp_ln54_5_fu_601_p2;
                icmp_ln54_8_reg_1416 <= icmp_ln54_8_fu_642_p2;
                icmp_ln54_9_reg_1421 <= icmp_ln54_9_fu_648_p2;
                icmp_ln55_4_reg_1426 <= icmp_ln55_4_fu_689_p2;
                icmp_ln55_5_reg_1431 <= icmp_ln55_5_fu_695_p2;
                icmp_ln56_4_reg_1444 <= icmp_ln56_4_fu_754_p2;
                icmp_ln56_5_reg_1449 <= icmp_ln56_5_fu_760_p2;
                icmp_ln56_8_reg_1460 <= icmp_ln56_8_fu_801_p2;
                icmp_ln56_9_reg_1465 <= icmp_ln56_9_fu_807_p2;
                icmp_ln61_1_reg_1475 <= icmp_ln61_1_fu_836_p2;
                icmp_ln61_2_reg_1480 <= icmp_ln61_2_fu_859_p2;
                icmp_ln61_3_reg_1485 <= icmp_ln61_3_fu_865_p2;
                icmp_ln61_4_reg_1490 <= icmp_ln61_4_fu_888_p2;
                icmp_ln61_5_reg_1495 <= icmp_ln61_5_fu_894_p2;
                icmp_ln61_6_reg_1500 <= icmp_ln61_6_fu_917_p2;
                icmp_ln61_7_reg_1505 <= icmp_ln61_7_fu_923_p2;
                icmp_ln61_reg_1470 <= icmp_ln61_fu_830_p2;
                icmp_ln99_1_reg_1515 <= icmp_ln99_1_fu_952_p2;
                icmp_ln99_reg_1510 <= icmp_ln99_fu_946_p2;
                or_ln54_3_reg_1408 <= or_ln54_3_fu_619_p2;
                or_ln55_3_reg_1436 <= or_ln55_3_fu_713_p2;
                or_ln56_3_reg_1454 <= or_ln56_3_fu_778_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                p_a_1_reg_1368 <= p_a_1_fu_354_p3;
                p_a_2_reg_1374 <= p_a_2_fu_442_p3;
                p_a_3_reg_1380 <= p_a_3_fu_454_p3;
                p_a_4_reg_1386 <= p_a_4_fu_542_p3;
                p_a_5_reg_1392 <= p_a_5_fu_554_p3;
                p_a_reg_1362 <= p_a_fu_342_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_191 <= grp_fu_88_p2;
                reg_206 <= grp_fu_94_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_222 <= grp_fu_100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_234 <= grp_fu_120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_241 <= grp_fu_124_p2;
                reg_248 <= grp_fu_128_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_254 <= grp_fu_132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_31_i_reg_1315 <= grp_fu_88_p2;
                tmp_33_i_reg_1321 <= grp_fu_94_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_36_i_reg_1349 <= grp_fu_88_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_45_i_reg_1263 <= grp_fu_136_p2;
                tmp_46_i_reg_1268 <= grp_fu_140_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln54_1_fu_336_p2 <= (grp_fu_151_p2 and and_ln54_fu_330_p2);
    and_ln54_2_fu_962_p2 <= (or_ln54_3_reg_1408 and or_ln54_2_fu_958_p2);
    and_ln54_3_fu_967_p2 <= (grp_fu_151_p2 and and_ln54_2_fu_962_p2);
    and_ln54_4_fu_348_p2 <= (grp_fu_155_p2 and and_ln54_fu_330_p2);
    and_ln54_5_fu_983_p2 <= (or_ln54_4_fu_979_p2 and or_ln54_3_reg_1408);
    and_ln54_6_fu_988_p2 <= (grp_fu_155_p2 and and_ln54_5_fu_983_p2);
    and_ln54_fu_330_p2 <= (or_ln54_fu_306_p2 and or_ln54_1_fu_324_p2);
    and_ln55_1_fu_436_p2 <= (grp_fu_159_p2 and and_ln55_fu_430_p2);
    and_ln55_2_fu_1004_p2 <= (or_ln55_3_reg_1436 and or_ln55_2_fu_1000_p2);
    and_ln55_3_fu_1009_p2 <= (grp_fu_159_p2 and and_ln55_2_fu_1004_p2);
    and_ln55_4_fu_448_p2 <= (grp_fu_163_p2 and and_ln55_fu_430_p2);
    and_ln55_fu_430_p2 <= (or_ln55_fu_406_p2 and or_ln55_1_fu_424_p2);
    and_ln56_1_fu_536_p2 <= (grp_fu_167_p2 and and_ln56_fu_530_p2);
    and_ln56_2_fu_548_p2 <= (grp_fu_171_p2 and and_ln56_fu_530_p2);
    and_ln56_3_fu_1025_p2 <= (or_ln56_3_reg_1454 and or_ln56_2_fu_1021_p2);
    and_ln56_4_fu_1030_p2 <= (grp_fu_163_p2 and and_ln56_3_fu_1025_p2);
    and_ln56_5_fu_1064_p2 <= (or_ln56_4_fu_1060_p2 and or_ln56_3_reg_1454);
    and_ln56_6_fu_1069_p2 <= (grp_fu_167_p2 and and_ln56_5_fu_1064_p2);
    and_ln56_fu_530_p2 <= (or_ln56_fu_506_p2 and or_ln56_1_fu_524_p2);
    and_ln61_10_fu_1147_p2 <= (and_ln61_9_fu_1141_p2 and and_ln61_8_fu_1135_p2);
    and_ln61_1_fu_1084_p2 <= (grp_fu_171_p2 and and_ln61_fu_1079_p2);
    and_ln61_2_fu_1094_p2 <= (or_ln61_1_fu_1090_p2 and or_ln54_3_reg_1408);
    and_ln61_3_fu_1099_p2 <= (grp_fu_175_p2 and and_ln61_2_fu_1094_p2);
    and_ln61_4_fu_1109_p2 <= (or_ln61_2_fu_1105_p2 and or_ln55_3_reg_1436);
    and_ln61_5_fu_1114_p2 <= (grp_fu_179_p2 and and_ln61_4_fu_1109_p2);
    and_ln61_6_fu_1124_p2 <= (or_ln61_3_fu_1120_p2 and or_ln55_3_reg_1436);
    and_ln61_7_fu_1129_p2 <= (grp_fu_183_p2 and and_ln61_6_fu_1124_p2);
    and_ln61_8_fu_1135_p2 <= (and_ln61_3_fu_1099_p2 and and_ln61_1_fu_1084_p2);
    and_ln61_9_fu_1141_p2 <= (and_ln61_7_fu_1129_p2 and and_ln61_5_fu_1114_p2);
    and_ln61_fu_1079_p2 <= (or_ln61_fu_1075_p2 and or_ln54_3_reg_1408);
    and_ln99_1_fu_1153_p2 <= (and_ln56_4_fu_1030_p2 and and_ln54_3_fu_967_p2);
    and_ln99_2_fu_1159_p2 <= (or_ln55_4_fu_1048_p2 and or_ln54_5_fu_1036_p2);
    and_ln99_3_fu_1165_p2 <= (and_ln99_2_fu_1159_p2 and and_ln99_1_fu_1153_p2);
    and_ln99_4_fu_1175_p2 <= (or_ln99_fu_1171_p2 and or_ln55_3_reg_1436);
    and_ln99_5_fu_1180_p2 <= (grp_fu_187_p2 and and_ln99_4_fu_1175_p2);
    and_ln99_6_fu_1186_p2 <= (and_ln99_5_fu_1180_p2 and and_ln56_6_fu_1069_p2);
    and_ln99_7_fu_1198_p2 <= (or_ln99_1_fu_1192_p2 and and_ln61_10_fu_1147_p2);
    and_ln99_fu_1204_p2 <= (and_ln99_7_fu_1198_p2 and and_ln99_3_fu_1165_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state51, and_ln99_fu_1204_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            ap_return <= and_ln99_fu_1204_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln54_1_fu_277_p1 <= edge_p2_x;
    bitcast_ln54_2_fu_560_p1 <= p_a_reg_1362;
    bitcast_ln54_3_fu_577_p1 <= reg_191;
    bitcast_ln54_4_fu_625_p1 <= p_a_1_reg_1368;
    bitcast_ln54_fu_260_p1 <= edge_p1_x;
    bitcast_ln55_1_fu_377_p1 <= edge_p2_y;
    bitcast_ln55_2_fu_654_p1 <= p_a_2_reg_1374;
    bitcast_ln55_3_fu_671_p1 <= reg_206;
    bitcast_ln55_fu_360_p1 <= edge_p1_y;
    bitcast_ln56_1_fu_477_p1 <= edge_p2_z;
    bitcast_ln56_2_fu_719_p1 <= p_a_5_reg_1392;
    bitcast_ln56_3_fu_736_p1 <= reg_222;
    bitcast_ln56_4_fu_784_p1 <= p_a_4_reg_1386;
    bitcast_ln56_fu_460_p1 <= edge_p1_z;
    bitcast_ln61_1_fu_842_p1 <= Q_x_reg_1230;
    bitcast_ln61_2_fu_871_p1 <= face_y;
    bitcast_ln61_3_fu_900_p1 <= R_y_reg_1237;
    bitcast_ln61_fu_813_p1 <= face_x;
    bitcast_ln99_fu_929_p1 <= p_a_3_reg_1380;

    grp_fu_100_opcode_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state23, ap_CS_fsm_state12, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_100_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_100_opcode <= ap_const_lv2_0;
        else 
            grp_fu_100_opcode <= "XX";
        end if; 
    end process;


    grp_fu_100_p0_assign_proc : process(face_z, reg_248, ap_CS_fsm_state5, tmp_45_i_reg_1263, ap_CS_fsm_state23, ap_CS_fsm_state12, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_100_p0 <= reg_248;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_100_p0 <= tmp_45_i_reg_1263;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_100_p0 <= face_z;
        else 
            grp_fu_100_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_100_p1_assign_proc : process(edge_p1_z, face_z, reg_254, ap_CS_fsm_state5, tmp_46_i_reg_1268, ap_CS_fsm_state23, ap_CS_fsm_state12, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_100_p1 <= edge_p1_z;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_100_p1 <= reg_254;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_100_p1 <= tmp_46_i_reg_1268;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_100_p1 <= face_z;
        else 
            grp_fu_100_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_120_p0_assign_proc : process(reg_191, reg_206, reg_222, ap_CS_fsm_state16, tmp_31_i_reg_1315, ap_CS_fsm_state20, tmp_36_i_reg_1349, ap_CS_fsm_state9, ap_CS_fsm_state24, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_120_p0 <= tmp_31_i_reg_1315;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_120_p0 <= tmp_36_i_reg_1349;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_120_p0 <= reg_222;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_120_p0 <= reg_191;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_120_p0 <= reg_206;
        else 
            grp_fu_120_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_120_p1_assign_proc : process(face_x, face_z, reg_222, ap_CS_fsm_state16, ap_CS_fsm_state20, T_reg_1355, ap_CS_fsm_state9, ap_CS_fsm_state24, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_120_p1 <= T_reg_1355;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_120_p1 <= face_z;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_120_p1 <= face_x;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_120_p1 <= reg_222;
        else 
            grp_fu_120_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_124_p0_assign_proc : process(reg_206, reg_222, ap_CS_fsm_state16, tmp_33_i_reg_1321, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_124_p0 <= tmp_33_i_reg_1321;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_124_p0 <= reg_206;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_124_p0 <= reg_222;
        else 
            grp_fu_124_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_124_p1_assign_proc : process(edge_p1_z, face_y, PR_y_reg_1257, ap_CS_fsm_state16, ap_CS_fsm_state20, T_reg_1355, ap_CS_fsm_state9, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_124_p1 <= T_reg_1355;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_124_p1 <= edge_p1_z;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_124_p1 <= face_y;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_124_p1 <= PR_y_reg_1257;
        else 
            grp_fu_124_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_128_p0_assign_proc : process(reg_191, reg_222, ap_CS_fsm_state16, tmp_31_i_reg_1315, ap_CS_fsm_state20, tmp_36_i_reg_1349, ap_CS_fsm_state9, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_128_p0 <= tmp_36_i_reg_1349;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_128_p0 <= tmp_31_i_reg_1315;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_128_p0 <= reg_191;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_128_p0 <= reg_222;
        else 
            grp_fu_128_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_128_p1_assign_proc : process(edge_p1_x, reg_191, PR_x_reg_1251, ap_CS_fsm_state16, ap_CS_fsm_state20, T_reg_1355, ap_CS_fsm_state9, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_128_p1 <= T_reg_1355;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_128_p1 <= reg_191;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_128_p1 <= edge_p1_x;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_128_p1 <= PR_x_reg_1251;
        else 
            grp_fu_128_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_132_p0_assign_proc : process(reg_191, reg_206, ap_CS_fsm_state16, tmp_33_i_reg_1321, ap_CS_fsm_state20, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_132_p0 <= tmp_33_i_reg_1321;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_132_p0 <= reg_206;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_132_p0 <= reg_191;
        else 
            grp_fu_132_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_132_p1_assign_proc : process(edge_p1_y, reg_206, reg_222, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_132_p1 <= reg_206;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_132_p1 <= edge_p1_y;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_132_p1 <= reg_222;
        else 
            grp_fu_132_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_151_opcode_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_151_opcode <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_151_opcode <= ap_const_lv5_4;
        else 
            grp_fu_151_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_151_p0_assign_proc : process(edge_p1_x, p_a_reg_1362, ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_151_p0 <= p_a_reg_1362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_151_p0 <= edge_p1_x;
        else 
            grp_fu_151_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_151_p1_assign_proc : process(edge_p2_x, reg_191, ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_151_p1 <= reg_191;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_151_p1 <= edge_p2_x;
        else 
            grp_fu_151_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_155_opcode_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_155_opcode <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_155_opcode <= ap_const_lv5_2;
        else 
            grp_fu_155_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_155_p0_assign_proc : process(edge_p1_x, p_a_1_reg_1368, ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_155_p0 <= p_a_1_reg_1368;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_155_p0 <= edge_p1_x;
        else 
            grp_fu_155_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_155_p1_assign_proc : process(edge_p2_x, reg_191, ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_155_p1 <= reg_191;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_155_p1 <= edge_p2_x;
        else 
            grp_fu_155_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_159_opcode_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_159_opcode <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_159_opcode <= ap_const_lv5_4;
        else 
            grp_fu_159_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_159_p0_assign_proc : process(edge_p1_y, p_a_2_reg_1374, ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_159_p0 <= p_a_2_reg_1374;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_159_p0 <= edge_p1_y;
        else 
            grp_fu_159_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_159_p1_assign_proc : process(edge_p2_y, reg_206, ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_159_p1 <= reg_206;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_159_p1 <= edge_p2_y;
        else 
            grp_fu_159_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_163_opcode_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_163_opcode <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_163_opcode <= ap_const_lv5_2;
        else 
            grp_fu_163_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_163_p0_assign_proc : process(edge_p1_y, p_a_5_reg_1392, ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_163_p0 <= p_a_5_reg_1392;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_163_p0 <= edge_p1_y;
        else 
            grp_fu_163_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_163_p1_assign_proc : process(edge_p2_y, reg_222, ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_163_p1 <= reg_222;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_163_p1 <= edge_p2_y;
        else 
            grp_fu_163_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_167_opcode_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_167_opcode <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_167_opcode <= ap_const_lv5_4;
        else 
            grp_fu_167_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_167_p0_assign_proc : process(edge_p1_z, p_a_4_reg_1386, ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_167_p0 <= p_a_4_reg_1386;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_167_p0 <= edge_p1_z;
        else 
            grp_fu_167_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_167_p1_assign_proc : process(edge_p2_z, reg_222, ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_167_p1 <= reg_222;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_167_p1 <= edge_p2_z;
        else 
            grp_fu_167_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_171_opcode_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_171_opcode <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_171_opcode <= ap_const_lv5_2;
        else 
            grp_fu_171_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_171_p0_assign_proc : process(edge_p1_z, reg_191, ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_171_p0 <= reg_191;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_171_p0 <= edge_p1_z;
        else 
            grp_fu_171_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_171_p1_assign_proc : process(edge_p2_z, face_x, ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_171_p1 <= face_x;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_171_p1 <= edge_p2_z;
        else 
            grp_fu_171_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_88_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state12, ap_CS_fsm_state27, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_88_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_88_opcode <= ap_const_lv2_0;
        else 
            grp_fu_88_opcode <= "XX";
        end if; 
    end process;


    grp_fu_88_p0_assign_proc : process(ap_CS_fsm_state1, edge_p2_x, edge_p2_z, face_x, reg_191, reg_234, ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state12, ap_CS_fsm_state27, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_88_p0 <= reg_191;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_88_p0 <= edge_p2_z;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_88_p0 <= edge_p2_x;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_88_p0 <= reg_234;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_88_p0 <= face_x;
        else 
            grp_fu_88_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_88_p1_assign_proc : process(ap_CS_fsm_state1, edge_p1_x, edge_p1_z, reg_206, reg_234, reg_241, Q_x_reg_1230, ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state12, ap_CS_fsm_state27, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_88_p1 <= reg_206;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_88_p1 <= reg_234;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_88_p1 <= edge_p1_z;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_88_p1 <= edge_p1_x;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_88_p1 <= reg_241;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_88_p1 <= Q_x_reg_1230;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_88_p1 <= ap_const_lv32_3F800000;
        else 
            grp_fu_88_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_94_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state12, ap_CS_fsm_state27, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_94_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_94_opcode <= ap_const_lv2_0;
        else 
            grp_fu_94_opcode <= "XX";
        end if; 
    end process;


    grp_fu_94_p0_assign_proc : process(ap_CS_fsm_state1, edge_p2_y, face_y, reg_206, reg_222, reg_241, reg_248, ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state12, ap_CS_fsm_state27, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_94_p0 <= reg_241;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_94_p0 <= reg_222;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_94_p0 <= reg_206;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_94_p0 <= edge_p2_y;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_94_p0 <= reg_248;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_94_p0 <= face_y;
        else 
            grp_fu_94_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_94_p1_assign_proc : process(ap_CS_fsm_state1, edge_p1_y, face_y, reg_234, reg_241, reg_254, ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state12, ap_CS_fsm_state27, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_94_p1 <= reg_234;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_94_p1 <= reg_241;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_94_p1 <= edge_p1_y;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_94_p1 <= reg_254;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_94_p1 <= face_y;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_94_p1 <= ap_const_lv32_3F800000;
        else 
            grp_fu_94_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln54_1_fu_300_p2 <= "1" when (trunc_ln54_fu_273_p1 = ap_const_lv23_0) else "0";
    icmp_ln54_2_fu_312_p2 <= "0" when (tmp_1_fu_280_p4 = ap_const_lv8_FF) else "1";
    icmp_ln54_3_fu_318_p2 <= "1" when (trunc_ln54_1_fu_290_p1 = ap_const_lv23_0) else "0";
    icmp_ln54_4_fu_595_p2 <= "0" when (tmp_3_fu_563_p4 = ap_const_lv8_FF) else "1";
    icmp_ln54_5_fu_601_p2 <= "1" when (trunc_ln54_2_fu_573_p1 = ap_const_lv23_0) else "0";
    icmp_ln54_6_fu_607_p2 <= "0" when (tmp_4_fu_581_p4 = ap_const_lv8_FF) else "1";
    icmp_ln54_7_fu_613_p2 <= "1" when (trunc_ln54_3_fu_591_p1 = ap_const_lv23_0) else "0";
    icmp_ln54_8_fu_642_p2 <= "0" when (tmp_9_fu_628_p4 = ap_const_lv8_FF) else "1";
    icmp_ln54_9_fu_648_p2 <= "1" when (trunc_ln54_4_fu_638_p1 = ap_const_lv23_0) else "0";
    icmp_ln54_fu_294_p2 <= "0" when (tmp_fu_263_p4 = ap_const_lv8_FF) else "1";
    icmp_ln55_1_fu_400_p2 <= "1" when (trunc_ln55_fu_373_p1 = ap_const_lv23_0) else "0";
    icmp_ln55_2_fu_412_p2 <= "0" when (tmp_7_fu_380_p4 = ap_const_lv8_FF) else "1";
    icmp_ln55_3_fu_418_p2 <= "1" when (trunc_ln55_1_fu_390_p1 = ap_const_lv23_0) else "0";
    icmp_ln55_4_fu_689_p2 <= "0" when (tmp_11_fu_657_p4 = ap_const_lv8_FF) else "1";
    icmp_ln55_5_fu_695_p2 <= "1" when (trunc_ln55_2_fu_667_p1 = ap_const_lv23_0) else "0";
    icmp_ln55_6_fu_701_p2 <= "0" when (tmp_12_fu_675_p4 = ap_const_lv8_FF) else "1";
    icmp_ln55_7_fu_707_p2 <= "1" when (trunc_ln55_3_fu_685_p1 = ap_const_lv23_0) else "0";
    icmp_ln55_fu_394_p2 <= "0" when (tmp_6_fu_363_p4 = ap_const_lv8_FF) else "1";
    icmp_ln56_1_fu_500_p2 <= "1" when (trunc_ln56_fu_473_p1 = ap_const_lv23_0) else "0";
    icmp_ln56_2_fu_512_p2 <= "0" when (tmp_16_fu_480_p4 = ap_const_lv8_FF) else "1";
    icmp_ln56_3_fu_518_p2 <= "1" when (trunc_ln56_1_fu_490_p1 = ap_const_lv23_0) else "0";
    icmp_ln56_4_fu_754_p2 <= "0" when (tmp_19_fu_722_p4 = ap_const_lv8_FF) else "1";
    icmp_ln56_5_fu_760_p2 <= "1" when (trunc_ln56_2_fu_732_p1 = ap_const_lv23_0) else "0";
    icmp_ln56_6_fu_766_p2 <= "0" when (tmp_20_fu_740_p4 = ap_const_lv8_FF) else "1";
    icmp_ln56_7_fu_772_p2 <= "1" when (trunc_ln56_3_fu_750_p1 = ap_const_lv23_0) else "0";
    icmp_ln56_8_fu_801_p2 <= "0" when (tmp_22_fu_787_p4 = ap_const_lv8_FF) else "1";
    icmp_ln56_9_fu_807_p2 <= "1" when (trunc_ln56_4_fu_797_p1 = ap_const_lv23_0) else "0";
    icmp_ln56_fu_494_p2 <= "0" when (tmp_15_fu_463_p4 = ap_const_lv8_FF) else "1";
    icmp_ln61_1_fu_836_p2 <= "1" when (trunc_ln61_fu_826_p1 = ap_const_lv23_0) else "0";
    icmp_ln61_2_fu_859_p2 <= "0" when (tmp_26_fu_845_p4 = ap_const_lv8_FF) else "1";
    icmp_ln61_3_fu_865_p2 <= "1" when (trunc_ln61_1_fu_855_p1 = ap_const_lv23_0) else "0";
    icmp_ln61_4_fu_888_p2 <= "0" when (tmp_28_fu_874_p4 = ap_const_lv8_FF) else "1";
    icmp_ln61_5_fu_894_p2 <= "1" when (trunc_ln61_2_fu_884_p1 = ap_const_lv23_0) else "0";
    icmp_ln61_6_fu_917_p2 <= "0" when (tmp_30_fu_903_p4 = ap_const_lv8_FF) else "1";
    icmp_ln61_7_fu_923_p2 <= "1" when (trunc_ln61_3_fu_913_p1 = ap_const_lv23_0) else "0";
    icmp_ln61_fu_830_p2 <= "0" when (tmp_24_fu_816_p4 = ap_const_lv8_FF) else "1";
    icmp_ln99_1_fu_952_p2 <= "1" when (trunc_ln99_fu_942_p1 = ap_const_lv23_0) else "0";
    icmp_ln99_fu_946_p2 <= "0" when (tmp_32_fu_932_p4 = ap_const_lv8_FF) else "1";
    or_ln54_1_fu_324_p2 <= (icmp_ln54_3_fu_318_p2 or icmp_ln54_2_fu_312_p2);
    or_ln54_2_fu_958_p2 <= (icmp_ln54_5_reg_1403 or icmp_ln54_4_reg_1398);
    or_ln54_3_fu_619_p2 <= (icmp_ln54_7_fu_613_p2 or icmp_ln54_6_fu_607_p2);
    or_ln54_4_fu_979_p2 <= (icmp_ln54_9_reg_1421 or icmp_ln54_8_reg_1416);
    or_ln54_5_fu_1036_p2 <= (xor_ln54_fu_973_p2 or and_ln54_6_fu_988_p2);
    or_ln54_6_fu_1042_p2 <= (xor_ln54_fu_973_p2 or xor_ln54_1_fu_994_p2);
    or_ln54_fu_306_p2 <= (icmp_ln54_fu_294_p2 or icmp_ln54_1_fu_300_p2);
    or_ln55_1_fu_424_p2 <= (icmp_ln55_3_fu_418_p2 or icmp_ln55_2_fu_412_p2);
    or_ln55_2_fu_1000_p2 <= (icmp_ln55_5_reg_1431 or icmp_ln55_4_reg_1426);
    or_ln55_3_fu_713_p2 <= (icmp_ln55_7_fu_707_p2 or icmp_ln55_6_fu_701_p2);
    or_ln55_4_fu_1048_p2 <= (or_ln54_6_fu_1042_p2 or and_ln55_3_fu_1009_p2);
    or_ln55_5_fu_1054_p2 <= (xor_ln55_fu_1015_p2 or or_ln54_6_fu_1042_p2);
    or_ln55_fu_406_p2 <= (icmp_ln55_fu_394_p2 or icmp_ln55_1_fu_400_p2);
    or_ln56_1_fu_524_p2 <= (icmp_ln56_3_fu_518_p2 or icmp_ln56_2_fu_512_p2);
    or_ln56_2_fu_1021_p2 <= (icmp_ln56_5_reg_1449 or icmp_ln56_4_reg_1444);
    or_ln56_3_fu_778_p2 <= (icmp_ln56_7_fu_772_p2 or icmp_ln56_6_fu_766_p2);
    or_ln56_4_fu_1060_p2 <= (icmp_ln56_9_reg_1465 or icmp_ln56_8_reg_1460);
    or_ln56_fu_506_p2 <= (icmp_ln56_fu_494_p2 or icmp_ln56_1_fu_500_p2);
    or_ln61_1_fu_1090_p2 <= (icmp_ln61_3_reg_1485 or icmp_ln61_2_reg_1480);
    or_ln61_2_fu_1105_p2 <= (icmp_ln61_5_reg_1495 or icmp_ln61_4_reg_1490);
    or_ln61_3_fu_1120_p2 <= (icmp_ln61_7_reg_1505 or icmp_ln61_6_reg_1500);
    or_ln61_fu_1075_p2 <= (icmp_ln61_reg_1470 or icmp_ln61_1_reg_1475);
    or_ln99_1_fu_1192_p2 <= (or_ln55_5_fu_1054_p2 or and_ln99_6_fu_1186_p2);
    or_ln99_fu_1171_p2 <= (icmp_ln99_reg_1510 or icmp_ln99_1_reg_1515);
    p_a_1_fu_354_p3 <= 
        edge_p1_x when (and_ln54_4_fu_348_p2(0) = '1') else 
        edge_p2_x;
    p_a_2_fu_442_p3 <= 
        edge_p1_y when (and_ln55_1_fu_436_p2(0) = '1') else 
        edge_p2_y;
    p_a_3_fu_454_p3 <= 
        edge_p1_y when (and_ln55_4_fu_448_p2(0) = '1') else 
        edge_p2_y;
    p_a_4_fu_542_p3 <= 
        edge_p1_z when (and_ln56_1_fu_536_p2(0) = '1') else 
        edge_p2_z;
    p_a_5_fu_554_p3 <= 
        edge_p1_z when (and_ln56_2_fu_548_p2(0) = '1') else 
        edge_p2_z;
    p_a_fu_342_p3 <= 
        edge_p1_x when (and_ln54_1_fu_336_p2(0) = '1') else 
        edge_p2_x;
    tmp_11_fu_657_p4 <= bitcast_ln55_2_fu_654_p1(30 downto 23);
    tmp_12_fu_675_p4 <= bitcast_ln55_3_fu_671_p1(30 downto 23);
    tmp_15_fu_463_p4 <= bitcast_ln56_fu_460_p1(30 downto 23);
    tmp_16_fu_480_p4 <= bitcast_ln56_1_fu_477_p1(30 downto 23);
    tmp_19_fu_722_p4 <= bitcast_ln56_2_fu_719_p1(30 downto 23);
    tmp_1_fu_280_p4 <= bitcast_ln54_1_fu_277_p1(30 downto 23);
    tmp_20_fu_740_p4 <= bitcast_ln56_3_fu_736_p1(30 downto 23);
    tmp_22_fu_787_p4 <= bitcast_ln56_4_fu_784_p1(30 downto 23);
    tmp_24_fu_816_p4 <= bitcast_ln61_fu_813_p1(30 downto 23);
    tmp_26_fu_845_p4 <= bitcast_ln61_1_fu_842_p1(30 downto 23);
    tmp_28_fu_874_p4 <= bitcast_ln61_2_fu_871_p1(30 downto 23);
    tmp_30_fu_903_p4 <= bitcast_ln61_3_fu_900_p1(30 downto 23);
    tmp_32_fu_932_p4 <= bitcast_ln99_fu_929_p1(30 downto 23);
    tmp_3_fu_563_p4 <= bitcast_ln54_2_fu_560_p1(30 downto 23);
    tmp_4_fu_581_p4 <= bitcast_ln54_3_fu_577_p1(30 downto 23);
    tmp_6_fu_363_p4 <= bitcast_ln55_fu_360_p1(30 downto 23);
    tmp_7_fu_380_p4 <= bitcast_ln55_1_fu_377_p1(30 downto 23);
    tmp_9_fu_628_p4 <= bitcast_ln54_4_fu_625_p1(30 downto 23);
    tmp_fu_263_p4 <= bitcast_ln54_fu_260_p1(30 downto 23);
    trunc_ln54_1_fu_290_p1 <= bitcast_ln54_1_fu_277_p1(23 - 1 downto 0);
    trunc_ln54_2_fu_573_p1 <= bitcast_ln54_2_fu_560_p1(23 - 1 downto 0);
    trunc_ln54_3_fu_591_p1 <= bitcast_ln54_3_fu_577_p1(23 - 1 downto 0);
    trunc_ln54_4_fu_638_p1 <= bitcast_ln54_4_fu_625_p1(23 - 1 downto 0);
    trunc_ln54_fu_273_p1 <= bitcast_ln54_fu_260_p1(23 - 1 downto 0);
    trunc_ln55_1_fu_390_p1 <= bitcast_ln55_1_fu_377_p1(23 - 1 downto 0);
    trunc_ln55_2_fu_667_p1 <= bitcast_ln55_2_fu_654_p1(23 - 1 downto 0);
    trunc_ln55_3_fu_685_p1 <= bitcast_ln55_3_fu_671_p1(23 - 1 downto 0);
    trunc_ln55_fu_373_p1 <= bitcast_ln55_fu_360_p1(23 - 1 downto 0);
    trunc_ln56_1_fu_490_p1 <= bitcast_ln56_1_fu_477_p1(23 - 1 downto 0);
    trunc_ln56_2_fu_732_p1 <= bitcast_ln56_2_fu_719_p1(23 - 1 downto 0);
    trunc_ln56_3_fu_750_p1 <= bitcast_ln56_3_fu_736_p1(23 - 1 downto 0);
    trunc_ln56_4_fu_797_p1 <= bitcast_ln56_4_fu_784_p1(23 - 1 downto 0);
    trunc_ln56_fu_473_p1 <= bitcast_ln56_fu_460_p1(23 - 1 downto 0);
    trunc_ln61_1_fu_855_p1 <= bitcast_ln61_1_fu_842_p1(23 - 1 downto 0);
    trunc_ln61_2_fu_884_p1 <= bitcast_ln61_2_fu_871_p1(23 - 1 downto 0);
    trunc_ln61_3_fu_913_p1 <= bitcast_ln61_3_fu_900_p1(23 - 1 downto 0);
    trunc_ln61_fu_826_p1 <= bitcast_ln61_fu_813_p1(23 - 1 downto 0);
    trunc_ln99_fu_942_p1 <= bitcast_ln99_fu_929_p1(23 - 1 downto 0);
    xor_ln54_1_fu_994_p2 <= (ap_const_lv1_1 xor and_ln54_6_fu_988_p2);
    xor_ln54_fu_973_p2 <= (ap_const_lv1_1 xor and_ln54_3_fu_967_p2);
    xor_ln55_fu_1015_p2 <= (ap_const_lv1_1 xor and_ln55_3_fu_1009_p2);
end behav;
