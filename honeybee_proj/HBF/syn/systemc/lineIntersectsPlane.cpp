// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "lineIntersectsPlane.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic lineIntersectsPlane::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic lineIntersectsPlane::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state1 = "1";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state2 = "10";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state3 = "100";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state4 = "1000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state5 = "10000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state6 = "100000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state7 = "1000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state8 = "10000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state9 = "100000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state10 = "1000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state11 = "10000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state12 = "100000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<45> lineIntersectsPlane::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_3 = "11";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_A = "1010";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_11 = "10001";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_15 = "10101";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_19 = "11001";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_6 = "110";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_D = "1101";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_28 = "101000";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_7 = "111";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_B = "1011";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_E = "1110";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_12 = "10010";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_25 = "100101";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_16 = "10110";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_29 = "101001";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_4 = "100";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_F = "1111";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_26 = "100110";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_1A = "11010";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_80000000 = "10000000000000000000000000000000";
const sc_lv<32> lineIntersectsPlane::ap_const_lv32_2C = "101100";
const sc_lv<2> lineIntersectsPlane::ap_const_lv2_0 = "00";
const sc_lv<2> lineIntersectsPlane::ap_const_lv2_1 = "1";
const bool lineIntersectsPlane::ap_const_boolean_1 = true;

lineIntersectsPlane::lineIntersectsPlane(sc_module_name name) : sc_module(name), mVcdFile(0) {
    honeybee_faddfsubbkb_U1 = new honeybee_faddfsubbkb<1,4,32,32,32>("honeybee_faddfsubbkb_U1");
    honeybee_faddfsubbkb_U1->clk(ap_clk);
    honeybee_faddfsubbkb_U1->reset(ap_rst);
    honeybee_faddfsubbkb_U1->din0(grp_fu_64_p0);
    honeybee_faddfsubbkb_U1->din1(grp_fu_64_p1);
    honeybee_faddfsubbkb_U1->opcode(grp_fu_64_opcode);
    honeybee_faddfsubbkb_U1->ce(ap_var_for_const0);
    honeybee_faddfsubbkb_U1->dout(grp_fu_64_p2);
    honeybee_faddfsubbkb_U2 = new honeybee_faddfsubbkb<1,4,32,32,32>("honeybee_faddfsubbkb_U2");
    honeybee_faddfsubbkb_U2->clk(ap_clk);
    honeybee_faddfsubbkb_U2->reset(ap_rst);
    honeybee_faddfsubbkb_U2->din0(grp_fu_72_p0);
    honeybee_faddfsubbkb_U2->din1(grp_fu_72_p1);
    honeybee_faddfsubbkb_U2->opcode(grp_fu_72_opcode);
    honeybee_faddfsubbkb_U2->ce(ap_var_for_const0);
    honeybee_faddfsubbkb_U2->dout(grp_fu_72_p2);
    honeybee_fadd_32ncud_U3 = new honeybee_fadd_32ncud<1,4,32,32,32>("honeybee_fadd_32ncud_U3");
    honeybee_fadd_32ncud_U3->clk(ap_clk);
    honeybee_fadd_32ncud_U3->reset(ap_rst);
    honeybee_fadd_32ncud_U3->din0(grp_fu_79_p0);
    honeybee_fadd_32ncud_U3->din1(grp_fu_79_p1);
    honeybee_fadd_32ncud_U3->ce(ap_var_for_const0);
    honeybee_fadd_32ncud_U3->dout(grp_fu_79_p2);
    honeybee_fsub_32ndEe_U4 = new honeybee_fsub_32ndEe<1,4,32,32,32>("honeybee_fsub_32ndEe_U4");
    honeybee_fsub_32ndEe_U4->clk(ap_clk);
    honeybee_fsub_32ndEe_U4->reset(ap_rst);
    honeybee_fsub_32ndEe_U4->din0(edge_p2_z);
    honeybee_fsub_32ndEe_U4->din1(edge_p1_z);
    honeybee_fsub_32ndEe_U4->ce(ap_var_for_const0);
    honeybee_fsub_32ndEe_U4->dout(grp_fu_83_p2);
    honeybee_fmul_32neOg_U5 = new honeybee_fmul_32neOg<1,3,32,32,32>("honeybee_fmul_32neOg_U5");
    honeybee_fmul_32neOg_U5->clk(ap_clk);
    honeybee_fmul_32neOg_U5->reset(ap_rst);
    honeybee_fmul_32neOg_U5->din0(grp_fu_89_p0);
    honeybee_fmul_32neOg_U5->din1(grp_fu_89_p1);
    honeybee_fmul_32neOg_U5->ce(ap_var_for_const0);
    honeybee_fmul_32neOg_U5->dout(grp_fu_89_p2);
    honeybee_fmul_32neOg_U6 = new honeybee_fmul_32neOg<1,3,32,32,32>("honeybee_fmul_32neOg_U6");
    honeybee_fmul_32neOg_U6->clk(ap_clk);
    honeybee_fmul_32neOg_U6->reset(ap_rst);
    honeybee_fmul_32neOg_U6->din0(grp_fu_94_p0);
    honeybee_fmul_32neOg_U6->din1(grp_fu_94_p1);
    honeybee_fmul_32neOg_U6->ce(ap_var_for_const0);
    honeybee_fmul_32neOg_U6->dout(grp_fu_94_p2);
    honeybee_fmul_32neOg_U7 = new honeybee_fmul_32neOg<1,3,32,32,32>("honeybee_fmul_32neOg_U7");
    honeybee_fmul_32neOg_U7->clk(ap_clk);
    honeybee_fmul_32neOg_U7->reset(ap_rst);
    honeybee_fmul_32neOg_U7->din0(grp_fu_99_p0);
    honeybee_fmul_32neOg_U7->din1(grp_fu_99_p1);
    honeybee_fmul_32neOg_U7->ce(ap_var_for_const0);
    honeybee_fmul_32neOg_U7->dout(grp_fu_99_p2);
    honeybee_fdiv_32nfYi_U8 = new honeybee_fdiv_32nfYi<1,12,32,32,32>("honeybee_fdiv_32nfYi_U8");
    honeybee_fdiv_32nfYi_U8->clk(ap_clk);
    honeybee_fdiv_32nfYi_U8->reset(ap_rst);
    honeybee_fdiv_32nfYi_U8->din0(reg_108);
    honeybee_fdiv_32nfYi_U8->din1(reg_138);
    honeybee_fdiv_32nfYi_U8->ce(ap_var_for_const0);
    honeybee_fdiv_32nfYi_U8->dout(grp_fu_104_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( grp_fu_64_p2 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( grp_fu_72_p2 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( grp_fu_79_p2 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_2_preg );

    SC_METHOD(thread_bitcast_ln20_1_fu_155_p1);
    sensitive << ( xor_ln20_reg_183 );

    SC_METHOD(thread_bitcast_ln20_fu_145_p1);
    sensitive << ( reg_108 );

    SC_METHOD(thread_grp_fu_64_opcode);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_grp_fu_64_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( edge_p2_x );
    sensitive << ( plane );
    sensitive << ( reg_108 );
    sensitive << ( reg_119 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_grp_fu_64_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( edge_p1_x );
    sensitive << ( plane );
    sensitive << ( reg_119 );
    sensitive << ( reg_138 );
    sensitive << ( bitcast_ln20_1_fu_155_p1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_grp_fu_72_opcode);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_grp_fu_72_p0);
    sensitive << ( edge_p2_y );
    sensitive << ( reg_126 );
    sensitive << ( reg_138 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( tmp_23_i_reg_237 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_grp_fu_72_p1);
    sensitive << ( edge_p1_y );
    sensitive << ( edge_p1_z );
    sensitive << ( reg_132 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( tmp_24_i_reg_242 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_grp_fu_79_p0);
    sensitive << ( reg_119 );
    sensitive << ( reg_132 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_grp_fu_79_p1);
    sensitive << ( edge_p1_z );
    sensitive << ( reg_126 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_grp_fu_89_p0);
    sensitive << ( reg_108 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_19_i_reg_215 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_grp_fu_89_p1);
    sensitive << ( reg_108 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( T_reg_248 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_grp_fu_94_p0);
    sensitive << ( reg_108 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_21_i_reg_220 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_grp_fu_94_p1);
    sensitive << ( edge_p1_x );
    sensitive << ( reg_108 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( T_reg_248 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_grp_fu_99_p0);
    sensitive << ( reg_108 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_24_i_reg_242 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_grp_fu_99_p1);
    sensitive << ( edge_p1_y );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( T_reg_248 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_xor_ln20_fu_149_p2);
    sensitive << ( bitcast_ln20_fu_145_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000000000000000000000000000000001";
    ap_return_0_preg = "00000000000000000000000000000000";
    ap_return_1_preg = "00000000000000000000000000000000";
    ap_return_2_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "lineIntersectsPlane_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, edge_p1_x, "(port)edge_p1_x");
    sc_trace(mVcdFile, edge_p1_y, "(port)edge_p1_y");
    sc_trace(mVcdFile, edge_p1_z, "(port)edge_p1_z");
    sc_trace(mVcdFile, edge_p2_x, "(port)edge_p2_x");
    sc_trace(mVcdFile, edge_p2_y, "(port)edge_p2_y");
    sc_trace(mVcdFile, edge_p2_z, "(port)edge_p2_z");
    sc_trace(mVcdFile, plane, "(port)plane");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_64_p2, "grp_fu_64_p2");
    sc_trace(mVcdFile, reg_108, "reg_108");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, grp_fu_89_p2, "grp_fu_89_p2");
    sc_trace(mVcdFile, reg_119, "reg_119");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, grp_fu_94_p2, "grp_fu_94_p2");
    sc_trace(mVcdFile, reg_126, "reg_126");
    sc_trace(mVcdFile, grp_fu_99_p2, "grp_fu_99_p2");
    sc_trace(mVcdFile, reg_132, "reg_132");
    sc_trace(mVcdFile, grp_fu_72_p2, "grp_fu_72_p2");
    sc_trace(mVcdFile, reg_138, "reg_138");
    sc_trace(mVcdFile, xor_ln20_fu_149_p2, "xor_ln20_fu_149_p2");
    sc_trace(mVcdFile, xor_ln20_reg_183, "xor_ln20_reg_183");
    sc_trace(mVcdFile, bitcast_ln20_1_fu_155_p1, "bitcast_ln20_1_fu_155_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, tmp_19_i_reg_215, "tmp_19_i_reg_215");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, tmp_21_i_reg_220, "tmp_21_i_reg_220");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, grp_fu_79_p2, "grp_fu_79_p2");
    sc_trace(mVcdFile, tmp_23_i_reg_237, "tmp_23_i_reg_237");
    sc_trace(mVcdFile, grp_fu_83_p2, "grp_fu_83_p2");
    sc_trace(mVcdFile, tmp_24_i_reg_242, "tmp_24_i_reg_242");
    sc_trace(mVcdFile, grp_fu_104_p2, "grp_fu_104_p2");
    sc_trace(mVcdFile, T_reg_248, "T_reg_248");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, grp_fu_64_p0, "grp_fu_64_p0");
    sc_trace(mVcdFile, grp_fu_64_p1, "grp_fu_64_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, grp_fu_72_p0, "grp_fu_72_p0");
    sc_trace(mVcdFile, grp_fu_72_p1, "grp_fu_72_p1");
    sc_trace(mVcdFile, grp_fu_79_p0, "grp_fu_79_p0");
    sc_trace(mVcdFile, grp_fu_79_p1, "grp_fu_79_p1");
    sc_trace(mVcdFile, grp_fu_89_p0, "grp_fu_89_p0");
    sc_trace(mVcdFile, grp_fu_89_p1, "grp_fu_89_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, grp_fu_94_p0, "grp_fu_94_p0");
    sc_trace(mVcdFile, grp_fu_94_p1, "grp_fu_94_p1");
    sc_trace(mVcdFile, grp_fu_99_p0, "grp_fu_99_p0");
    sc_trace(mVcdFile, grp_fu_99_p1, "grp_fu_99_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, bitcast_ln20_fu_145_p1, "bitcast_ln20_fu_145_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, grp_fu_64_opcode, "grp_fu_64_opcode");
    sc_trace(mVcdFile, grp_fu_72_opcode, "grp_fu_72_opcode");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_return_2_preg, "ap_return_2_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

lineIntersectsPlane::~lineIntersectsPlane() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete honeybee_faddfsubbkb_U1;
    delete honeybee_faddfsubbkb_U2;
    delete honeybee_fadd_32ncud_U3;
    delete honeybee_fsub_32ndEe_U4;
    delete honeybee_fmul_32neOg_U5;
    delete honeybee_fmul_32neOg_U6;
    delete honeybee_fmul_32neOg_U7;
    delete honeybee_fdiv_32nfYi_U8;
}

void lineIntersectsPlane::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void lineIntersectsPlane::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_0_preg = grp_fu_64_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_1_preg = grp_fu_72_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_2_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_2_preg = grp_fu_79_p2.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        T_reg_248 = grp_fu_104_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        reg_108 = grp_fu_64_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        reg_119 = grp_fu_89_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        reg_126 = grp_fu_94_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        reg_132 = grp_fu_99_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        reg_138 = grp_fu_72_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        tmp_19_i_reg_215 = grp_fu_64_p2.read();
        tmp_21_i_reg_220 = grp_fu_72_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        tmp_23_i_reg_237 = grp_fu_79_p2.read();
        tmp_24_i_reg_242 = grp_fu_83_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        xor_ln20_reg_183 = xor_ln20_fu_149_p2.read();
    }
}

void lineIntersectsPlane::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[44];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void lineIntersectsPlane::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void lineIntersectsPlane::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void lineIntersectsPlane::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void lineIntersectsPlane::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void lineIntersectsPlane::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_0 = grp_fu_64_p2.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void lineIntersectsPlane::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_1 = grp_fu_72_p2.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void lineIntersectsPlane::thread_ap_return_2() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_2 = grp_fu_79_p2.read();
    } else {
        ap_return_2 = ap_return_2_preg.read();
    }
}

void lineIntersectsPlane::thread_bitcast_ln20_1_fu_155_p1() {
    bitcast_ln20_1_fu_155_p1 = xor_ln20_reg_183.read();
}

void lineIntersectsPlane::thread_bitcast_ln20_fu_145_p1() {
    bitcast_ln20_fu_145_p1 = reg_108.read();
}

void lineIntersectsPlane::thread_grp_fu_64_opcode() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        grp_fu_64_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        grp_fu_64_opcode = ap_const_lv2_0;
    } else {
        grp_fu_64_opcode = "XX";
    }
}

void lineIntersectsPlane::thread_grp_fu_64_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        grp_fu_64_p0 = reg_108.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_64_p0 = edge_p2_x.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        grp_fu_64_p0 = reg_119.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_fu_64_p0 = plane.read();
    } else {
        grp_fu_64_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void lineIntersectsPlane::thread_grp_fu_64_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_fu_64_p1 = reg_138.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_fu_64_p1 = reg_119.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        grp_fu_64_p1 = edge_p1_x.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_64_p1 = bitcast_ln20_1_fu_155_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        grp_fu_64_p1 = plane.read();
    } else {
        grp_fu_64_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void lineIntersectsPlane::thread_grp_fu_72_opcode() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_72_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        grp_fu_72_opcode = ap_const_lv2_0;
    } else {
        grp_fu_72_opcode = "XX";
    }
}

void lineIntersectsPlane::thread_grp_fu_72_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_fu_72_p0 = tmp_23_i_reg_237.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        grp_fu_72_p0 = reg_138.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        grp_fu_72_p0 = reg_126.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_72_p0 = edge_p2_y.read();
    } else {
        grp_fu_72_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void lineIntersectsPlane::thread_grp_fu_72_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_fu_72_p1 = tmp_24_i_reg_242.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        grp_fu_72_p1 = edge_p1_z.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_fu_72_p1 = reg_132.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        grp_fu_72_p1 = edge_p1_y.read();
    } else {
        grp_fu_72_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void lineIntersectsPlane::thread_grp_fu_79_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        grp_fu_79_p0 = reg_132.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        grp_fu_79_p0 = reg_119.read();
    } else {
        grp_fu_79_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void lineIntersectsPlane::thread_grp_fu_79_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        grp_fu_79_p1 = edge_p1_z.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        grp_fu_79_p1 = reg_126.read();
    } else {
        grp_fu_79_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void lineIntersectsPlane::thread_grp_fu_89_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()))) {
        grp_fu_89_p0 = tmp_19_i_reg_215.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        grp_fu_89_p0 = reg_108.read();
    } else {
        grp_fu_89_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void lineIntersectsPlane::thread_grp_fu_89_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        grp_fu_89_p1 = T_reg_248.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_fu_89_p1 = reg_108.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        grp_fu_89_p1 = ap_const_lv32_0;
    } else {
        grp_fu_89_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void lineIntersectsPlane::thread_grp_fu_94_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()))) {
        grp_fu_94_p0 = tmp_21_i_reg_220.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_94_p0 = reg_108.read();
    } else {
        grp_fu_94_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void lineIntersectsPlane::thread_grp_fu_94_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        grp_fu_94_p1 = T_reg_248.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_fu_94_p1 = reg_108.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_94_p1 = edge_p1_x.read();
    } else {
        grp_fu_94_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void lineIntersectsPlane::thread_grp_fu_99_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        grp_fu_99_p0 = tmp_24_i_reg_242.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_99_p0 = reg_108.read();
    } else {
        grp_fu_99_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void lineIntersectsPlane::thread_grp_fu_99_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        grp_fu_99_p1 = T_reg_248.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_99_p1 = edge_p1_y.read();
    } else {
        grp_fu_99_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void lineIntersectsPlane::thread_xor_ln20_fu_149_p2() {
    xor_ln20_fu_149_p2 = (bitcast_ln20_fu_145_p1.read() ^ ap_const_lv32_80000000);
}

void lineIntersectsPlane::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<45>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

