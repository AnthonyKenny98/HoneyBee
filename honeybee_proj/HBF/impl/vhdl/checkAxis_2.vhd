-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity checkAxis_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of checkAxis_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_40400000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000010000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFF0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111110000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_259 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_lineIntersectsPlane_fu_209_ap_ready : STD_LOGIC;
    signal grp_lineIntersectsPlane_fu_209_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hls_fptosi_float_i_fu_237_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_pointOnSegment_fu_224_ap_ready : STD_LOGIC;
    signal grp_pointOnSegment_fu_224_ap_done : STD_LOGIC;
    signal grp_pointOnSegment_fu_224_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_p_hls_fptosi_float_i_fu_242_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln84_fu_308_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln84_2_fu_348_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_2_reg_856 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_5_fu_372_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_5_reg_861 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_7_fu_388_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_7_reg_866 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_8_fu_396_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_8_reg_871 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_11_fu_420_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_11_reg_876 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_14_fu_444_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_14_reg_881 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_16_fu_460_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_16_reg_886 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_17_fu_468_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_17_reg_891 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_899 : STD_LOGIC_VECTOR (0 downto 0);
    signal collisions_0_fu_565_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_1_reg_908 : STD_LOGIC_VECTOR (0 downto 0);
    signal collisions_1_fu_614_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_2_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal collisions_2_fu_669_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_3_reg_926 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_737_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal returnCollisions_fu_761_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln132_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_lineIntersectsPlane_fu_209_ap_start : STD_LOGIC;
    signal grp_lineIntersectsPlane_fu_209_ap_idle : STD_LOGIC;
    signal grp_lineIntersectsPlane_fu_209_plane : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lineIntersectsPlane_fu_209_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lineIntersectsPlane_fu_209_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lineIntersectsPlane_fu_209_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pointOnSegment_fu_224_ap_start : STD_LOGIC;
    signal grp_pointOnSegment_fu_224_ap_idle : STD_LOGIC;
    signal grp_p_hls_fptosi_float_i_fu_237_ap_ready : STD_LOGIC;
    signal grp_p_hls_fptosi_float_i_fu_242_ap_ready : STD_LOGIC;
    signal phi_ln84_reg_136 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln84_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal collisions_0_2_reg_147 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_1_2_reg_157 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_2_2_reg_167 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_3_fu_724_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_3_2_reg_177 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal returnCollisions_0_reg_187 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_198 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lineIntersectsPlane_fu_209_ap_start_reg : STD_LOGIC := '0';
    signal grp_pointOnSegment_fu_224_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal collisions_load_1_075_fu_68 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_load_1_177_fu_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_load_1_279_fu_76 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_load_1_381_fu_80 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_0_0_fu_84 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_1_0_fu_88 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_2_0_fu_92 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_3_0_fu_96 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln84_1_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_2_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln84_fu_320_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln84_3_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln84_1_fu_334_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_3_fu_356_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_4_fu_364_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_6_fu_380_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_9_fu_404_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_10_fu_412_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_12_fu_428_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_13_fu_436_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_15_fu_452_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln80_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln109_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln80_1_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln110_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln110_fu_554_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln110_fu_560_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln109_fu_538_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln80_1_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_2_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_3_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln109_1_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_1_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln110_1_fu_603_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln110_2_fu_609_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln109_1_fu_593_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln80_2_fu_620_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_4_fu_626_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_5_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln109_2_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln80_6_fu_648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln110_2_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln110_2_fu_658_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln110_4_fu_664_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln109_2_fu_642_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln80_3_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_7_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_8_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln109_3_fu_693_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln80_9_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln110_3_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln110_3_fu_713_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln110_6_fu_719_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln109_3_fu_697_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_747_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_747_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component lineIntersectsPlane IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
        plane : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pointOnSegment IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_x : IN STD_LOGIC_VECTOR (31 downto 0);
        p_y : IN STD_LOGIC_VECTOR (31 downto 0);
        p_z : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component p_hls_fptosi_float_i IS
    port (
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_mux_42_6hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_lineIntersectsPlane_fu_209 : component lineIntersectsPlane
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lineIntersectsPlane_fu_209_ap_start,
        ap_done => grp_lineIntersectsPlane_fu_209_ap_done,
        ap_idle => grp_lineIntersectsPlane_fu_209_ap_idle,
        ap_ready => grp_lineIntersectsPlane_fu_209_ap_ready,
        edge_p1_x => edge_p1_x,
        edge_p1_y => edge_p1_y,
        edge_p1_z => edge_p1_z,
        edge_p2_x => edge_p2_x,
        edge_p2_y => edge_p2_y,
        edge_p2_z => edge_p2_z,
        plane => grp_lineIntersectsPlane_fu_209_plane,
        ap_return_0 => grp_lineIntersectsPlane_fu_209_ap_return_0,
        ap_return_1 => grp_lineIntersectsPlane_fu_209_ap_return_1,
        ap_return_2 => grp_lineIntersectsPlane_fu_209_ap_return_2);

    grp_pointOnSegment_fu_224 : component pointOnSegment
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pointOnSegment_fu_224_ap_start,
        ap_done => grp_pointOnSegment_fu_224_ap_done,
        ap_idle => grp_pointOnSegment_fu_224_ap_idle,
        ap_ready => grp_pointOnSegment_fu_224_ap_ready,
        p_x => reg_259,
        p_y => reg_265,
        p_z => reg_271,
        e_p1_x => edge_p1_x,
        e_p1_y => edge_p1_y,
        e_p1_z => edge_p1_z,
        e_p2_x => edge_p2_x,
        e_p2_y => edge_p2_y,
        e_p2_z => edge_p2_z,
        ap_return => grp_pointOnSegment_fu_224_ap_return);

    grp_p_hls_fptosi_float_i_fu_237 : component p_hls_fptosi_float_i
    port map (
        ap_ready => grp_p_hls_fptosi_float_i_fu_237_ap_ready,
        x => reg_259,
        ap_return => grp_p_hls_fptosi_float_i_fu_237_ap_return);

    grp_p_hls_fptosi_float_i_fu_242 : component p_hls_fptosi_float_i
    port map (
        ap_ready => grp_p_hls_fptosi_float_i_fu_242_ap_ready,
        x => reg_265,
        ap_return => grp_p_hls_fptosi_float_i_fu_242_ap_return);

    honeybee_mux_42_6hbi_U38 : component honeybee_mux_42_6hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => collisions_0_2_reg_147,
        din1 => collisions_1_2_reg_157,
        din2 => collisions_2_2_reg_167,
        din3 => collisions_3_2_reg_177,
        din4 => tmp_fu_747_p5,
        dout => tmp_fu_747_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if (((icmp_ln132_fu_731_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    ap_return_preg <= returnCollisions_0_reg_187;
                end if; 
            end if;
        end if;
    end process;


    grp_lineIntersectsPlane_fu_209_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lineIntersectsPlane_fu_209_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln84_fu_476_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    grp_lineIntersectsPlane_fu_209_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lineIntersectsPlane_fu_209_ap_ready = ap_const_logic_1)) then 
                    grp_lineIntersectsPlane_fu_209_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pointOnSegment_fu_224_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pointOnSegment_fu_224_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_pointOnSegment_fu_224_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pointOnSegment_fu_224_ap_ready = ap_const_logic_1)) then 
                    grp_pointOnSegment_fu_224_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    collisions_0_2_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_224_ap_return = ap_const_lv1_0) and (grp_pointOnSegment_fu_224_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                collisions_0_2_reg_147 <= select_ln84_8_reg_871;
            elsif (((tmp_s_reg_899 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                collisions_0_2_reg_147 <= collisions_0_fu_565_p2;
            end if; 
        end if;
    end process;

    collisions_1_2_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_224_ap_return = ap_const_lv1_0) and (grp_pointOnSegment_fu_224_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                collisions_1_2_reg_157 <= select_ln84_7_reg_866;
            elsif (((tmp_1_reg_908 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                collisions_1_2_reg_157 <= collisions_1_fu_614_p2;
            end if; 
        end if;
    end process;

    collisions_2_2_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_224_ap_return = ap_const_lv1_0) and (grp_pointOnSegment_fu_224_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                collisions_2_2_reg_167 <= select_ln84_5_reg_861;
            elsif (((tmp_2_reg_917 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                collisions_2_2_reg_167 <= collisions_2_fu_669_p2;
            end if; 
        end if;
    end process;

    collisions_3_2_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_224_ap_return = ap_const_lv1_0) and (grp_pointOnSegment_fu_224_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                collisions_3_2_reg_177 <= select_ln84_2_reg_856;
            elsif (((tmp_3_reg_926 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                collisions_3_2_reg_177 <= collisions_3_fu_724_p2;
            end if; 
        end if;
    end process;

    i_1_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_1_reg_198 <= ap_const_lv3_0;
            elsif (((icmp_ln132_fu_731_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i_1_reg_198 <= i_fu_737_p2;
            end if; 
        end if;
    end process;

    phi_ln84_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln84_fu_476_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln84_reg_136 <= add_ln84_fu_308_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln84_reg_136 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    returnCollisions_0_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                returnCollisions_0_reg_187 <= ap_const_lv64_0;
            elsif (((icmp_ln132_fu_731_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                returnCollisions_0_reg_187 <= returnCollisions_fu_761_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                collisions_0_0_fu_84 <= select_ln84_8_fu_396_p3;
                collisions_1_0_fu_88 <= select_ln84_7_fu_388_p3;
                collisions_2_0_fu_92 <= select_ln84_5_fu_372_p3;
                collisions_3_0_fu_96 <= select_ln84_2_fu_348_p3;
                collisions_load_1_075_fu_68 <= select_ln84_17_fu_468_p3;
                collisions_load_1_177_fu_72 <= select_ln84_16_fu_460_p3;
                collisions_load_1_279_fu_76 <= select_ln84_14_fu_444_p3;
                collisions_load_1_381_fu_80 <= select_ln84_11_fu_420_p3;
                select_ln84_11_reg_876 <= select_ln84_11_fu_420_p3;
                select_ln84_14_reg_881 <= select_ln84_14_fu_444_p3;
                select_ln84_16_reg_886 <= select_ln84_16_fu_460_p3;
                select_ln84_17_reg_891 <= select_ln84_17_fu_468_p3;
                select_ln84_2_reg_856 <= select_ln84_2_fu_348_p3;
                select_ln84_5_reg_861 <= select_ln84_5_fu_372_p3;
                select_ln84_7_reg_866 <= select_ln84_7_fu_388_p3;
                select_ln84_8_reg_871 <= select_ln84_8_fu_396_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_lineIntersectsPlane_fu_209_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((grp_lineIntersectsPlane_fu_209_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_lineIntersectsPlane_fu_209_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((grp_lineIntersectsPlane_fu_209_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
                reg_259 <= grp_lineIntersectsPlane_fu_209_ap_return_0;
                reg_265 <= grp_lineIntersectsPlane_fu_209_ap_return_1;
                reg_271 <= grp_lineIntersectsPlane_fu_209_ap_return_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_pointOnSegment_fu_224_ap_return = ap_const_lv1_1) and (grp_pointOnSegment_fu_224_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((grp_pointOnSegment_fu_224_ap_return = ap_const_lv1_1) and (grp_pointOnSegment_fu_224_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((grp_pointOnSegment_fu_224_ap_return = ap_const_lv1_1) and (grp_pointOnSegment_fu_224_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((grp_pointOnSegment_fu_224_ap_return = ap_const_lv1_1) and (grp_pointOnSegment_fu_224_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then
                reg_276 <= grp_p_hls_fptosi_float_i_fu_237_ap_return;
                reg_280 <= grp_p_hls_fptosi_float_i_fu_242_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_224_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_1_reg_908 <= grp_pointOnSegment_fu_224_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_224_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                tmp_2_reg_917 <= grp_pointOnSegment_fu_224_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_224_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                tmp_3_reg_926 <= grp_pointOnSegment_fu_224_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_224_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_s_reg_899 <= grp_pointOnSegment_fu_224_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_lineIntersectsPlane_fu_209_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state5, grp_pointOnSegment_fu_224_ap_done, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_state19, icmp_ln132_fu_731_p2, icmp_ln84_fu_476_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln84_fu_476_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_lineIntersectsPlane_fu_209_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_pointOnSegment_fu_224_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_lineIntersectsPlane_fu_209_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_pointOnSegment_fu_224_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_lineIntersectsPlane_fu_209_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_pointOnSegment_fu_224_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_lineIntersectsPlane_fu_209_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_pointOnSegment_fu_224_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln132_fu_731_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln80_1_fu_544_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFF0) + signed(add_ln80_fu_528_p2));
    add_ln80_2_fu_577_p2 <= std_logic_vector(unsigned(shl_ln80_1_fu_571_p2) + unsigned(reg_276));
    add_ln80_3_fu_583_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) + unsigned(add_ln80_2_fu_577_p2));
    add_ln80_4_fu_626_p2 <= std_logic_vector(unsigned(shl_ln80_2_fu_620_p2) + unsigned(reg_276));
    add_ln80_5_fu_632_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) + unsigned(add_ln80_4_fu_626_p2));
    add_ln80_6_fu_648_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) + unsigned(add_ln80_4_fu_626_p2));
    add_ln80_7_fu_681_p2 <= std_logic_vector(unsigned(shl_ln80_3_fu_675_p2) + unsigned(reg_276));
    add_ln80_8_fu_687_p2 <= std_logic_vector(unsigned(ap_const_lv32_30) + unsigned(add_ln80_7_fu_681_p2));
    add_ln80_9_fu_703_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) + unsigned(add_ln80_7_fu_681_p2));
    add_ln80_fu_528_p2 <= std_logic_vector(unsigned(shl_ln80_fu_522_p2) + unsigned(reg_276));
    add_ln84_fu_308_p2 <= std_logic_vector(unsigned(phi_ln84_reg_136) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19, icmp_ln132_fu_731_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln132_fu_731_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19, icmp_ln132_fu_731_p2)
    begin
        if (((icmp_ln132_fu_731_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state19, icmp_ln132_fu_731_p2, returnCollisions_0_reg_187, ap_return_preg)
    begin
        if (((icmp_ln132_fu_731_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_return <= returnCollisions_0_reg_187;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    collisions_0_fu_565_p2 <= (shl_ln109_fu_538_p2 or or_ln110_fu_560_p2);
    collisions_1_fu_614_p2 <= (shl_ln109_1_fu_593_p2 or or_ln110_2_fu_609_p2);
    collisions_2_fu_669_p2 <= (shl_ln109_2_fu_642_p2 or or_ln110_4_fu_664_p2);
    collisions_3_fu_724_p2 <= (shl_ln109_3_fu_697_p2 or or_ln110_6_fu_719_p2);
    grp_lineIntersectsPlane_fu_209_ap_start <= grp_lineIntersectsPlane_fu_209_ap_start_reg;

    grp_lineIntersectsPlane_fu_209_plane_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_lineIntersectsPlane_fu_209_plane <= ap_const_lv32_40400000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_lineIntersectsPlane_fu_209_plane <= ap_const_lv32_40000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_lineIntersectsPlane_fu_209_plane <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_lineIntersectsPlane_fu_209_plane <= ap_const_lv32_0;
        else 
            grp_lineIntersectsPlane_fu_209_plane <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_pointOnSegment_fu_224_ap_start <= grp_pointOnSegment_fu_224_ap_start_reg;
    i_fu_737_p2 <= std_logic_vector(unsigned(i_1_reg_198) + unsigned(ap_const_lv3_1));
    icmp_ln132_fu_731_p2 <= "1" when (i_1_reg_198 = ap_const_lv3_4) else "0";
    icmp_ln84_1_fu_314_p2 <= "1" when (phi_ln84_reg_136 = ap_const_lv2_2) else "0";
    icmp_ln84_2_fu_328_p2 <= "1" when (phi_ln84_reg_136 = ap_const_lv2_1) else "0";
    icmp_ln84_3_fu_342_p2 <= "1" when (phi_ln84_reg_136 = ap_const_lv2_0) else "0";
    icmp_ln84_fu_476_p2 <= "1" when (phi_ln84_reg_136 = ap_const_lv2_3) else "0";
    or_ln110_2_fu_609_p2 <= (shl_ln110_1_fu_603_p2 or select_ln84_16_reg_886);
    or_ln110_4_fu_664_p2 <= (shl_ln110_2_fu_658_p2 or select_ln84_14_reg_881);
    or_ln110_6_fu_719_p2 <= (shl_ln110_3_fu_713_p2 or select_ln84_11_reg_876);
    or_ln110_fu_560_p2 <= (shl_ln110_fu_554_p2 or select_ln84_17_reg_891);
    returnCollisions_fu_761_p2 <= (tmp_fu_747_p6 or returnCollisions_0_reg_187);
    select_ln84_10_fu_412_p3 <= 
        collisions_load_1_381_fu_80 when (icmp_ln84_2_fu_328_p2(0) = '1') else 
        select_ln84_9_fu_404_p3;
    select_ln84_11_fu_420_p3 <= 
        collisions_load_1_381_fu_80 when (icmp_ln84_3_fu_342_p2(0) = '1') else 
        select_ln84_10_fu_412_p3;
    select_ln84_12_fu_428_p3 <= 
        ap_const_lv64_0 when (icmp_ln84_1_fu_314_p2(0) = '1') else 
        collisions_load_1_279_fu_76;
    select_ln84_13_fu_436_p3 <= 
        collisions_load_1_279_fu_76 when (icmp_ln84_2_fu_328_p2(0) = '1') else 
        select_ln84_12_fu_428_p3;
    select_ln84_14_fu_444_p3 <= 
        collisions_load_1_279_fu_76 when (icmp_ln84_3_fu_342_p2(0) = '1') else 
        select_ln84_13_fu_436_p3;
    select_ln84_15_fu_452_p3 <= 
        ap_const_lv64_0 when (icmp_ln84_2_fu_328_p2(0) = '1') else 
        collisions_load_1_177_fu_72;
    select_ln84_16_fu_460_p3 <= 
        collisions_load_1_177_fu_72 when (icmp_ln84_3_fu_342_p2(0) = '1') else 
        select_ln84_15_fu_452_p3;
    select_ln84_17_fu_468_p3 <= 
        ap_const_lv64_0 when (icmp_ln84_3_fu_342_p2(0) = '1') else 
        collisions_load_1_075_fu_68;
    select_ln84_1_fu_334_p3 <= 
        collisions_3_0_fu_96 when (icmp_ln84_2_fu_328_p2(0) = '1') else 
        select_ln84_fu_320_p3;
    select_ln84_2_fu_348_p3 <= 
        collisions_3_0_fu_96 when (icmp_ln84_3_fu_342_p2(0) = '1') else 
        select_ln84_1_fu_334_p3;
    select_ln84_3_fu_356_p3 <= 
        ap_const_lv64_0 when (icmp_ln84_1_fu_314_p2(0) = '1') else 
        collisions_2_0_fu_92;
    select_ln84_4_fu_364_p3 <= 
        collisions_2_0_fu_92 when (icmp_ln84_2_fu_328_p2(0) = '1') else 
        select_ln84_3_fu_356_p3;
    select_ln84_5_fu_372_p3 <= 
        collisions_2_0_fu_92 when (icmp_ln84_3_fu_342_p2(0) = '1') else 
        select_ln84_4_fu_364_p3;
    select_ln84_6_fu_380_p3 <= 
        ap_const_lv64_0 when (icmp_ln84_2_fu_328_p2(0) = '1') else 
        collisions_1_0_fu_88;
    select_ln84_7_fu_388_p3 <= 
        collisions_1_0_fu_88 when (icmp_ln84_3_fu_342_p2(0) = '1') else 
        select_ln84_6_fu_380_p3;
    select_ln84_8_fu_396_p3 <= 
        ap_const_lv64_0 when (icmp_ln84_3_fu_342_p2(0) = '1') else 
        collisions_0_0_fu_84;
    select_ln84_9_fu_404_p3 <= 
        collisions_load_1_381_fu_80 when (icmp_ln84_1_fu_314_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln84_fu_320_p3 <= 
        collisions_3_0_fu_96 when (icmp_ln84_1_fu_314_p2(0) = '1') else 
        ap_const_lv64_0;
    shl_ln109_1_fu_593_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln109_1_fu_589_p1(31-1 downto 0)))));
    shl_ln109_2_fu_642_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln109_2_fu_638_p1(31-1 downto 0)))));
    shl_ln109_3_fu_697_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln109_3_fu_693_p1(31-1 downto 0)))));
    shl_ln109_fu_538_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln109_fu_534_p1(31-1 downto 0)))));
    shl_ln110_1_fu_603_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln110_1_fu_599_p1(31-1 downto 0)))));
    shl_ln110_2_fu_658_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln110_2_fu_654_p1(31-1 downto 0)))));
    shl_ln110_3_fu_713_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln110_3_fu_709_p1(31-1 downto 0)))));
    shl_ln110_fu_554_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln110_fu_550_p1(31-1 downto 0)))));
    shl_ln80_1_fu_571_p2 <= std_logic_vector(shift_left(unsigned(reg_280),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln80_2_fu_620_p2 <= std_logic_vector(shift_left(unsigned(reg_280),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln80_3_fu_675_p2 <= std_logic_vector(shift_left(unsigned(reg_280),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln80_fu_522_p2 <= std_logic_vector(shift_left(unsigned(reg_280),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_fu_747_p5 <= i_1_reg_198(2 - 1 downto 0);
    zext_ln109_1_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_3_fu_583_p2),64));
    zext_ln109_2_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_5_fu_632_p2),64));
    zext_ln109_3_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_8_fu_687_p2),64));
    zext_ln109_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_fu_528_p2),64));
    zext_ln110_1_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_2_fu_577_p2),64));
    zext_ln110_2_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_6_fu_648_p2),64));
    zext_ln110_3_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_9_fu_703_p2),64));
    zext_ln110_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_1_fu_544_p2),64));
end behav;
