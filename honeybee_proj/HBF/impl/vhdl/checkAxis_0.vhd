-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity checkAxis_0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of checkAxis_0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_40400000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000010000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFC : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_257 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_lineIntersectsPlane_fu_207_ap_ready : STD_LOGIC;
    signal grp_lineIntersectsPlane_fu_207_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hls_fptosi_float_i_fu_235_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_pointOnSegment_fu_222_ap_ready : STD_LOGIC;
    signal grp_pointOnSegment_fu_222_ap_done : STD_LOGIC;
    signal grp_pointOnSegment_fu_222_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_p_hls_fptosi_float_i_fu_240_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln84_fu_306_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln84_36_fu_346_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_36_reg_878 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_39_fu_370_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_39_reg_883 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_41_fu_386_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_41_reg_888 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_42_fu_394_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_42_reg_893 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_45_fu_418_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_45_reg_898 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_48_fu_442_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_48_reg_903 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_50_fu_458_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_50_reg_908 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_51_fu_466_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_51_reg_913 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_921 : STD_LOGIC_VECTOR (0 downto 0);
    signal collisions_0_fu_569_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_42_1_reg_930 : STD_LOGIC_VECTOR (0 downto 0);
    signal collisions_1_fu_624_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_42_2_reg_939 : STD_LOGIC_VECTOR (0 downto 0);
    signal collisions_2_fu_685_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_42_3_reg_948 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_759_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal returnCollisions_fu_783_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln132_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_lineIntersectsPlane_fu_207_ap_start : STD_LOGIC;
    signal grp_lineIntersectsPlane_fu_207_ap_idle : STD_LOGIC;
    signal grp_lineIntersectsPlane_fu_207_plane : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lineIntersectsPlane_fu_207_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lineIntersectsPlane_fu_207_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lineIntersectsPlane_fu_207_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pointOnSegment_fu_222_ap_start : STD_LOGIC;
    signal grp_pointOnSegment_fu_222_ap_idle : STD_LOGIC;
    signal grp_p_hls_fptosi_float_i_fu_235_ap_ready : STD_LOGIC;
    signal grp_p_hls_fptosi_float_i_fu_240_ap_ready : STD_LOGIC;
    signal phi_ln84_reg_134 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln84_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal collisions_0_2_reg_145 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_1_2_reg_155 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_2_2_reg_165 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_3_fu_746_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_3_2_reg_175 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal returnCollisions_0_reg_185 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_196 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lineIntersectsPlane_fu_207_ap_start_reg : STD_LOGIC := '0';
    signal grp_pointOnSegment_fu_222_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal collisions_load_1_075_fu_66 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_load_1_177_fu_70 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_load_1_279_fu_74 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_load_1_381_fu_78 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_0_0_fu_82 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_1_0_fu_86 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_2_0_fu_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal collisions_3_0_fu_94 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln84_7_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_8_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln84_fu_318_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln84_9_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln84_35_fu_332_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_37_fu_354_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_38_fu_362_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_40_fu_378_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_43_fu_402_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_44_fu_410_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_46_fu_426_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_47_fu_434_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_49_fu_450_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln80_fu_520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_fu_526_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln117_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln80_18_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_19_fu_548_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln118_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln118_fu_558_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln118_fu_564_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln117_fu_536_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln80_11_fu_575_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln80_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_20_fu_587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln117_1_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln80_21_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln118_1_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln118_1_fu_613_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln118_2_fu_619_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln117_1_fu_597_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln80_12_fu_630_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln80_5_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_22_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln117_2_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln80_6_fu_658_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_23_fu_664_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln118_2_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln118_2_fu_674_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln118_4_fu_680_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln117_2_fu_652_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln80_13_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln80_7_fu_697_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_24_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln117_3_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln80_8_fu_719_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_25_fu_725_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln118_3_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln118_3_fu_735_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln118_6_fu_741_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln117_3_fu_713_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_769_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_769_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component lineIntersectsPlane IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        edge_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
        plane : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pointOnSegment IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_x : IN STD_LOGIC_VECTOR (31 downto 0);
        p_y : IN STD_LOGIC_VECTOR (31 downto 0);
        p_z : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p1_z : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
        e_p2_z : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component p_hls_fptosi_float_i IS
    port (
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component honeybee_mux_42_6hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_lineIntersectsPlane_fu_207 : component lineIntersectsPlane
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lineIntersectsPlane_fu_207_ap_start,
        ap_done => grp_lineIntersectsPlane_fu_207_ap_done,
        ap_idle => grp_lineIntersectsPlane_fu_207_ap_idle,
        ap_ready => grp_lineIntersectsPlane_fu_207_ap_ready,
        edge_p1_x => edge_p1_x,
        edge_p1_y => edge_p1_y,
        edge_p1_z => edge_p1_z,
        edge_p2_x => edge_p2_x,
        edge_p2_y => edge_p2_y,
        edge_p2_z => edge_p2_z,
        plane => grp_lineIntersectsPlane_fu_207_plane,
        ap_return_0 => grp_lineIntersectsPlane_fu_207_ap_return_0,
        ap_return_1 => grp_lineIntersectsPlane_fu_207_ap_return_1,
        ap_return_2 => grp_lineIntersectsPlane_fu_207_ap_return_2);

    grp_pointOnSegment_fu_222 : component pointOnSegment
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pointOnSegment_fu_222_ap_start,
        ap_done => grp_pointOnSegment_fu_222_ap_done,
        ap_idle => grp_pointOnSegment_fu_222_ap_idle,
        ap_ready => grp_pointOnSegment_fu_222_ap_ready,
        p_x => reg_257,
        p_y => reg_269,
        p_z => reg_263,
        e_p1_x => edge_p1_x,
        e_p1_y => edge_p1_z,
        e_p1_z => edge_p1_y,
        e_p2_x => edge_p2_x,
        e_p2_y => edge_p2_z,
        e_p2_z => edge_p2_y,
        ap_return => grp_pointOnSegment_fu_222_ap_return);

    grp_p_hls_fptosi_float_i_fu_235 : component p_hls_fptosi_float_i
    port map (
        ap_ready => grp_p_hls_fptosi_float_i_fu_235_ap_ready,
        x => reg_257,
        ap_return => grp_p_hls_fptosi_float_i_fu_235_ap_return);

    grp_p_hls_fptosi_float_i_fu_240 : component p_hls_fptosi_float_i
    port map (
        ap_ready => grp_p_hls_fptosi_float_i_fu_240_ap_ready,
        x => reg_263,
        ap_return => grp_p_hls_fptosi_float_i_fu_240_ap_return);

    honeybee_mux_42_6hbi_U46 : component honeybee_mux_42_6hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => collisions_0_2_reg_145,
        din1 => collisions_1_2_reg_155,
        din2 => collisions_2_2_reg_165,
        din3 => collisions_3_2_reg_175,
        din4 => tmp_fu_769_p5,
        dout => tmp_fu_769_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if (((icmp_ln132_fu_753_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    ap_return_preg <= returnCollisions_0_reg_185;
                end if; 
            end if;
        end if;
    end process;


    grp_lineIntersectsPlane_fu_207_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lineIntersectsPlane_fu_207_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln84_fu_474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    grp_lineIntersectsPlane_fu_207_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lineIntersectsPlane_fu_207_ap_ready = ap_const_logic_1)) then 
                    grp_lineIntersectsPlane_fu_207_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pointOnSegment_fu_222_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pointOnSegment_fu_222_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_pointOnSegment_fu_222_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pointOnSegment_fu_222_ap_ready = ap_const_logic_1)) then 
                    grp_pointOnSegment_fu_222_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    collisions_0_2_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_222_ap_return = ap_const_lv1_0) and (grp_pointOnSegment_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                collisions_0_2_reg_145 <= select_ln84_42_reg_893;
            elsif (((tmp_s_reg_921 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                collisions_0_2_reg_145 <= collisions_0_fu_569_p2;
            end if; 
        end if;
    end process;

    collisions_1_2_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_222_ap_return = ap_const_lv1_0) and (grp_pointOnSegment_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                collisions_1_2_reg_155 <= select_ln84_41_reg_888;
            elsif (((tmp_42_1_reg_930 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                collisions_1_2_reg_155 <= collisions_1_fu_624_p2;
            end if; 
        end if;
    end process;

    collisions_2_2_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_222_ap_return = ap_const_lv1_0) and (grp_pointOnSegment_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                collisions_2_2_reg_165 <= select_ln84_39_reg_883;
            elsif (((tmp_42_2_reg_939 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                collisions_2_2_reg_165 <= collisions_2_fu_685_p2;
            end if; 
        end if;
    end process;

    collisions_3_2_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_222_ap_return = ap_const_lv1_0) and (grp_pointOnSegment_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                collisions_3_2_reg_175 <= select_ln84_36_reg_878;
            elsif (((tmp_42_3_reg_948 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                collisions_3_2_reg_175 <= collisions_3_fu_746_p2;
            end if; 
        end if;
    end process;

    i_1_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_1_reg_196 <= ap_const_lv3_0;
            elsif (((icmp_ln132_fu_753_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i_1_reg_196 <= i_fu_759_p2;
            end if; 
        end if;
    end process;

    phi_ln84_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln84_fu_474_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln84_reg_134 <= add_ln84_fu_306_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln84_reg_134 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    returnCollisions_0_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                returnCollisions_0_reg_185 <= ap_const_lv64_0;
            elsif (((icmp_ln132_fu_753_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                returnCollisions_0_reg_185 <= returnCollisions_fu_783_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                collisions_0_0_fu_82 <= select_ln84_42_fu_394_p3;
                collisions_1_0_fu_86 <= select_ln84_41_fu_386_p3;
                collisions_2_0_fu_90 <= select_ln84_39_fu_370_p3;
                collisions_3_0_fu_94 <= select_ln84_36_fu_346_p3;
                collisions_load_1_075_fu_66 <= select_ln84_51_fu_466_p3;
                collisions_load_1_177_fu_70 <= select_ln84_50_fu_458_p3;
                collisions_load_1_279_fu_74 <= select_ln84_48_fu_442_p3;
                collisions_load_1_381_fu_78 <= select_ln84_45_fu_418_p3;
                select_ln84_36_reg_878 <= select_ln84_36_fu_346_p3;
                select_ln84_39_reg_883 <= select_ln84_39_fu_370_p3;
                select_ln84_41_reg_888 <= select_ln84_41_fu_386_p3;
                select_ln84_42_reg_893 <= select_ln84_42_fu_394_p3;
                select_ln84_45_reg_898 <= select_ln84_45_fu_418_p3;
                select_ln84_48_reg_903 <= select_ln84_48_fu_442_p3;
                select_ln84_50_reg_908 <= select_ln84_50_fu_458_p3;
                select_ln84_51_reg_913 <= select_ln84_51_fu_466_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_lineIntersectsPlane_fu_207_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((grp_lineIntersectsPlane_fu_207_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_lineIntersectsPlane_fu_207_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((grp_lineIntersectsPlane_fu_207_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
                reg_257 <= grp_lineIntersectsPlane_fu_207_ap_return_0;
                reg_263 <= grp_lineIntersectsPlane_fu_207_ap_return_1;
                reg_269 <= grp_lineIntersectsPlane_fu_207_ap_return_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_pointOnSegment_fu_222_ap_return = ap_const_lv1_1) and (grp_pointOnSegment_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((grp_pointOnSegment_fu_222_ap_return = ap_const_lv1_1) and (grp_pointOnSegment_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((grp_pointOnSegment_fu_222_ap_return = ap_const_lv1_1) and (grp_pointOnSegment_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((grp_pointOnSegment_fu_222_ap_return = ap_const_lv1_1) and (grp_pointOnSegment_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then
                reg_274 <= grp_p_hls_fptosi_float_i_fu_235_ap_return;
                reg_278 <= grp_p_hls_fptosi_float_i_fu_240_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_42_1_reg_930 <= grp_pointOnSegment_fu_222_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                tmp_42_2_reg_939 <= grp_pointOnSegment_fu_222_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                tmp_42_3_reg_948 <= grp_pointOnSegment_fu_222_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pointOnSegment_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_s_reg_921 <= grp_pointOnSegment_fu_222_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_lineIntersectsPlane_fu_207_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state5, grp_pointOnSegment_fu_222_ap_done, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_state19, icmp_ln132_fu_753_p2, icmp_ln84_fu_474_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln84_fu_474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_lineIntersectsPlane_fu_207_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_pointOnSegment_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_lineIntersectsPlane_fu_207_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_pointOnSegment_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_lineIntersectsPlane_fu_207_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_pointOnSegment_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_lineIntersectsPlane_fu_207_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_pointOnSegment_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln132_fu_753_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln80_18_fu_542_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFC) + signed(shl_ln80_fu_520_p2));
    add_ln80_19_fu_548_p2 <= std_logic_vector(unsigned(add_ln80_18_fu_542_p2) + unsigned(reg_274));
    add_ln80_20_fu_587_p2 <= std_logic_vector(unsigned(or_ln80_fu_581_p2) + unsigned(reg_274));
    add_ln80_21_fu_603_p2 <= std_logic_vector(unsigned(reg_274) + unsigned(shl_ln80_11_fu_575_p2));
    add_ln80_22_fu_642_p2 <= std_logic_vector(unsigned(or_ln80_5_fu_636_p2) + unsigned(reg_274));
    add_ln80_23_fu_664_p2 <= std_logic_vector(unsigned(or_ln80_6_fu_658_p2) + unsigned(reg_274));
    add_ln80_24_fu_703_p2 <= std_logic_vector(unsigned(or_ln80_7_fu_697_p2) + unsigned(reg_274));
    add_ln80_25_fu_725_p2 <= std_logic_vector(unsigned(or_ln80_8_fu_719_p2) + unsigned(reg_274));
    add_ln80_fu_526_p2 <= std_logic_vector(unsigned(reg_274) + unsigned(shl_ln80_fu_520_p2));
    add_ln84_fu_306_p2 <= std_logic_vector(unsigned(phi_ln84_reg_134) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19, icmp_ln132_fu_753_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln132_fu_753_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19, icmp_ln132_fu_753_p2)
    begin
        if (((icmp_ln132_fu_753_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state19, icmp_ln132_fu_753_p2, returnCollisions_0_reg_185, ap_return_preg)
    begin
        if (((icmp_ln132_fu_753_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_return <= returnCollisions_0_reg_185;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    collisions_0_fu_569_p2 <= (shl_ln117_fu_536_p2 or or_ln118_fu_564_p2);
    collisions_1_fu_624_p2 <= (shl_ln117_1_fu_597_p2 or or_ln118_2_fu_619_p2);
    collisions_2_fu_685_p2 <= (shl_ln117_2_fu_652_p2 or or_ln118_4_fu_680_p2);
    collisions_3_fu_746_p2 <= (shl_ln117_3_fu_713_p2 or or_ln118_6_fu_741_p2);
    grp_lineIntersectsPlane_fu_207_ap_start <= grp_lineIntersectsPlane_fu_207_ap_start_reg;

    grp_lineIntersectsPlane_fu_207_plane_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_lineIntersectsPlane_fu_207_plane <= ap_const_lv32_40400000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_lineIntersectsPlane_fu_207_plane <= ap_const_lv32_40000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_lineIntersectsPlane_fu_207_plane <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_lineIntersectsPlane_fu_207_plane <= ap_const_lv32_0;
        else 
            grp_lineIntersectsPlane_fu_207_plane <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_pointOnSegment_fu_222_ap_start <= grp_pointOnSegment_fu_222_ap_start_reg;
    i_fu_759_p2 <= std_logic_vector(unsigned(i_1_reg_196) + unsigned(ap_const_lv3_1));
    icmp_ln132_fu_753_p2 <= "1" when (i_1_reg_196 = ap_const_lv3_4) else "0";
    icmp_ln84_7_fu_312_p2 <= "1" when (phi_ln84_reg_134 = ap_const_lv2_2) else "0";
    icmp_ln84_8_fu_326_p2 <= "1" when (phi_ln84_reg_134 = ap_const_lv2_1) else "0";
    icmp_ln84_9_fu_340_p2 <= "1" when (phi_ln84_reg_134 = ap_const_lv2_0) else "0";
    icmp_ln84_fu_474_p2 <= "1" when (phi_ln84_reg_134 = ap_const_lv2_3) else "0";
    or_ln118_2_fu_619_p2 <= (shl_ln118_1_fu_613_p2 or select_ln84_50_reg_908);
    or_ln118_4_fu_680_p2 <= (shl_ln118_2_fu_674_p2 or select_ln84_48_reg_903);
    or_ln118_6_fu_741_p2 <= (shl_ln118_3_fu_735_p2 or select_ln84_45_reg_898);
    or_ln118_fu_564_p2 <= (shl_ln118_fu_558_p2 or select_ln84_51_reg_913);
    or_ln80_5_fu_636_p2 <= (shl_ln80_12_fu_630_p2 or ap_const_lv32_8);
    or_ln80_6_fu_658_p2 <= (shl_ln80_12_fu_630_p2 or ap_const_lv32_4);
    or_ln80_7_fu_697_p2 <= (shl_ln80_13_fu_691_p2 or ap_const_lv32_C);
    or_ln80_8_fu_719_p2 <= (shl_ln80_13_fu_691_p2 or ap_const_lv32_8);
    or_ln80_fu_581_p2 <= (shl_ln80_11_fu_575_p2 or ap_const_lv32_4);
    returnCollisions_fu_783_p2 <= (tmp_fu_769_p6 or returnCollisions_0_reg_185);
    select_ln84_35_fu_332_p3 <= 
        collisions_3_0_fu_94 when (icmp_ln84_8_fu_326_p2(0) = '1') else 
        select_ln84_fu_318_p3;
    select_ln84_36_fu_346_p3 <= 
        collisions_3_0_fu_94 when (icmp_ln84_9_fu_340_p2(0) = '1') else 
        select_ln84_35_fu_332_p3;
    select_ln84_37_fu_354_p3 <= 
        ap_const_lv64_0 when (icmp_ln84_7_fu_312_p2(0) = '1') else 
        collisions_2_0_fu_90;
    select_ln84_38_fu_362_p3 <= 
        collisions_2_0_fu_90 when (icmp_ln84_8_fu_326_p2(0) = '1') else 
        select_ln84_37_fu_354_p3;
    select_ln84_39_fu_370_p3 <= 
        collisions_2_0_fu_90 when (icmp_ln84_9_fu_340_p2(0) = '1') else 
        select_ln84_38_fu_362_p3;
    select_ln84_40_fu_378_p3 <= 
        ap_const_lv64_0 when (icmp_ln84_8_fu_326_p2(0) = '1') else 
        collisions_1_0_fu_86;
    select_ln84_41_fu_386_p3 <= 
        collisions_1_0_fu_86 when (icmp_ln84_9_fu_340_p2(0) = '1') else 
        select_ln84_40_fu_378_p3;
    select_ln84_42_fu_394_p3 <= 
        ap_const_lv64_0 when (icmp_ln84_9_fu_340_p2(0) = '1') else 
        collisions_0_0_fu_82;
    select_ln84_43_fu_402_p3 <= 
        collisions_load_1_381_fu_78 when (icmp_ln84_7_fu_312_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln84_44_fu_410_p3 <= 
        collisions_load_1_381_fu_78 when (icmp_ln84_8_fu_326_p2(0) = '1') else 
        select_ln84_43_fu_402_p3;
    select_ln84_45_fu_418_p3 <= 
        collisions_load_1_381_fu_78 when (icmp_ln84_9_fu_340_p2(0) = '1') else 
        select_ln84_44_fu_410_p3;
    select_ln84_46_fu_426_p3 <= 
        ap_const_lv64_0 when (icmp_ln84_7_fu_312_p2(0) = '1') else 
        collisions_load_1_279_fu_74;
    select_ln84_47_fu_434_p3 <= 
        collisions_load_1_279_fu_74 when (icmp_ln84_8_fu_326_p2(0) = '1') else 
        select_ln84_46_fu_426_p3;
    select_ln84_48_fu_442_p3 <= 
        collisions_load_1_279_fu_74 when (icmp_ln84_9_fu_340_p2(0) = '1') else 
        select_ln84_47_fu_434_p3;
    select_ln84_49_fu_450_p3 <= 
        ap_const_lv64_0 when (icmp_ln84_8_fu_326_p2(0) = '1') else 
        collisions_load_1_177_fu_70;
    select_ln84_50_fu_458_p3 <= 
        collisions_load_1_177_fu_70 when (icmp_ln84_9_fu_340_p2(0) = '1') else 
        select_ln84_49_fu_450_p3;
    select_ln84_51_fu_466_p3 <= 
        ap_const_lv64_0 when (icmp_ln84_9_fu_340_p2(0) = '1') else 
        collisions_load_1_075_fu_66;
    select_ln84_fu_318_p3 <= 
        collisions_3_0_fu_94 when (icmp_ln84_7_fu_312_p2(0) = '1') else 
        ap_const_lv64_0;
    shl_ln117_1_fu_597_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln117_1_fu_593_p1(31-1 downto 0)))));
    shl_ln117_2_fu_652_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln117_2_fu_648_p1(31-1 downto 0)))));
    shl_ln117_3_fu_713_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln117_3_fu_709_p1(31-1 downto 0)))));
    shl_ln117_fu_536_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln117_fu_532_p1(31-1 downto 0)))));
    shl_ln118_1_fu_613_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln118_1_fu_609_p1(31-1 downto 0)))));
    shl_ln118_2_fu_674_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln118_2_fu_670_p1(31-1 downto 0)))));
    shl_ln118_3_fu_735_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln118_3_fu_731_p1(31-1 downto 0)))));
    shl_ln118_fu_558_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln118_fu_554_p1(31-1 downto 0)))));
    shl_ln80_11_fu_575_p2 <= std_logic_vector(shift_left(unsigned(reg_278),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln80_12_fu_630_p2 <= std_logic_vector(shift_left(unsigned(reg_278),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln80_13_fu_691_p2 <= std_logic_vector(shift_left(unsigned(reg_278),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln80_fu_520_p2 <= std_logic_vector(shift_left(unsigned(reg_278),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_fu_769_p5 <= i_1_reg_196(2 - 1 downto 0);
    zext_ln117_1_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_20_fu_587_p2),64));
    zext_ln117_2_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_22_fu_642_p2),64));
    zext_ln117_3_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_24_fu_703_p2),64));
    zext_ln117_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_fu_526_p2),64));
    zext_ln118_1_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_21_fu_603_p2),64));
    zext_ln118_2_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_23_fu_664_p2),64));
    zext_ln118_3_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_25_fu_725_p2),64));
    zext_ln118_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_19_fu_548_p2),64));
end behav;
