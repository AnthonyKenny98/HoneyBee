// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="honeybee,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z030i-fbg484-2L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.478400,HLS_SYN_LAT=213,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=45,HLS_SYN_FF=9865,HLS_SYN_LUT=21943,HLS_VERSION=2019_2}" *)

module honeybee (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        edge_p1_x,
        edge_p1_y,
        edge_p1_z,
        edge_p2_x,
        edge_p2_y,
        edge_p2_z,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] edge_p1_x;
input  [31:0] edge_p1_y;
input  [31:0] edge_p1_z;
input  [31:0] edge_p2_x;
input  [31:0] edge_p2_y;
input  [31:0] edge_p2_z;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_checkAxis_1_fu_64_ap_start;
wire    grp_checkAxis_1_fu_64_ap_done;
wire    grp_checkAxis_1_fu_64_ap_idle;
wire    grp_checkAxis_1_fu_64_ap_ready;
wire   [63:0] grp_checkAxis_1_fu_64_ap_return;
wire    grp_checkAxis_2_fu_80_ap_start;
wire    grp_checkAxis_2_fu_80_ap_done;
wire    grp_checkAxis_2_fu_80_ap_idle;
wire    grp_checkAxis_2_fu_80_ap_ready;
wire   [63:0] grp_checkAxis_2_fu_80_ap_return;
wire    grp_checkAxis_0_fu_96_ap_start;
wire    grp_checkAxis_0_fu_96_ap_done;
wire    grp_checkAxis_0_fu_96_ap_idle;
wire    grp_checkAxis_0_fu_96_ap_ready;
wire   [63:0] grp_checkAxis_0_fu_96_ap_return;
reg    grp_checkAxis_1_fu_64_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_checkAxis_2_fu_80_ap_start_reg;
reg    grp_checkAxis_0_fu_96_ap_start_reg;
wire   [63:0] or_ln159_fu_112_p2;
reg    ap_block_state2_on_subcall_done;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_checkAxis_1_fu_64_ap_start_reg = 1'b0;
#0 grp_checkAxis_2_fu_80_ap_start_reg = 1'b0;
#0 grp_checkAxis_0_fu_96_ap_start_reg = 1'b0;
end

checkAxis_1 grp_checkAxis_1_fu_64(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_checkAxis_1_fu_64_ap_start),
    .ap_done(grp_checkAxis_1_fu_64_ap_done),
    .ap_idle(grp_checkAxis_1_fu_64_ap_idle),
    .ap_ready(grp_checkAxis_1_fu_64_ap_ready),
    .edge_p1_x(edge_p1_z),
    .edge_p1_y(edge_p1_y),
    .edge_p1_z(edge_p1_x),
    .edge_p2_x(edge_p2_z),
    .edge_p2_y(edge_p2_y),
    .edge_p2_z(edge_p2_x),
    .ap_return(grp_checkAxis_1_fu_64_ap_return)
);

checkAxis_2 grp_checkAxis_2_fu_80(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_checkAxis_2_fu_80_ap_start),
    .ap_done(grp_checkAxis_2_fu_80_ap_done),
    .ap_idle(grp_checkAxis_2_fu_80_ap_idle),
    .ap_ready(grp_checkAxis_2_fu_80_ap_ready),
    .edge_p1_x(edge_p1_x),
    .edge_p1_y(edge_p1_y),
    .edge_p1_z(edge_p1_z),
    .edge_p2_x(edge_p2_x),
    .edge_p2_y(edge_p2_y),
    .edge_p2_z(edge_p2_z),
    .ap_return(grp_checkAxis_2_fu_80_ap_return)
);

checkAxis_0 grp_checkAxis_0_fu_96(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_checkAxis_0_fu_96_ap_start),
    .ap_done(grp_checkAxis_0_fu_96_ap_done),
    .ap_idle(grp_checkAxis_0_fu_96_ap_idle),
    .ap_ready(grp_checkAxis_0_fu_96_ap_ready),
    .edge_p1_x(edge_p1_x),
    .edge_p1_y(edge_p1_z),
    .edge_p1_z(edge_p1_y),
    .edge_p2_x(edge_p2_x),
    .edge_p2_y(edge_p2_z),
    .edge_p2_z(edge_p2_y),
    .ap_return(grp_checkAxis_0_fu_96_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_checkAxis_0_fu_96_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_checkAxis_0_fu_96_ap_start_reg <= 1'b1;
        end else if ((grp_checkAxis_0_fu_96_ap_ready == 1'b1)) begin
            grp_checkAxis_0_fu_96_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_checkAxis_1_fu_64_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_checkAxis_1_fu_64_ap_start_reg <= 1'b1;
        end else if ((grp_checkAxis_1_fu_64_ap_ready == 1'b1)) begin
            grp_checkAxis_1_fu_64_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_checkAxis_2_fu_80_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_checkAxis_2_fu_80_ap_start_reg <= 1'b1;
        end else if ((grp_checkAxis_2_fu_80_ap_ready == 1'b1)) begin
            grp_checkAxis_2_fu_80_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_checkAxis_0_fu_96_ap_done == 1'b0) | (grp_checkAxis_2_fu_80_ap_done == 1'b0) | (grp_checkAxis_1_fu_64_ap_done == 1'b0));
end

assign ap_return = (or_ln159_fu_112_p2 | grp_checkAxis_0_fu_96_ap_return);

assign grp_checkAxis_0_fu_96_ap_start = grp_checkAxis_0_fu_96_ap_start_reg;

assign grp_checkAxis_1_fu_64_ap_start = grp_checkAxis_1_fu_64_ap_start_reg;

assign grp_checkAxis_2_fu_80_ap_start = grp_checkAxis_2_fu_80_ap_start_reg;

assign or_ln159_fu_112_p2 = (grp_checkAxis_2_fu_80_ap_return | grp_checkAxis_1_fu_64_ap_return);

endmodule //honeybee
