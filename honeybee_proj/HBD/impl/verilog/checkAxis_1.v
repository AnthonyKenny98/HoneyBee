// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module checkAxis_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        edge_p1_x,
        edge_p1_y,
        edge_p1_z,
        edge_p2_x,
        edge_p2_y,
        edge_p2_z,
        ap_return
);

parameter    ap_ST_fsm_state1 = 56'd1;
parameter    ap_ST_fsm_state2 = 56'd2;
parameter    ap_ST_fsm_state3 = 56'd4;
parameter    ap_ST_fsm_state4 = 56'd8;
parameter    ap_ST_fsm_state5 = 56'd16;
parameter    ap_ST_fsm_state6 = 56'd32;
parameter    ap_ST_fsm_state7 = 56'd64;
parameter    ap_ST_fsm_state8 = 56'd128;
parameter    ap_ST_fsm_state9 = 56'd256;
parameter    ap_ST_fsm_state10 = 56'd512;
parameter    ap_ST_fsm_state11 = 56'd1024;
parameter    ap_ST_fsm_state12 = 56'd2048;
parameter    ap_ST_fsm_state13 = 56'd4096;
parameter    ap_ST_fsm_state14 = 56'd8192;
parameter    ap_ST_fsm_state15 = 56'd16384;
parameter    ap_ST_fsm_state16 = 56'd32768;
parameter    ap_ST_fsm_state17 = 56'd65536;
parameter    ap_ST_fsm_state18 = 56'd131072;
parameter    ap_ST_fsm_state19 = 56'd262144;
parameter    ap_ST_fsm_state20 = 56'd524288;
parameter    ap_ST_fsm_state21 = 56'd1048576;
parameter    ap_ST_fsm_state22 = 56'd2097152;
parameter    ap_ST_fsm_state23 = 56'd4194304;
parameter    ap_ST_fsm_state24 = 56'd8388608;
parameter    ap_ST_fsm_state25 = 56'd16777216;
parameter    ap_ST_fsm_state26 = 56'd33554432;
parameter    ap_ST_fsm_state27 = 56'd67108864;
parameter    ap_ST_fsm_state28 = 56'd134217728;
parameter    ap_ST_fsm_state29 = 56'd268435456;
parameter    ap_ST_fsm_state30 = 56'd536870912;
parameter    ap_ST_fsm_state31 = 56'd1073741824;
parameter    ap_ST_fsm_state32 = 56'd2147483648;
parameter    ap_ST_fsm_state33 = 56'd4294967296;
parameter    ap_ST_fsm_state34 = 56'd8589934592;
parameter    ap_ST_fsm_state35 = 56'd17179869184;
parameter    ap_ST_fsm_state36 = 56'd34359738368;
parameter    ap_ST_fsm_state37 = 56'd68719476736;
parameter    ap_ST_fsm_state38 = 56'd137438953472;
parameter    ap_ST_fsm_state39 = 56'd274877906944;
parameter    ap_ST_fsm_state40 = 56'd549755813888;
parameter    ap_ST_fsm_state41 = 56'd1099511627776;
parameter    ap_ST_fsm_state42 = 56'd2199023255552;
parameter    ap_ST_fsm_state43 = 56'd4398046511104;
parameter    ap_ST_fsm_state44 = 56'd8796093022208;
parameter    ap_ST_fsm_state45 = 56'd17592186044416;
parameter    ap_ST_fsm_state46 = 56'd35184372088832;
parameter    ap_ST_fsm_state47 = 56'd70368744177664;
parameter    ap_ST_fsm_state48 = 56'd140737488355328;
parameter    ap_ST_fsm_state49 = 56'd281474976710656;
parameter    ap_ST_fsm_state50 = 56'd562949953421312;
parameter    ap_ST_fsm_state51 = 56'd1125899906842624;
parameter    ap_ST_fsm_state52 = 56'd2251799813685248;
parameter    ap_ST_fsm_state53 = 56'd4503599627370496;
parameter    ap_ST_fsm_state54 = 56'd9007199254740992;
parameter    ap_ST_fsm_state55 = 56'd18014398509481984;
parameter    ap_ST_fsm_state56 = 56'd36028797018963968;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] edge_p1_x;
input  [31:0] edge_p1_y;
input  [31:0] edge_p1_z;
input  [31:0] edge_p2_x;
input  [31:0] edge_p2_y;
input  [31:0] edge_p2_z;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [55:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_148_p2;
reg   [31:0] reg_210;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state53;
wire   [31:0] grp_fu_166_p2;
reg   [31:0] reg_223;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state49;
wire   [31:0] grp_fu_171_p2;
reg   [31:0] reg_230;
wire   [31:0] grp_fu_175_p2;
reg   [31:0] reg_236;
wire   [31:0] grp_fu_154_p2;
reg   [31:0] reg_242;
wire   [31:0] grp_fu_160_p2;
reg   [31:0] reg_251;
reg   [31:0] tmp_19_i_i_reg_1411;
wire    ap_CS_fsm_state4;
reg   [31:0] tmp_21_i_i_reg_1416;
reg   [31:0] tmp_24_i_i_reg_1421;
wire   [31:0] bitcast_ln49_fu_258_p1;
reg   [31:0] bitcast_ln49_reg_1427;
wire   [31:0] bitcast_ln49_5_fu_265_p1;
reg   [31:0] bitcast_ln49_5_reg_1432;
wire   [0:0] icmp_ln49_10_fu_272_p2;
reg   [0:0] icmp_ln49_10_reg_1437;
wire   [0:0] icmp_ln49_11_fu_278_p2;
reg   [0:0] icmp_ln49_11_reg_1442;
wire   [0:0] grp_fu_186_p2;
reg   [0:0] tmp_s_reg_1447;
wire   [0:0] grp_fu_190_p2;
reg   [0:0] tmp_26_reg_1452;
wire   [31:0] bitcast_ln50_fu_284_p1;
reg   [31:0] bitcast_ln50_reg_1457;
wire   [31:0] bitcast_ln50_4_fu_291_p1;
reg   [31:0] bitcast_ln50_4_reg_1462;
wire   [0:0] icmp_ln50_8_fu_298_p2;
reg   [0:0] icmp_ln50_8_reg_1467;
wire   [0:0] icmp_ln50_9_fu_304_p2;
reg   [0:0] icmp_ln50_9_reg_1472;
wire   [0:0] grp_fu_194_p2;
reg   [0:0] tmp_27_reg_1477;
wire   [0:0] grp_fu_198_p2;
reg   [0:0] tmp_28_reg_1482;
wire   [31:0] bitcast_ln51_fu_310_p1;
reg   [31:0] bitcast_ln51_reg_1487;
wire   [31:0] bitcast_ln51_6_fu_317_p1;
reg   [31:0] bitcast_ln51_6_reg_1492;
wire   [0:0] icmp_ln51_12_fu_324_p2;
reg   [0:0] icmp_ln51_12_reg_1497;
wire   [0:0] icmp_ln51_13_fu_330_p2;
reg   [0:0] icmp_ln51_13_reg_1502;
wire   [0:0] grp_fu_202_p2;
reg   [0:0] tmp_29_reg_1507;
wire   [0:0] grp_fu_206_p2;
reg   [0:0] tmp_30_reg_1512;
wire   [31:0] zext_ln92_fu_336_p1;
reg   [31:0] zext_ln92_reg_1517;
wire    ap_CS_fsm_state5;
wire   [2:0] i_fu_347_p2;
reg   [2:0] i_reg_1526;
wire   [0:0] and_ln49_fu_393_p2;
reg   [0:0] and_ln49_reg_1531;
wire   [0:0] icmp_ln92_fu_341_p2;
wire   [0:0] and_ln50_fu_439_p2;
reg   [0:0] and_ln50_reg_1537;
wire   [0:0] and_ln51_fu_485_p2;
reg   [0:0] and_ln51_reg_1543;
wire   [31:0] grp_fu_183_p1;
reg   [31:0] R_z_reg_1549;
wire    ap_CS_fsm_state8;
wire   [31:0] xor_ln22_fu_495_p2;
reg   [31:0] xor_ln22_reg_1555;
wire   [31:0] bitcast_ln22_2_fu_501_p1;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_179_p2;
reg   [31:0] T_reg_1565;
wire    ap_CS_fsm_state46;
wire   [31:0] p_a_fu_509_p3;
reg   [31:0] p_a_reg_1572;
wire    ap_CS_fsm_state50;
wire   [31:0] p_a_6_fu_519_p3;
reg   [31:0] p_a_6_reg_1578;
wire   [31:0] p_a_7_fu_529_p3;
reg   [31:0] p_a_7_reg_1584;
wire   [31:0] p_a_8_fu_539_p3;
reg   [31:0] p_a_8_reg_1590;
wire   [31:0] p_a_9_fu_549_p3;
reg   [31:0] p_a_9_reg_1596;
wire   [31:0] p_a_10_fu_559_p3;
reg   [31:0] p_a_10_reg_1602;
wire   [0:0] icmp_ln49_13_fu_600_p2;
reg   [0:0] icmp_ln49_13_reg_1608;
wire    ap_CS_fsm_state54;
wire   [0:0] icmp_ln49_14_fu_606_p2;
reg   [0:0] icmp_ln49_14_reg_1613;
wire   [0:0] or_ln49_7_fu_624_p2;
reg   [0:0] or_ln49_7_reg_1618;
wire   [0:0] icmp_ln49_17_fu_647_p2;
reg   [0:0] icmp_ln49_17_reg_1624;
wire   [0:0] icmp_ln49_18_fu_653_p2;
reg   [0:0] icmp_ln49_18_reg_1629;
wire   [0:0] icmp_ln50_11_fu_694_p2;
reg   [0:0] icmp_ln50_11_reg_1634;
wire   [0:0] icmp_ln50_12_fu_700_p2;
reg   [0:0] icmp_ln50_12_reg_1639;
wire   [0:0] or_ln50_8_fu_718_p2;
reg   [0:0] or_ln50_8_reg_1644;
wire   [0:0] icmp_ln51_15_fu_759_p2;
reg   [0:0] icmp_ln51_15_reg_1650;
wire   [0:0] icmp_ln51_16_fu_765_p2;
reg   [0:0] icmp_ln51_16_reg_1655;
wire   [0:0] or_ln51_9_fu_783_p2;
reg   [0:0] or_ln51_9_reg_1660;
wire   [0:0] icmp_ln51_19_fu_806_p2;
reg   [0:0] icmp_ln51_19_reg_1666;
wire   [0:0] icmp_ln51_20_fu_812_p2;
reg   [0:0] icmp_ln51_20_reg_1671;
wire   [0:0] icmp_ln51_21_fu_835_p2;
reg   [0:0] icmp_ln51_21_reg_1676;
wire   [0:0] icmp_ln51_22_fu_841_p2;
reg   [0:0] icmp_ln51_22_reg_1681;
wire   [29:0] select_ln59_fu_1089_p3;
reg   [29:0] select_ln59_reg_1686;
wire   [27:0] select_ln59_2_fu_1107_p3;
reg   [27:0] select_ln59_2_reg_1691;
wire   [0:0] and_ln51_24_fu_1259_p2;
reg   [0:0] and_ln51_24_reg_1697;
wire    ap_CS_fsm_state55;
wire   [31:0] add_ln82_fu_1288_p2;
reg   [31:0] add_ln82_reg_1702;
wire   [31:0] add_ln82_6_fu_1305_p2;
reg   [31:0] add_ln82_6_reg_1707;
wire   [63:0] collisions_2_fu_1341_p3;
wire    ap_CS_fsm_state56;
reg   [63:0] collisions_0_reg_124;
reg   [2:0] i_assign_reg_136;
reg   [31:0] grp_fu_148_p0;
reg   [31:0] grp_fu_148_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state31;
reg   [31:0] grp_fu_154_p0;
reg   [31:0] grp_fu_154_p1;
reg   [31:0] grp_fu_160_p0;
reg   [31:0] grp_fu_160_p1;
reg   [31:0] grp_fu_166_p0;
reg   [31:0] grp_fu_166_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state47;
reg   [31:0] grp_fu_171_p0;
reg   [31:0] grp_fu_171_p1;
reg   [31:0] grp_fu_175_p0;
reg   [31:0] grp_fu_175_p1;
wire    ap_CS_fsm_state35;
wire   [31:0] grp_fu_183_p0;
reg   [31:0] grp_fu_186_p0;
reg   [31:0] grp_fu_186_p1;
wire    ap_CS_fsm_state3;
reg   [31:0] grp_fu_190_p0;
reg   [31:0] grp_fu_190_p1;
reg   [31:0] grp_fu_194_p0;
reg   [31:0] grp_fu_194_p1;
reg   [31:0] grp_fu_198_p0;
reg   [31:0] grp_fu_198_p1;
reg   [31:0] grp_fu_202_p0;
reg   [31:0] grp_fu_202_p1;
reg   [31:0] grp_fu_206_p0;
reg   [31:0] grp_fu_206_p1;
wire   [22:0] trunc_ln49_fu_261_p1;
wire   [22:0] trunc_ln49_5_fu_268_p1;
wire   [22:0] trunc_ln50_fu_287_p1;
wire   [22:0] trunc_ln50_4_fu_294_p1;
wire   [22:0] trunc_ln51_fu_313_p1;
wire   [22:0] trunc_ln51_6_fu_320_p1;
wire   [7:0] tmp_fu_353_p4;
wire   [0:0] icmp_ln49_fu_371_p2;
wire   [7:0] tmp_31_fu_362_p4;
wire   [0:0] icmp_ln49_12_fu_382_p2;
wire   [0:0] or_ln49_fu_377_p2;
wire   [0:0] or_ln49_5_fu_388_p2;
wire   [7:0] tmp_37_fu_399_p4;
wire   [0:0] icmp_ln50_fu_417_p2;
wire   [7:0] tmp_38_fu_408_p4;
wire   [0:0] icmp_ln50_10_fu_428_p2;
wire   [0:0] or_ln50_fu_423_p2;
wire   [0:0] or_ln50_6_fu_434_p2;
wire   [7:0] tmp_41_fu_445_p4;
wire   [0:0] icmp_ln51_fu_463_p2;
wire   [7:0] tmp_42_fu_454_p4;
wire   [0:0] icmp_ln51_14_fu_474_p2;
wire   [0:0] or_ln51_fu_469_p2;
wire   [0:0] or_ln51_7_fu_480_p2;
wire   [31:0] bitcast_ln22_fu_491_p1;
wire   [0:0] and_ln49_8_fu_505_p2;
wire   [0:0] and_ln49_11_fu_515_p2;
wire   [0:0] and_ln50_5_fu_525_p2;
wire   [0:0] and_ln50_8_fu_535_p2;
wire   [0:0] and_ln51_13_fu_545_p2;
wire   [0:0] and_ln51_14_fu_555_p2;
wire   [31:0] bitcast_ln49_6_fu_565_p1;
wire   [31:0] bitcast_ln49_7_fu_582_p1;
wire   [7:0] tmp_32_fu_568_p4;
wire   [22:0] trunc_ln49_6_fu_578_p1;
wire   [7:0] tmp_33_fu_586_p4;
wire   [22:0] trunc_ln49_7_fu_596_p1;
wire   [0:0] icmp_ln49_16_fu_618_p2;
wire   [0:0] icmp_ln49_15_fu_612_p2;
wire   [31:0] bitcast_ln49_8_fu_630_p1;
wire   [7:0] tmp_35_fu_633_p4;
wire   [22:0] trunc_ln49_8_fu_643_p1;
wire   [31:0] bitcast_ln50_5_fu_659_p1;
wire   [31:0] p_Val2_s_fu_676_p1;
wire   [7:0] tmp_39_fu_662_p4;
wire   [22:0] trunc_ln50_5_fu_672_p1;
wire   [7:0] tmp_V_fu_680_p4;
wire   [22:0] tmp_V_4_fu_690_p1;
wire   [0:0] icmp_ln50_14_fu_712_p2;
wire   [0:0] icmp_ln50_13_fu_706_p2;
wire   [31:0] bitcast_ln51_7_fu_724_p1;
wire   [31:0] p_Val2_7_fu_741_p1;
wire   [7:0] tmp_43_fu_727_p4;
wire   [22:0] trunc_ln51_7_fu_737_p1;
wire   [7:0] tmp_V_5_fu_745_p4;
wire   [22:0] tmp_V_6_fu_755_p1;
wire   [0:0] icmp_ln51_18_fu_777_p2;
wire   [0:0] icmp_ln51_17_fu_771_p2;
wire   [31:0] bitcast_ln51_9_fu_789_p1;
wire   [7:0] tmp_45_fu_792_p4;
wire   [22:0] trunc_ln51_9_fu_802_p1;
wire   [31:0] bitcast_ln51_10_fu_818_p1;
wire   [7:0] tmp_47_fu_821_p4;
wire   [22:0] trunc_ln51_10_fu_831_p1;
wire   [24:0] mantissa_V_fu_855_p4;
wire   [8:0] zext_ln339_fu_869_p1;
wire   [8:0] add_ln339_fu_873_p2;
wire   [7:0] sub_ln1311_fu_887_p2;
wire   [0:0] isNeg_fu_879_p3;
wire  signed [8:0] sext_ln1311_fu_893_p1;
wire  signed [8:0] ush_fu_897_p3;
wire  signed [31:0] sext_ln1311_4_fu_905_p1;
wire  signed [24:0] sext_ln1311_7_fu_909_p1;
wire   [78:0] zext_ln682_fu_865_p1;
wire   [78:0] zext_ln1287_fu_913_p1;
wire   [24:0] r_V_fu_917_p2;
wire   [0:0] tmp_52_fu_929_p3;
wire   [78:0] r_V_4_fu_923_p2;
wire   [54:0] zext_ln662_fu_937_p1;
wire   [54:0] tmp_49_fu_941_p4;
wire   [54:0] select_ln1312_fu_951_p3;
wire   [29:0] trunc_ln82_fu_959_p1;
wire   [24:0] mantissa_V_2_fu_977_p4;
wire   [8:0] zext_ln339_2_fu_991_p1;
wire   [8:0] add_ln339_2_fu_995_p2;
wire   [7:0] sub_ln1311_2_fu_1009_p2;
wire   [0:0] isNeg_2_fu_1001_p3;
wire  signed [8:0] sext_ln1311_5_fu_1015_p1;
wire  signed [8:0] ush_2_fu_1019_p3;
wire  signed [31:0] sext_ln1311_6_fu_1027_p1;
wire  signed [24:0] sext_ln1311_8_fu_1031_p1;
wire   [78:0] zext_ln682_2_fu_987_p1;
wire   [78:0] zext_ln1287_2_fu_1035_p1;
wire   [24:0] r_V_5_fu_1039_p2;
wire   [0:0] tmp_56_fu_1051_p3;
wire   [78:0] r_V_6_fu_1045_p2;
wire   [31:0] zext_ln662_2_fu_1059_p1;
wire   [31:0] tmp_50_fu_1063_p4;
wire   [31:0] p_Val2_11_fu_1073_p3;
wire   [0:0] p_Result_s_fu_847_p3;
wire   [29:0] sub_ln82_fu_963_p2;
wire   [29:0] trunc_ln82_3_fu_1085_p1;
wire   [27:0] trunc_ln657_fu_1081_p1;
wire   [0:0] p_Result_2_fu_969_p3;
wire   [27:0] sub_ln82_1_fu_1097_p2;
wire   [27:0] trunc_ln82_4_fu_1103_p1;
wire   [0:0] or_ln49_6_fu_1115_p2;
wire   [0:0] and_ln49_9_fu_1119_p2;
wire   [0:0] or_ln49_8_fu_1130_p2;
wire   [0:0] and_ln49_12_fu_1134_p2;
wire   [0:0] or_ln50_7_fu_1145_p2;
wire   [0:0] and_ln50_6_fu_1149_p2;
wire   [0:0] and_ln50_7_fu_1154_p2;
wire   [0:0] or_ln51_8_fu_1166_p2;
wire   [0:0] and_ln51_15_fu_1170_p2;
wire   [0:0] and_ln49_10_fu_1124_p2;
wire   [0:0] and_ln49_13_fu_1139_p2;
wire   [0:0] and_ln49_14_fu_1181_p2;
wire   [0:0] xor_ln49_fu_1187_p2;
wire   [0:0] xor_ln50_fu_1160_p2;
wire   [0:0] or_ln51_10_fu_1205_p2;
wire   [0:0] and_ln51_17_fu_1209_p2;
wire   [0:0] and_ln51_16_fu_1175_p2;
wire   [0:0] or_ln51_11_fu_1226_p2;
wire   [0:0] and_ln51_20_fu_1230_p2;
wire   [0:0] and_ln51_18_fu_1214_p2;
wire   [0:0] and_ln51_21_fu_1235_p2;
wire   [0:0] or_ln50_10_fu_1199_p2;
wire   [0:0] and_ln51_22_fu_1241_p2;
wire   [0:0] or_ln51_12_fu_1247_p2;
wire   [0:0] or_ln50_9_fu_1193_p2;
wire   [0:0] and_ln51_23_fu_1253_p2;
wire   [0:0] and_ln51_19_fu_1220_p2;
wire   [31:0] shl_ln_fu_1265_p3;
wire   [31:0] tmp5_fu_1279_p4;
wire   [31:0] shl_ln82_3_fu_1272_p3;
wire   [31:0] add_ln82_4_fu_1294_p2;
wire   [31:0] add_ln82_5_fu_1299_p2;
wire   [63:0] zext_ln121_fu_1311_p1;
wire   [63:0] zext_ln122_fu_1320_p1;
wire   [63:0] shl_ln122_fu_1323_p2;
wire   [63:0] or_ln122_fu_1329_p2;
wire   [63:0] shl_ln121_fu_1314_p2;
wire   [63:0] collisions_fu_1335_p2;
reg   [1:0] grp_fu_148_opcode;
reg   [1:0] grp_fu_154_opcode;
reg   [1:0] grp_fu_160_opcode;
reg   [4:0] grp_fu_186_opcode;
reg   [4:0] grp_fu_190_opcode;
reg   [4:0] grp_fu_194_opcode;
reg   [4:0] grp_fu_198_opcode;
reg   [4:0] grp_fu_202_opcode;
reg   [4:0] grp_fu_206_opcode;
reg   [63:0] ap_return_preg;
reg   [55:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 56'd1;
#0 ap_return_preg = 64'd0;
end

honeybee_faddfsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_faddfsubbkb_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_148_p0),
    .din1(grp_fu_148_p1),
    .opcode(grp_fu_148_opcode),
    .ce(1'b1),
    .dout(grp_fu_148_p2)
);

honeybee_faddfsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_faddfsubbkb_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_154_p0),
    .din1(grp_fu_154_p1),
    .opcode(grp_fu_154_opcode),
    .ce(1'b1),
    .dout(grp_fu_154_p2)
);

honeybee_faddfsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_faddfsubbkb_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_160_p0),
    .din1(grp_fu_160_p1),
    .opcode(grp_fu_160_opcode),
    .ce(1'b1),
    .dout(grp_fu_160_p2)
);

honeybee_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fmul_32ncud_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_166_p0),
    .din1(grp_fu_166_p1),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

honeybee_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fmul_32ncud_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_171_p0),
    .din1(grp_fu_171_p1),
    .ce(1'b1),
    .dout(grp_fu_171_p2)
);

honeybee_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fmul_32ncud_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_175_p0),
    .din1(grp_fu_175_p1),
    .ce(1'b1),
    .dout(grp_fu_175_p2)
);

honeybee_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_fdiv_32ndEe_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_210),
    .din1(reg_242),
    .ce(1'b1),
    .dout(grp_fu_179_p2)
);

honeybee_sitofp_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
honeybee_sitofp_3eOg_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_183_p0),
    .ce(1'b1),
    .dout(grp_fu_183_p1)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_186_p0),
    .din1(grp_fu_186_p1),
    .ce(1'b1),
    .opcode(grp_fu_186_opcode),
    .dout(grp_fu_186_p2)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_190_p0),
    .din1(grp_fu_190_p1),
    .ce(1'b1),
    .opcode(grp_fu_190_opcode),
    .dout(grp_fu_190_p2)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_194_p0),
    .din1(grp_fu_194_p1),
    .ce(1'b1),
    .opcode(grp_fu_194_opcode),
    .dout(grp_fu_194_p2)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_198_p0),
    .din1(grp_fu_198_p1),
    .ce(1'b1),
    .opcode(grp_fu_198_opcode),
    .dout(grp_fu_198_p2)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_202_p0),
    .din1(grp_fu_202_p1),
    .ce(1'b1),
    .opcode(grp_fu_202_opcode),
    .dout(grp_fu_202_p2)
);

honeybee_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nfYi_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_206_p0),
    .din1(grp_fu_206_p1),
    .ce(1'b1),
    .opcode(grp_fu_206_opcode),
    .dout(grp_fu_206_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 64'd0;
    end else begin
        if (((icmp_ln92_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_return_preg <= collisions_0_reg_124;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        collisions_0_reg_124 <= collisions_2_fu_1341_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        collisions_0_reg_124 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        i_assign_reg_136 <= i_reg_1526;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_assign_reg_136 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        R_z_reg_1549 <= grp_fu_183_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        T_reg_1565 <= grp_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        add_ln82_6_reg_1707 <= add_ln82_6_fu_1305_p2;
        add_ln82_reg_1702 <= add_ln82_fu_1288_p2;
        and_ln51_24_reg_1697 <= and_ln51_24_fu_1259_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        and_ln49_reg_1531 <= and_ln49_fu_393_p2;
        and_ln50_reg_1537 <= and_ln50_fu_439_p2;
        and_ln51_reg_1543 <= and_ln51_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bitcast_ln49_5_reg_1432 <= bitcast_ln49_5_fu_265_p1;
        bitcast_ln49_reg_1427 <= bitcast_ln49_fu_258_p1;
        bitcast_ln50_4_reg_1462 <= bitcast_ln50_4_fu_291_p1;
        bitcast_ln50_reg_1457 <= bitcast_ln50_fu_284_p1;
        bitcast_ln51_6_reg_1492 <= bitcast_ln51_6_fu_317_p1;
        bitcast_ln51_reg_1487 <= bitcast_ln51_fu_310_p1;
        icmp_ln49_10_reg_1437 <= icmp_ln49_10_fu_272_p2;
        icmp_ln49_11_reg_1442 <= icmp_ln49_11_fu_278_p2;
        icmp_ln50_8_reg_1467 <= icmp_ln50_8_fu_298_p2;
        icmp_ln50_9_reg_1472 <= icmp_ln50_9_fu_304_p2;
        icmp_ln51_12_reg_1497 <= icmp_ln51_12_fu_324_p2;
        icmp_ln51_13_reg_1502 <= icmp_ln51_13_fu_330_p2;
        tmp_19_i_i_reg_1411 <= grp_fu_148_p2;
        tmp_21_i_i_reg_1416 <= grp_fu_154_p2;
        tmp_24_i_i_reg_1421 <= grp_fu_160_p2;
        tmp_26_reg_1452 <= grp_fu_190_p2;
        tmp_27_reg_1477 <= grp_fu_194_p2;
        tmp_28_reg_1482 <= grp_fu_198_p2;
        tmp_29_reg_1507 <= grp_fu_202_p2;
        tmp_30_reg_1512 <= grp_fu_206_p2;
        tmp_s_reg_1447 <= grp_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_1526 <= i_fu_347_p2;
        zext_ln92_reg_1517[2 : 0] <= zext_ln92_fu_336_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        icmp_ln49_13_reg_1608 <= icmp_ln49_13_fu_600_p2;
        icmp_ln49_14_reg_1613 <= icmp_ln49_14_fu_606_p2;
        icmp_ln49_17_reg_1624 <= icmp_ln49_17_fu_647_p2;
        icmp_ln49_18_reg_1629 <= icmp_ln49_18_fu_653_p2;
        icmp_ln50_11_reg_1634 <= icmp_ln50_11_fu_694_p2;
        icmp_ln50_12_reg_1639 <= icmp_ln50_12_fu_700_p2;
        icmp_ln51_15_reg_1650 <= icmp_ln51_15_fu_759_p2;
        icmp_ln51_16_reg_1655 <= icmp_ln51_16_fu_765_p2;
        icmp_ln51_19_reg_1666 <= icmp_ln51_19_fu_806_p2;
        icmp_ln51_20_reg_1671 <= icmp_ln51_20_fu_812_p2;
        icmp_ln51_21_reg_1676 <= icmp_ln51_21_fu_835_p2;
        icmp_ln51_22_reg_1681 <= icmp_ln51_22_fu_841_p2;
        or_ln49_7_reg_1618 <= or_ln49_7_fu_624_p2;
        or_ln50_8_reg_1644 <= or_ln50_8_fu_718_p2;
        or_ln51_9_reg_1660 <= or_ln51_9_fu_783_p2;
        select_ln59_2_reg_1691 <= select_ln59_2_fu_1107_p3;
        select_ln59_reg_1686 <= select_ln59_fu_1089_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        p_a_10_reg_1602 <= p_a_10_fu_559_p3;
        p_a_6_reg_1578 <= p_a_6_fu_519_p3;
        p_a_7_reg_1584 <= p_a_7_fu_529_p3;
        p_a_8_reg_1590 <= p_a_8_fu_539_p3;
        p_a_9_reg_1596 <= p_a_9_fu_549_p3;
        p_a_reg_1572 <= p_a_fu_509_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_210 <= grp_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_223 <= grp_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_230 <= grp_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_236 <= grp_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_242 <= grp_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_251 <= grp_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        xor_ln22_reg_1555 <= xor_ln22_fu_495_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln92_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln92_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln92_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_return = collisions_0_reg_124;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_148_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state50))) begin
        grp_fu_148_opcode = 2'd0;
    end else begin
        grp_fu_148_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27))) begin
        grp_fu_148_p0 = reg_210;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_148_p0 = reg_223;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_148_p0 = R_z_reg_1549;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_148_p0 = edge_p2_x;
    end else begin
        grp_fu_148_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_148_p1 = reg_242;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_148_p1 = reg_223;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_148_p1 = bitcast_ln22_2_fu_501_p1;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_148_p1 = R_z_reg_1549;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state50))) begin
        grp_fu_148_p1 = edge_p1_x;
    end else begin
        grp_fu_148_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_154_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state50))) begin
        grp_fu_154_opcode = 2'd0;
    end else begin
        grp_fu_154_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_154_p0 = reg_251;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_154_p0 = reg_242;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state50))) begin
        grp_fu_154_p0 = reg_230;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_154_p0 = edge_p2_y;
    end else begin
        grp_fu_154_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_154_p1 = tmp_24_i_i_reg_1421;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_154_p1 = edge_p1_z;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_154_p1 = reg_236;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state50))) begin
        grp_fu_154_p1 = edge_p1_y;
    end else begin
        grp_fu_154_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_160_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state50))) begin
        grp_fu_160_opcode = 2'd0;
    end else begin
        grp_fu_160_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_160_p0 = reg_236;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_160_p0 = reg_223;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_160_p0 = edge_p2_z;
    end else begin
        grp_fu_160_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_160_p1 = reg_230;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state50))) begin
        grp_fu_160_p1 = edge_p1_z;
    end else begin
        grp_fu_160_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_166_p0 = tmp_19_i_i_reg_1411;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_166_p0 = reg_210;
    end else begin
        grp_fu_166_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_166_p1 = T_reg_1565;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_166_p1 = reg_210;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_166_p1 = 32'd0;
    end else begin
        grp_fu_166_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_171_p0 = tmp_21_i_i_reg_1416;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_171_p0 = reg_210;
    end else begin
        grp_fu_171_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_171_p1 = T_reg_1565;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_171_p1 = reg_210;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_171_p1 = edge_p1_x;
    end else begin
        grp_fu_171_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_175_p0 = tmp_24_i_i_reg_1421;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_175_p0 = reg_210;
    end else begin
        grp_fu_175_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_175_p1 = T_reg_1565;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_175_p1 = edge_p1_y;
    end else begin
        grp_fu_175_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_186_opcode = 5'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_186_opcode = 5'd4;
    end else begin
        grp_fu_186_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_186_p0 = p_a_reg_1572;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_186_p0 = edge_p1_z;
    end else begin
        grp_fu_186_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_186_p1 = reg_251;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_186_p1 = edge_p2_z;
    end else begin
        grp_fu_186_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_190_opcode = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_190_opcode = 5'd2;
    end else begin
        grp_fu_190_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_190_p0 = p_a_6_reg_1578;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_190_p0 = edge_p1_z;
    end else begin
        grp_fu_190_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_190_p1 = reg_251;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_190_p1 = edge_p2_z;
    end else begin
        grp_fu_190_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_194_opcode = 5'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_194_opcode = 5'd4;
    end else begin
        grp_fu_194_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_194_p0 = p_a_7_reg_1584;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_194_p0 = edge_p1_y;
    end else begin
        grp_fu_194_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_194_p1 = reg_242;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_194_p1 = edge_p2_y;
    end else begin
        grp_fu_194_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_198_opcode = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_198_opcode = 5'd2;
    end else begin
        grp_fu_198_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_198_p0 = p_a_10_reg_1602;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_198_p0 = edge_p1_y;
    end else begin
        grp_fu_198_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_198_p1 = reg_210;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_198_p1 = edge_p2_y;
    end else begin
        grp_fu_198_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_202_opcode = 5'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_202_opcode = 5'd4;
    end else begin
        grp_fu_202_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_202_p0 = p_a_9_reg_1596;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_202_p0 = edge_p1_x;
    end else begin
        grp_fu_202_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_202_p1 = reg_210;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_202_p1 = edge_p2_x;
    end else begin
        grp_fu_202_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_206_opcode = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_206_opcode = 5'd2;
    end else begin
        grp_fu_206_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_206_p0 = p_a_8_reg_1590;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_206_p0 = edge_p1_x;
    end else begin
        grp_fu_206_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_206_p1 = reg_242;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_206_p1 = edge_p2_x;
    end else begin
        grp_fu_206_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln92_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln339_2_fu_995_p2 = ($signed(9'd385) + $signed(zext_ln339_2_fu_991_p1));

assign add_ln339_fu_873_p2 = ($signed(9'd385) + $signed(zext_ln339_fu_869_p1));

assign add_ln82_4_fu_1294_p2 = (shl_ln_fu_1265_p3 + zext_ln92_reg_1517);

assign add_ln82_5_fu_1299_p2 = ($signed(32'd4294967295) + $signed(shl_ln82_3_fu_1272_p3));

assign add_ln82_6_fu_1305_p2 = (add_ln82_4_fu_1294_p2 + add_ln82_5_fu_1299_p2);

assign add_ln82_fu_1288_p2 = (shl_ln_fu_1265_p3 + tmp5_fu_1279_p4);

assign and_ln49_10_fu_1124_p2 = (grp_fu_186_p2 & and_ln49_9_fu_1119_p2);

assign and_ln49_11_fu_515_p2 = (tmp_26_reg_1452 & and_ln49_reg_1531);

assign and_ln49_12_fu_1134_p2 = (or_ln49_8_fu_1130_p2 & or_ln49_7_reg_1618);

assign and_ln49_13_fu_1139_p2 = (grp_fu_190_p2 & and_ln49_12_fu_1134_p2);

assign and_ln49_14_fu_1181_p2 = (and_ln49_13_fu_1139_p2 & and_ln49_10_fu_1124_p2);

assign and_ln49_8_fu_505_p2 = (tmp_s_reg_1447 & and_ln49_reg_1531);

assign and_ln49_9_fu_1119_p2 = (or_ln49_7_reg_1618 & or_ln49_6_fu_1115_p2);

assign and_ln49_fu_393_p2 = (or_ln49_fu_377_p2 & or_ln49_5_fu_388_p2);

assign and_ln50_5_fu_525_p2 = (tmp_27_reg_1477 & and_ln50_reg_1537);

assign and_ln50_6_fu_1149_p2 = (or_ln50_8_reg_1644 & or_ln50_7_fu_1145_p2);

assign and_ln50_7_fu_1154_p2 = (grp_fu_194_p2 & and_ln50_6_fu_1149_p2);

assign and_ln50_8_fu_535_p2 = (tmp_28_reg_1482 & and_ln50_reg_1537);

assign and_ln50_fu_439_p2 = (or_ln50_fu_423_p2 & or_ln50_6_fu_434_p2);

assign and_ln51_13_fu_545_p2 = (tmp_29_reg_1507 & and_ln51_reg_1543);

assign and_ln51_14_fu_555_p2 = (tmp_30_reg_1512 & and_ln51_reg_1543);

assign and_ln51_15_fu_1170_p2 = (or_ln51_9_reg_1660 & or_ln51_8_fu_1166_p2);

assign and_ln51_16_fu_1175_p2 = (grp_fu_198_p2 & and_ln51_15_fu_1170_p2);

assign and_ln51_17_fu_1209_p2 = (or_ln51_9_reg_1660 & or_ln51_10_fu_1205_p2);

assign and_ln51_18_fu_1214_p2 = (grp_fu_202_p2 & and_ln51_17_fu_1209_p2);

assign and_ln51_19_fu_1220_p2 = (and_ln51_16_fu_1175_p2 & and_ln49_14_fu_1181_p2);

assign and_ln51_20_fu_1230_p2 = (or_ln51_11_fu_1226_p2 & or_ln50_8_reg_1644);

assign and_ln51_21_fu_1235_p2 = (grp_fu_206_p2 & and_ln51_20_fu_1230_p2);

assign and_ln51_22_fu_1241_p2 = (and_ln51_21_fu_1235_p2 & and_ln51_18_fu_1214_p2);

assign and_ln51_23_fu_1253_p2 = (or_ln51_12_fu_1247_p2 & or_ln50_9_fu_1193_p2);

assign and_ln51_24_fu_1259_p2 = (and_ln51_23_fu_1253_p2 & and_ln51_19_fu_1220_p2);

assign and_ln51_fu_485_p2 = (or_ln51_fu_469_p2 & or_ln51_7_fu_480_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln22_2_fu_501_p1 = xor_ln22_reg_1555;

assign bitcast_ln22_fu_491_p1 = reg_210;

assign bitcast_ln49_5_fu_265_p1 = edge_p2_z;

assign bitcast_ln49_6_fu_565_p1 = p_a_reg_1572;

assign bitcast_ln49_7_fu_582_p1 = reg_251;

assign bitcast_ln49_8_fu_630_p1 = p_a_6_reg_1578;

assign bitcast_ln49_fu_258_p1 = edge_p1_z;

assign bitcast_ln50_4_fu_291_p1 = edge_p2_y;

assign bitcast_ln50_5_fu_659_p1 = p_a_7_reg_1584;

assign bitcast_ln50_fu_284_p1 = edge_p1_y;

assign bitcast_ln51_10_fu_818_p1 = p_a_8_reg_1590;

assign bitcast_ln51_6_fu_317_p1 = edge_p2_x;

assign bitcast_ln51_7_fu_724_p1 = p_a_10_reg_1602;

assign bitcast_ln51_9_fu_789_p1 = p_a_9_reg_1596;

assign bitcast_ln51_fu_310_p1 = edge_p1_x;

assign collisions_2_fu_1341_p3 = ((and_ln51_24_reg_1697[0:0] === 1'b1) ? collisions_fu_1335_p2 : collisions_0_reg_124);

assign collisions_fu_1335_p2 = (shl_ln121_fu_1314_p2 | or_ln122_fu_1329_p2);

assign grp_fu_183_p0 = i_assign_reg_136;

assign i_fu_347_p2 = (i_assign_reg_136 + 3'd1);

assign icmp_ln49_10_fu_272_p2 = ((trunc_ln49_fu_261_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_11_fu_278_p2 = ((trunc_ln49_5_fu_268_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_12_fu_382_p2 = ((tmp_31_fu_362_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln49_13_fu_600_p2 = ((tmp_32_fu_568_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln49_14_fu_606_p2 = ((trunc_ln49_6_fu_578_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_15_fu_612_p2 = ((tmp_33_fu_586_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln49_16_fu_618_p2 = ((trunc_ln49_7_fu_596_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_17_fu_647_p2 = ((tmp_35_fu_633_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln49_18_fu_653_p2 = ((trunc_ln49_8_fu_643_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_371_p2 = ((tmp_fu_353_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_10_fu_428_p2 = ((tmp_38_fu_408_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_11_fu_694_p2 = ((tmp_39_fu_662_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_12_fu_700_p2 = ((trunc_ln50_5_fu_672_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_13_fu_706_p2 = ((tmp_V_fu_680_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_14_fu_712_p2 = ((tmp_V_4_fu_690_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_8_fu_298_p2 = ((trunc_ln50_fu_287_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_9_fu_304_p2 = ((trunc_ln50_4_fu_294_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_417_p2 = ((tmp_37_fu_399_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln51_12_fu_324_p2 = ((trunc_ln51_fu_313_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_13_fu_330_p2 = ((trunc_ln51_6_fu_320_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_14_fu_474_p2 = ((tmp_42_fu_454_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln51_15_fu_759_p2 = ((tmp_43_fu_727_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln51_16_fu_765_p2 = ((trunc_ln51_7_fu_737_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_17_fu_771_p2 = ((tmp_V_5_fu_745_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln51_18_fu_777_p2 = ((tmp_V_6_fu_755_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_19_fu_806_p2 = ((tmp_45_fu_792_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln51_20_fu_812_p2 = ((trunc_ln51_9_fu_802_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_21_fu_835_p2 = ((tmp_47_fu_821_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln51_22_fu_841_p2 = ((trunc_ln51_10_fu_831_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_463_p2 = ((tmp_41_fu_445_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_341_p2 = ((i_assign_reg_136 == 3'd4) ? 1'b1 : 1'b0);

assign isNeg_2_fu_1001_p3 = add_ln339_2_fu_995_p2[32'd8];

assign isNeg_fu_879_p3 = add_ln339_fu_873_p2[32'd8];

assign mantissa_V_2_fu_977_p4 = {{{{1'd1}, {tmp_V_6_fu_755_p1}}}, {1'd0}};

assign mantissa_V_fu_855_p4 = {{{{1'd1}, {tmp_V_4_fu_690_p1}}}, {1'd0}};

assign or_ln122_fu_1329_p2 = (shl_ln122_fu_1323_p2 | collisions_0_reg_124);

assign or_ln49_5_fu_388_p2 = (icmp_ln49_12_fu_382_p2 | icmp_ln49_11_reg_1442);

assign or_ln49_6_fu_1115_p2 = (icmp_ln49_14_reg_1613 | icmp_ln49_13_reg_1608);

assign or_ln49_7_fu_624_p2 = (icmp_ln49_16_fu_618_p2 | icmp_ln49_15_fu_612_p2);

assign or_ln49_8_fu_1130_p2 = (icmp_ln49_18_reg_1629 | icmp_ln49_17_reg_1624);

assign or_ln49_fu_377_p2 = (icmp_ln49_fu_371_p2 | icmp_ln49_10_reg_1437);

assign or_ln50_10_fu_1199_p2 = (xor_ln50_fu_1160_p2 | xor_ln49_fu_1187_p2);

assign or_ln50_6_fu_434_p2 = (icmp_ln50_9_reg_1472 | icmp_ln50_10_fu_428_p2);

assign or_ln50_7_fu_1145_p2 = (icmp_ln50_12_reg_1639 | icmp_ln50_11_reg_1634);

assign or_ln50_8_fu_718_p2 = (icmp_ln50_14_fu_712_p2 | icmp_ln50_13_fu_706_p2);

assign or_ln50_9_fu_1193_p2 = (xor_ln49_fu_1187_p2 | and_ln50_7_fu_1154_p2);

assign or_ln50_fu_423_p2 = (icmp_ln50_fu_417_p2 | icmp_ln50_8_reg_1467);

assign or_ln51_10_fu_1205_p2 = (icmp_ln51_20_reg_1671 | icmp_ln51_19_reg_1666);

assign or_ln51_11_fu_1226_p2 = (icmp_ln51_22_reg_1681 | icmp_ln51_21_reg_1676);

assign or_ln51_12_fu_1247_p2 = (or_ln50_10_fu_1199_p2 | and_ln51_22_fu_1241_p2);

assign or_ln51_7_fu_480_p2 = (icmp_ln51_14_fu_474_p2 | icmp_ln51_13_reg_1502);

assign or_ln51_8_fu_1166_p2 = (icmp_ln51_16_reg_1655 | icmp_ln51_15_reg_1650);

assign or_ln51_9_fu_783_p2 = (icmp_ln51_18_fu_777_p2 | icmp_ln51_17_fu_771_p2);

assign or_ln51_fu_469_p2 = (icmp_ln51_fu_463_p2 | icmp_ln51_12_reg_1497);

assign p_Result_2_fu_969_p3 = p_Val2_7_fu_741_p1[32'd31];

assign p_Result_s_fu_847_p3 = p_Val2_s_fu_676_p1[32'd31];

assign p_Val2_11_fu_1073_p3 = ((isNeg_2_fu_1001_p3[0:0] === 1'b1) ? zext_ln662_2_fu_1059_p1 : tmp_50_fu_1063_p4);

assign p_Val2_7_fu_741_p1 = reg_210;

assign p_Val2_s_fu_676_p1 = reg_242;

assign p_a_10_fu_559_p3 = ((and_ln51_14_fu_555_p2[0:0] === 1'b1) ? edge_p1_x : edge_p2_x);

assign p_a_6_fu_519_p3 = ((and_ln49_11_fu_515_p2[0:0] === 1'b1) ? edge_p1_z : edge_p2_z);

assign p_a_7_fu_529_p3 = ((and_ln50_5_fu_525_p2[0:0] === 1'b1) ? edge_p1_y : edge_p2_y);

assign p_a_8_fu_539_p3 = ((and_ln50_8_fu_535_p2[0:0] === 1'b1) ? edge_p1_y : edge_p2_y);

assign p_a_9_fu_549_p3 = ((and_ln51_13_fu_545_p2[0:0] === 1'b1) ? edge_p1_x : edge_p2_x);

assign p_a_fu_509_p3 = ((and_ln49_8_fu_505_p2[0:0] === 1'b1) ? edge_p1_z : edge_p2_z);

assign r_V_4_fu_923_p2 = zext_ln682_fu_865_p1 << zext_ln1287_fu_913_p1;

assign r_V_5_fu_1039_p2 = mantissa_V_2_fu_977_p4 >> sext_ln1311_8_fu_1031_p1;

assign r_V_6_fu_1045_p2 = zext_ln682_2_fu_987_p1 << zext_ln1287_2_fu_1035_p1;

assign r_V_fu_917_p2 = mantissa_V_fu_855_p4 >> sext_ln1311_7_fu_909_p1;

assign select_ln1312_fu_951_p3 = ((isNeg_fu_879_p3[0:0] === 1'b1) ? zext_ln662_fu_937_p1 : tmp_49_fu_941_p4);

assign select_ln59_2_fu_1107_p3 = ((p_Result_2_fu_969_p3[0:0] === 1'b1) ? sub_ln82_1_fu_1097_p2 : trunc_ln82_4_fu_1103_p1);

assign select_ln59_fu_1089_p3 = ((p_Result_s_fu_847_p3[0:0] === 1'b1) ? sub_ln82_fu_963_p2 : trunc_ln82_3_fu_1085_p1);

assign sext_ln1311_4_fu_905_p1 = ush_fu_897_p3;

assign sext_ln1311_5_fu_1015_p1 = $signed(sub_ln1311_2_fu_1009_p2);

assign sext_ln1311_6_fu_1027_p1 = ush_2_fu_1019_p3;

assign sext_ln1311_7_fu_909_p1 = ush_fu_897_p3;

assign sext_ln1311_8_fu_1031_p1 = ush_2_fu_1019_p3;

assign sext_ln1311_fu_893_p1 = $signed(sub_ln1311_fu_887_p2);

assign shl_ln121_fu_1314_p2 = 64'd1 << zext_ln121_fu_1311_p1;

assign shl_ln122_fu_1323_p2 = 64'd1 << zext_ln122_fu_1320_p1;

assign shl_ln82_3_fu_1272_p3 = {{select_ln59_2_reg_1691}, {4'd0}};

assign shl_ln_fu_1265_p3 = {{select_ln59_reg_1686}, {2'd0}};

assign sub_ln1311_2_fu_1009_p2 = (8'd127 - tmp_V_5_fu_745_p4);

assign sub_ln1311_fu_887_p2 = (8'd127 - tmp_V_fu_680_p4);

assign sub_ln82_1_fu_1097_p2 = (28'd0 - trunc_ln657_fu_1081_p1);

assign sub_ln82_fu_963_p2 = (30'd0 - trunc_ln82_fu_959_p1);

assign tmp5_fu_1279_p4 = {{{select_ln59_2_reg_1691}, {1'd0}}, {i_assign_reg_136}};

assign tmp_31_fu_362_p4 = {{bitcast_ln49_5_reg_1432[30:23]}};

assign tmp_32_fu_568_p4 = {{bitcast_ln49_6_fu_565_p1[30:23]}};

assign tmp_33_fu_586_p4 = {{bitcast_ln49_7_fu_582_p1[30:23]}};

assign tmp_35_fu_633_p4 = {{bitcast_ln49_8_fu_630_p1[30:23]}};

assign tmp_37_fu_399_p4 = {{bitcast_ln50_reg_1457[30:23]}};

assign tmp_38_fu_408_p4 = {{bitcast_ln50_4_reg_1462[30:23]}};

assign tmp_39_fu_662_p4 = {{bitcast_ln50_5_fu_659_p1[30:23]}};

assign tmp_41_fu_445_p4 = {{bitcast_ln51_reg_1487[30:23]}};

assign tmp_42_fu_454_p4 = {{bitcast_ln51_6_reg_1492[30:23]}};

assign tmp_43_fu_727_p4 = {{bitcast_ln51_7_fu_724_p1[30:23]}};

assign tmp_45_fu_792_p4 = {{bitcast_ln51_9_fu_789_p1[30:23]}};

assign tmp_47_fu_821_p4 = {{bitcast_ln51_10_fu_818_p1[30:23]}};

assign tmp_49_fu_941_p4 = {{r_V_4_fu_923_p2[78:24]}};

assign tmp_50_fu_1063_p4 = {{r_V_6_fu_1045_p2[55:24]}};

assign tmp_52_fu_929_p3 = r_V_fu_917_p2[32'd24];

assign tmp_56_fu_1051_p3 = r_V_5_fu_1039_p2[32'd24];

assign tmp_V_4_fu_690_p1 = p_Val2_s_fu_676_p1[22:0];

assign tmp_V_5_fu_745_p4 = {{p_Val2_7_fu_741_p1[30:23]}};

assign tmp_V_6_fu_755_p1 = p_Val2_7_fu_741_p1[22:0];

assign tmp_V_fu_680_p4 = {{p_Val2_s_fu_676_p1[30:23]}};

assign tmp_fu_353_p4 = {{bitcast_ln49_reg_1427[30:23]}};

assign trunc_ln49_5_fu_268_p1 = bitcast_ln49_5_fu_265_p1[22:0];

assign trunc_ln49_6_fu_578_p1 = bitcast_ln49_6_fu_565_p1[22:0];

assign trunc_ln49_7_fu_596_p1 = bitcast_ln49_7_fu_582_p1[22:0];

assign trunc_ln49_8_fu_643_p1 = bitcast_ln49_8_fu_630_p1[22:0];

assign trunc_ln49_fu_261_p1 = bitcast_ln49_fu_258_p1[22:0];

assign trunc_ln50_4_fu_294_p1 = bitcast_ln50_4_fu_291_p1[22:0];

assign trunc_ln50_5_fu_672_p1 = bitcast_ln50_5_fu_659_p1[22:0];

assign trunc_ln50_fu_287_p1 = bitcast_ln50_fu_284_p1[22:0];

assign trunc_ln51_10_fu_831_p1 = bitcast_ln51_10_fu_818_p1[22:0];

assign trunc_ln51_6_fu_320_p1 = bitcast_ln51_6_fu_317_p1[22:0];

assign trunc_ln51_7_fu_737_p1 = bitcast_ln51_7_fu_724_p1[22:0];

assign trunc_ln51_9_fu_802_p1 = bitcast_ln51_9_fu_789_p1[22:0];

assign trunc_ln51_fu_313_p1 = bitcast_ln51_fu_310_p1[22:0];

assign trunc_ln657_fu_1081_p1 = p_Val2_11_fu_1073_p3[27:0];

assign trunc_ln82_3_fu_1085_p1 = select_ln1312_fu_951_p3[29:0];

assign trunc_ln82_4_fu_1103_p1 = p_Val2_11_fu_1073_p3[27:0];

assign trunc_ln82_fu_959_p1 = select_ln1312_fu_951_p3[29:0];

assign ush_2_fu_1019_p3 = ((isNeg_2_fu_1001_p3[0:0] === 1'b1) ? sext_ln1311_5_fu_1015_p1 : add_ln339_2_fu_995_p2);

assign ush_fu_897_p3 = ((isNeg_fu_879_p3[0:0] === 1'b1) ? sext_ln1311_fu_893_p1 : add_ln339_fu_873_p2);

assign xor_ln22_fu_495_p2 = (bitcast_ln22_fu_491_p1 ^ 32'd2147483648);

assign xor_ln49_fu_1187_p2 = (1'd1 ^ and_ln49_14_fu_1181_p2);

assign xor_ln50_fu_1160_p2 = (1'd1 ^ and_ln50_7_fu_1154_p2);

assign zext_ln121_fu_1311_p1 = add_ln82_reg_1702;

assign zext_ln122_fu_1320_p1 = add_ln82_6_reg_1707;

assign zext_ln1287_2_fu_1035_p1 = $unsigned(sext_ln1311_6_fu_1027_p1);

assign zext_ln1287_fu_913_p1 = $unsigned(sext_ln1311_4_fu_905_p1);

assign zext_ln339_2_fu_991_p1 = tmp_V_5_fu_745_p4;

assign zext_ln339_fu_869_p1 = tmp_V_fu_680_p4;

assign zext_ln662_2_fu_1059_p1 = tmp_56_fu_1051_p3;

assign zext_ln662_fu_937_p1 = tmp_52_fu_929_p3;

assign zext_ln682_2_fu_987_p1 = mantissa_V_2_fu_977_p4;

assign zext_ln682_fu_865_p1 = mantissa_V_fu_855_p4;

assign zext_ln92_fu_336_p1 = i_assign_reg_136;

always @ (posedge ap_clk) begin
    zext_ln92_reg_1517[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //checkAxis_1
